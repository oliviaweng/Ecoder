node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\201\003\331<#\333\243\276u\026Z\277\307MP\276\023\361)>\314\252\002\276\3576\017\277\245\364>\275N\330\200\275!\304v>J\367%=D\243\260\275\270\004\336>\366\007%?\355\223\361=\003\203\355\275\004,Z\276\324\254E>`3\010>\334\261\226\276\241\273#?I\224\342\275\334]\356>N\225&\277\266\313\200=\356\217\026\276\005@w?\305\273\r?\207XO\277\334\345/=\005\265\n\277[@\274\276\201Bj?\222\2309\277Y\205#\277\373\006%\277\237\214\270>K.\256\276\265\334\327\275\301-(>\376%\002=\277U\027\2756\030j>\354\243\362>o\273\353=Z\354\275>\356\313\300>\007`I>\351\222\213<#]M>\245\326\313=x\0241=\3735\'?\000\207M?{\343\232>/\345\235=\007\355|>\326\357\302>^\371\023\276\205\0056>&\022\225\275\241\234\245\276\014f\251>\"\005)?zvX>Q\337\214\275of\236>\237\227\270\275\261D*\275U\004\301\276>\305\353>\302\222\242>\377\r\031?{w\036>\256\335x>\245O\026>~\223\362>\2415\371=G\212+\276\243\267\014\276h6c\276\026\277\206\276\347\002Z?\315\215\014?\033j8>\357dZ>H\327t?F\361\335>&=\353<\t\266\004=@\321\274>\362E\301?\215\000\005?vb\242>k\254e>m%Q>E\304\023>;\377\203\276\251\274R>\004\3015\277\234\304!\277DS\335\274\216M\013\276G\341\244\276\315\253G\276(\324B\276\266\017\275>\371s\227>6\360\022?\007I\233\275\304\025\262\275CN\">D\203<\277,\237X?\'\313)\276\207\307\222?\341\033\247\276IsL?\340\010\325=\320\351\236\277\370FN\275@\366\216<`T+\276pG\233\274\303 I\276\240*\326\275\310\004!\2750X+=\347%\003\275\034\2764?\371+[@<\207\021??\331\332=N\3644\276\014\335B>\310\365\313=j5\334=\036o\201>\347I\256>\377\300\027=\365\024e>\207E\355>Nk\240>B\261\262\275\007\273Y>\334=I\276m\357\321\275\305\324{?`\024~\275h\036\310\276\315\332\007>\337\311\036\276+7\304\276\307d\003\276\266#U?S\000\215\277\217\242-<\032Uc\275\210\242\300>q\2124\277E\\X?\352\027\214\276s@\304\275l2\247\276\224\361\232\274\021\272\335\275\361\252%=\354U\025?$K5\276\r\350\275>_)C=\321\004\251\274]\010\254>\331\271\222>T%\006?y\210\026>\251ff\276\347\306\232>\007)\371<\010Z\267>\"\273\306\276 \325\021\277l\252\237\276\330=$\276Y\314\337=\371\261\"?\2111\002>\220\210\263>P\265\007\277\006s\237\275t\001b\273\275\'\016\300\320z\251\2763\254.>aE\372\275\023\227\306\275p\254\314\275\252\372\372\275\037\240\350\276rf\344\276\217\014\360=y\315m>v\367\034\276C\232!?<%\016\277,\n\375>\375\3410\275!F\320>+\206d=b7\013\277\374\031\024?8\034}\275z%n>\361\026\010\277\327\311`?\224\205\344>\324+r>\r\225\321\2766\262\361>\242\335\246?e\334}><VG\276>%+?\361\371\233\276\255\031\263\276\263\345\355=>\211\373>.K\220;@\234J?M\351;?\210\304\004?\217\313\201?\213\355\006>\366\337\232>GW\010?\265\200\251>o\266\030?\'\235\010?,\234\202\276\237\307.\276\177\304p\276UIl?6\001\254\275\"&#?\234\230<\275\237\303$=\"\324\323=\313\305\253\277\030\'\340=\334M\240\275\300D\300\274J\276\370\275\270\231\216\275x\241F\275\022\323\232\275\261\236\016\276\231\022\030\276{-y?\254 \226@\tgd?\242\025\255\276\240:\361\275\356~->\347\346\347>\220\324\312>1\372\004\275\332\363\027\277~\240\200>\370\321\342>z\231\326\275\330&==\356FD\276\211\177\t>\306\312\265\275E\230\261>\313fc\277\366A\352\275\034\365\316=\n\177\230>\324\003]?h\232\370>\001`\201\275\302#%\275\307\227K?f2\013@\353\371\026?\300\037\265\274:\n-\275\203\252\022\276\263\255\007??\022b>#\001\254\276d_\007>e+\351=\215T\033<\021\244\201>\035\2576\276m\221\225>\256\307\321\275C\202\252= \336\207=\224U\"\276\277\010\217>\322)\230<Zy\245=g\352\022\276nk\n<\330{W\277j\013:?u\020W?5\324\270>\216)`>%\004\366>\270\332\314\274d{\317=\222\360\020\277\010\234\212;z\214\343\276\352\220r>\256\241C@\251N\004=\030\026u\276\032\271!\275\351\271\265\274\010\375+\276\362\356Y>\253(w:\2559\215=q\323\037\276?\211\335>\231\304\372>\327\307\364\276X\344\004\276^\210\002?\304m\'>\240N\374<g\373\034\276\026\303\207>Q\014t>v[b>\275!5>\002\3752?\211\243\314\275[\345\255\276\014g\\\277\267H&=XB0?\020V\250>k\371\303>M\311z\277\331s\272\274\t\007\372>\2434\257=\361#:>j\300\216\276\314 \204>\375\237\r\277\005\300\024\277\210\354o\276\343\377c\277\034LO\274hF`\276\202^\010\277\276p\177\2767\022}\276}\002\006\277\013\"\304\275#L\240=\321\215\255>\372\313\225\2770\234\236>\233y\037\277\372\224\331\2759\204%=5\326\034>\026_2\276\356\251/\276\256q\007\276\035\371\353\2750~Q=\004@\246=K<\277\275@?\021<[\250:\276*\241Z\276\257b\\\274\222\272\006\277E\002\032?\007Z\200\275\322\250\364\275]\347{\275\323\222\273\275\000pi?\0032\330>\327\260E>\245\342J\276\257\344\'\277:\356\230>4\204\211>\362_k>f7\353\275\201\024\346>\215\202A\276D\237\033?J\251\202>\242=\266>*\372\372>\r\222\232\277\337\034z\276\r\3366\276\\\3345?\223\021\225\276b\005\315\277b\"\200\277@\245\344\276\343\334\t\276\271y\325\277\351\223\t\274\375\352\206\276y1\353=\232h\316>\214KY\276\262`\022\276b\335S\277J\346\277\275f\336\200=cm\205>\353\037\201=\267\225\003\276\310\200\266\275C\2223\276l\005M>\255w/>\304\342B>.\037\214>+\346\036?O%\022?#\021\025?W\017\032>B\0053?Q\272Z\276\024R\277\275^I\223\275\020\000\347>\365\031o\276\334\005#?\026\252\331>H\322\303?\245b.>(\000\r\276\031\356Y=\370\326\030?\335\261\277>jN\374>\3324\'>>\372\005\276A\007\227\277\013\337\320\2768\341}>D[\n>|\264\246\276\273\236\n\276I\230\201\275\264\247\306=\273\302{\275 >\220\276L.$?\024$\n?\354\017\352=._\312\275$^\246>*\336\310\275\031\035;\277\240\257,={\246:?W\272\271\275_\305\030\277#b\207\277{\201\007?\232\250B>\350J(>\355\335(?\272K\030\276\260=P?\260\3563?5n\270\276\336\374\272>\356\311p\276[t4\276\2703\003=\213CG\277D<\025\275\262\0149<Y\335\003>\305\264R>\375\255\263\276\271\324M\276j<x\277\242\2445>`/\333\276\263\267{>%\271[?-\326\205=\367\025\327:\312\005\006\276@\370.;\215\340\272\275t\315~\275\203\033\024\276@m\276\274\270K\250=\310\316\343<\217g@\276\207\241|?\236\224\363<\317\345\352\275\246o\225?\367\003r=\251+??\214\323\245\276\265\234\033\277\036]\216>\270\313X\275\263\325\211>xl\244>\345\277x=U\356\374\275\252[S\274\223\377\252>\016\017P\276\000\325#\276\320_\010\276\217\243F\276v\352F\276\235\302\n\275Dk\023>l\251A\276\357\r\207\274\323\'\252>\014g\177>\35265\277\230R\020?\0219\301<\346/+\2762\0108\276\302/\256>\214c=\276\220no\276q\244#\277\251(\334\276\305J\013?\005%\225\275-\275\002\276<U\002><\327H>/U\373=\006 \313>L+\336>\303M\225>j\\\030\276=\377\324;\352U\244>\253\254\353>\312`q?\273\036\210=\303\225*=\265L\013>\33088\276\030\270#\276\224h\240\276Mp\233\275\347\252\212>1b\333\276,Y\014\276P\333\353\276R\274\005?]\243\237\275\213oS\277\2667\256\275gl\207<\212r4?B\266\270<\300\213\364>\210\354\342\274H\234\010\277\333\206\336>\276\013\303>AB\224\276M\364\366\275z\200\024?\274\357T>\317\254\000>\207\002]\276a]\214\276h\215(?\341b\273\300\360p\037<\214\037\n\277\':\336>-m\346>\363\266\314\276\007_\206<]\227+>*\0252\277t\010\264?\340\3228?\225C\212=u\310\346>,Z7\272\226zt=\271\033\r>\305\027\236>:&!?P\216\247\276f)D\275\302\221\352=\2178\322<\243\224\267>&\234\222\277%C8>SV\274\275\240\325\223\276\346\201\014?qcP\2764{\311<\306\035\031\277N\376\027?\211\232\331\276c\350-=U9!?\216\362M>\346\374\274>\200\207\265:\340~\022>\210\024\333<\000\312\014<PU\n<\256\370\036\276\200\025x=\260\000\234<\312\021\302\275\016\007\022?C\264{\276\275\370\260>\302\346\241\276\035\230T\275\270\0021>\354Eu>\3574\213=\206\025@\275\320\230\010?\257\247^\276\373\010w\274X\353\214\273\324\234Y>\010\356\340\274\215\217M>\2514\220>_u:>/kO>\263\322c>#6-?\\\200\337\276%\203\266>\027\n{\276-.\321\275]~\210\277b&S\276\311N\251>?\004~\275\235\3434> \304*?\035\252n\277\271\365d\2767\243 \277\033\360\271\276\315\306\377>\331]j\276;.\241\275\220\223\357\276\245z\370<\273\343\025>\245\316|=\035T$>F\214\332\276\303\350\332>\257b\210\276\315V\250>\355\262\030>\242k\330\275\022\326\276=\200e \275|\013\037\277!\016\027\277z\273\360<\210\017\220=\351\351\365\276\245\367\370=\'\035\322>X\206\227>\241[b?\261\206\211?\313\023\243\275Oy\250?\277W\255\276z\3538\275\304\010Q>\200\367M\2766d\226>\304\211\004\277\030\274\273>\247\010\354=~\0312>\207\020\222\276PZ\007>O\2013\276\025\'\n?o\262\332\27481Y\275h$\267\276k\247,\275\342!\340>\343\265\200\276\267\274z>\240\275=\276Y\n\324=oA\316\276\023B\203\276\2554\n@\343\344\356=?u\307\276\264lR>3\254t<\207\326~\277\0063\207>f\207\203?\221}\333\275\364\376\354\276=\023\256<\t\332\311\276\266Y\014\277`{\002>\272\257\037=\230Y1?\330\353\225\275F\301C=\307\227\316\275\3602v>\215v\221\275d\362\256\274\355X\274\273\226-\241=KC\341<g\242\225?\"\252(>8(;?Rr~\275$\306\036\277j\342\332=\267\271\242=\302>\r>\026i >\230\017P\276x\353@=\250\331\363\275\010\325v=b<\362\275d\277K\275\'\372\314=_T\216\274\\\035D??;\342\276\340\231\353=\313\212\262\275\332@\336\276\240\342\302>\357Z\036\276l\374E>\205\217\221\275T\362;\277\254\010\'>n\246\203=\2623\334\276\230<\017\277\322b\270\275\246k\013?o\313N>\370\312\"?!\312\227?\2002\347>uu\240\276\362e\"\2773\276C\275\r\035\371=\334\t\312\276\271p\360=\357\214\216\277\366\266\257\276g\240u\276\233z\025?\364\234o\276^\334\253>\2038g>\376eB>\215?\314\276\361\213\016\2760\021\226>\263\237\354>\263\207V\276\202\315e\276%\262\331=\305\322\307=6F\227>\227GG>p\332\344\274\345oX\276\335\315\362<\307\254\254>\214g\205\276\215MC\2749\222\261>$\325\273\275\017|\r\276\352\'\024\275\213|%\276\r\226e>\271\244\362>&\032.>\302l\327>Jd\022>!\312\257>rZ\000\277\231\343\210>M\365i\277\206o)\274\274%\215\275\272\213O?\312\261K>\334\005D=\212v\212=\303w\'\2760\275\313>\036S >\034Y\010\276\340\332w\274\311r\337\275\214\373E>\001\027!=E\001T\276\270\264\206\275|z@\276@\035\224\276)z\340=^\345\370\275\376{\030\275.\2070?\210\313\334?\355\313\376=\271\005\226\277\001Z\315>\032\352\267\277[\014\001@WR\265?\307\317C?\262p\264=\3174\354;tx\202<!\242\034\275s\315\321>\036\337\177\276G\223\350\276~\003\301\276\030\001a\276ax#>\253t\037\277\360\306[<\305\206\025\276C\336\276\276/\013\336>Q\367\223\2756%$\276\tm\330\276\347c\352>\344\302\016>\231\356L>\200TF\2753h\225>#%x=\240\200\352=\351\205B\276d\211\306=Zu\014\276\037gD\276\202X\n\276\020\364\267\274\300\330\247=\315dD\276\037\343\204?\221\255O\274\376\244\265;\253?\013?\370@\014\276\312\271\003?k\027\241>~\013\022=\264)\225\276\275\277{\276\265M!\277\352)+\276\372ge\275?d\316\276\243wk>\037\245\204\276\034v\317\275\336\321f=Xc\227>\343\r)\276fW\370=\2417\301=\322\373n\277/\311U=Q\356\021\275P\032\222>\017\036 \277\370\350e\277wLi\277 \210\320\276\324\235\350;\312\325\261\275\027\333\333>\323U\335>\225\034w>\277\277x?\263\354\237=P\300\022?\225\367\206=\233\351\214=:\272\361\275b\r\306\274PY\252>B\\g>\273e\n\276\270\030\345\275\257\301\227\276\236\303 >\305\250T\276~\277\275>c8{>\324A\375=Id\013?\233\014\213>L%\010??+\205\273\177v\330\275\356\2721>\335\371D\276\242A<\276{\026\332>$\272\305>\022F\350>\210|\033>\010}:?\221h7\276u\376\336;\373\326;\277\266*\267\276~\237\315>\262A3=7\024p?\236\314o\276K\375\002\275\033\356o>v4\213\275\263\2519\276\262V\204\276<\242\004=\215F\300=\265\016\200>3\377J\276\251\271\217>\311\346\277<\310\223\027\276]?\212>\323\352f\276\271\215\212\275hd\231>C\210\t?\223\213\004\276\276\310G\276_\034-\300`\036\340>\362\317!?\022\203v<;\374e\276\240V\313=\177\"\337\276P\214\'\276\033\377a>\244&\336=E9=\276\376\002\275\275\205u3\276\334q0?5\344\211=a\215 >\003\251\020>\\\356\243\276T)/>\325d4\276\255\3456? \263H\276\204\214\001?\036\234>>D\373@\276@\264\346=\222\0002\277\t\362\323\275\000\350\n98\334\006\276\0105\212\274\264\211\006>t\375\277=\320\337G<\324\360\031=75\\\2727R\035?\354\321/?lx\n?\326Ko\277O\222\276\275GE\036?\307\004\363\275\177\214\247\276\342)\"\276\226S\245\275V!\256>\241\3777>\037\251R\275:/x=\013o\257\276\223EH=\367\221\250>\n\0331\275\334\311 \277p\374\376>\217\311\003\275{\304Q>\263\316&\272?7\212=\2313B\275\272\'\353\275\0042~?\377\300\301\276@\3555?\231\346\266\276J\305Z>\335-\232\277\301\'\331>\365\273#=Tm\257>5\212d\277r\260\205>CR\035\277\325\335:\277!\350Y\276Pu\311>\034\031\025\275\222^\342\276\222\224\327=\243\r\312\275\037\364k\275\350\035N\276\024\341\365<r\007\302>\036\357\216\275\300\353\355>h8\020?v\307\260>\250\344\227\275\024\314\244\276z\367r\276\007#\253\276(\022\244\276\310\032\027>\337\225`=``\352\276\232\367\305\276M\354H?\032\250r>t(\227>\347\233\236\273\321\024\031\275\262\311\337=#\204\333\273\024\"~\276l\2565\275\205\306\201>\343z\024\277\2308R\277q)\001?(\246\202>\277\303\203\277\034\'J>h(\212\274\303n\255\275\346s\223\276\344+\001\277\360o\275?\201{\253>\034\313G\276vU\324\275\217\341\001?\324c\225\276:\266\235>LB\276\275\254u.\277\362\360\276?\346:\212?\014NK\276z[\266?\221%\372\274\314\360\200\275^\341:>\376\020\024\277\237K\t?tM\021?%I\301\275\330\263\025>@05\276\364\364\027\275\220yo?~\r\033\276\313l\227=\202\214J?\311\277\324\275c^(>\001i\014=*\n:?e\270\205\276\374\010\022?\246\034\026=\227&z\277g\247\311\276\336\202\207?@\016\222<\016\362\004\276bY\021>\010\220q=h\255,>\020\275\250\274\241\257\253\275\305-K\276\326\275:\274\357\324u\2777*\370\277hT\313\277\004\\Q>\322\237\014\276\233@e\276)\231\'\276\251\n^\277\302\224\321\276m\223K\275\314\3512\276\245\250[>\\f\'>\364w\020\277\365\211\221=\352\005\274=\306\371\345<\241\264\320>e\031e\276\303\366:>\320%\266=T\025\211>\272\366\312\275\302\241\262\275\314\006\350\275\206\316\022>d\315@>p\177\n?\242\343\205>\260\2067\276cX\203=\354\3400@\t\374:\275GQ\257> \027\240>`\220\263\276\253$\314>\302\226\316>i\216\271?\034@\026\276\344P\202\276\0327\213\276\253\342\266;\257\355\233=N9P\276\377X\207>\233\235\211\276\357\306S=M\356\360=\202\214\206>\307\367\253>\242l\201=\212\336\223>\345l\276>*\313\302>\331\177\354=z\330\035=R\216\217=\177\021\035>\354\376=\275\227\212\233>tY\020>eW?@\313\253A\277\353\374\'>\332\221F>E\256\024\276]\270L>oQ8\275\010c\r\276\245B<\2764\275\201\277\360e\030\277\206\317\264\276J\365\251\274\357\302\266>\205\266\344\276\324\rY\276G\302\240\276iZ(\276V|\325\273\324\033]>\277\235\355\273H\331=>%z\232=\273P\250>\"\227M\276\342\320\334\276\220\340\223=\320\n\026>\307D\302\276\021\306\'?K\363\274\277C=\255\276~\035N?\211\306\210\276}5,\276lBR>\032\307h>\353\'\377>\271\304\372>_\257\200>Kb\364?F.\013:\310\035\355>\323L\007\276\366\210f>\233K\023\274\302\006\243=\372\233\016?6)C\276\201\023\031\275DL\236?p\216\245>,?#\276i^\376\274\221\2043\276\221{]>\306\376\347>4\325<>\320\244\317\275q\021\250\275\330\037 >m)-\276\334\234\030=\225/8\276\246]>\276E~\033\2769\243\332>u\031Q@\345B\362><\031{?%w7\276\037\202b?F\373\310=O\023\252:zA\221=\250M\031\275\230?\355>\322c\035>{$e>0\211\264<\267FN>\237c\256\276\235\324\326\276gW\211\276\031A\027\277R\271\314\276SX\026\277\365\007\204\276\276\245\360\276\006Y\000>\342t\301\275\330\211\221=\374\002g=P\"\236\277\023:i\276N\213\213\276\216\333v\276M\245\250?\322\343\342>\321\311y>\0318\255>\260e\265>-\233&>^g\'?\251%\006?3\210V\276\"z#\276B\3325\276\214\363\031>\r|L>S\3570>t\210t>\251\241\022=\234\240\003\275\317@\266\276.\227x=6\311@<\245Pr\276\260\257\331\275\333Q\t>\311\230\233\276)^v\275\t\301\322\276\371\357\213\276\023\276\334\276k\277\335\275\022\322\020\277#\344@\276q\301\207\300\227\202\004\276(\006\033?_4\'?\004\"\351>\316\214\325>\223d\203;\326\253\231?\374V\267>qn\312\277\2108\244\277\354(\242\273\350\031\250\275\264\260I?\026\010\202\277\331\336\010\277&\323Y\277f\345 >\225d\021\276\365\200\021>t9\254?\365\252\305=q\264\350>t\360\236=\321\342{\276Dy\005\277- \033>4\364P?BV\004\277\300g\004?\312\2618\277\355\3310>7O9\275$\000\206>\005X\262\275\306\232\005\276I\033c<\230y\265\274\212\253l\276\325\026j>5\227\005?D\217\010\276\236\205\375\275\017\217\020\277\235M\020>\347\245\031>\032c=\275\240PR?\034>\006\276\314\304\033\277\236\353\020?\025\206[>\t\301\301>\304\252\373\275\347\233K>2\240\251\276l\035\023?\\\366,=\223}7\276\254w\230=p\246[\275\330\237\251=@\254\307<Lf\354\275p\345~\275\006\360\300=\254\334\326\277v4s\276@\300\346>\311\007^?h\346$\275\304\374 \277\025,\203=\344\246\212?\201\304:?\265g%\276\266\337\027=\255K;\277\256\251\220\275_IL>x7\227=\222y\261=u\336\004\275\240\006A\276\035\345\030=\007\032\234<\'j\207>\261h\334<\2738\016?\313\317\n>1m\005\276\233W\"?\035\260\375>\023`%?\230/I>\331\342\n>n\372\312\275i\371\374\277\2429\330>i\022l>*\206\273>\tO1>\305*\302\276\n\271\220>\272\254\337\276\304B\255\275\271\246\'\277\335c\320>\227\333\013>\372.?=Y\223\357\275WV\236\276Mu\014>\354\0028\275\302j\247=\341\227\356\276\275z\025\277\211\214F?\233=5>\353\201\223\27515\214\276\323l\374=P^l\275\3528\023\276\234\205\270\274U,#>\214\006\023\277Q3T>\315\331\301=\035*\214\276\001\276\374\276\231\303\235\274}\361\302\276.\365\216>\026&\005\277X\225\201>\240v\237\275V\340\204>\327\360\375\275Y\014\224\275\350%(>\021m\004>\277\323\t>\205M\204\276\265\377\366=\235\374I\276\333$\311\275(\016\003?1nP>\316Z\022;\tT$=<\240\332>\215\2257?\342\343\244\275*\344|\276P\001\026\273\354\243\324>oc\234?c\327r?\374\275\033>c\323\010?\274\322\222\276I\274\344\276B\3350>\332\216\255\276\341z]?\344\347\252>\031\'\031>\243\030j?\2469\002\276-\021\372>\017\301\251\2761_7>\302\266<=\314\312\377>\300\032\221>P\230\002\276\270\216;\274\177\225\234?y|\214\276K\034n\276\252\037\262>F\345\026=W\333\377\276\202\364\327>\260-\335<\240\344\017>\260(\036\275f\243\367\275\214\376\331=G<\363\275\320\n\304=\237\201\243\275\250\371\262=\027\317\214\276C\025[\277YM\211\276\224\371\010?((Q\275W\232\003>-M\t\276>&U>J.\227>R$\305>jx\370\274\026V\346\276G\325\203\274O\326\220<\310q\215>>\355\005?\224\005\037\2766q\031\275;P\004?\200p\223\275\230\314\223>c\335\305\276\325\321\226?\234;\273\276q\0052\276*,\313=[\2723\274>\017\245?\227G<?\261u*?\367\021+>\357\211N?\275\204\252\276N\371\367>\205\002A?\210\t\353>\300m\364\275\266\223G?\262\316\240>\340pe\275\264\343\367\276\010*\227>\226\256\203\276#GL>\007\027\254>\306\314\000:\247\264\231=\366\365\354\275\224q\033>Ch\340\275N\177:> cj\276\353`8\277F\223g=q\'~\276E\351\036\276a\206\267=\266\375\210>!\034\271>\373\233\371=iV!>\'\247\352\275\232v\320?\350)s?\234\304<?\313\024\204=A\211\361>^\271\031\276\035\265\263>\300$\007?\331\206\252>J\003\267\275\364\213\317\276kv\232\276pb\333>\266\020\212=G|p\277\013|\007\275\206~+\276\021\251\022\276\343\341\006\277H\216&\277Vq\354\277\276\250\341>I\215\204\276\311}&>\002\243U?\t\2177?\261V\004\277\251\216\204\275h\312\231\276\257\202\204?\277i\202?\322\221\234>b\243\006?\007\330\370>\025\037\261>#ct\276W\013\224\276\3707\023>\221\367\206\276V\354\220\276\275\311\325\277F\030\355<\221\320\360\276\005\201\n?\264\327\217\276\262Z\212\274\036\013\223>\373{\222=;z\326=Fx\330\276bo\202\277\272\306\363=a\252\270\276\364x\002>T\013\007>\240\014`\276_\253\034?\316\021\027>\222s\205\275 \304\266;xFF\276\232\367(>\000/+\272p\316\303=\334\357\205\275k\210d\273\037\320\243?\247\246t\277;a >\017\t\'\277?d8\276\t_{\275\217\210\331=\343\343\243\276\270\227\201;i2\010\277kj\004\277U\254\262>t4\267\276\014\237!\276\360{\261\276\305\212\310>\227\002\033\277\025\204\204>\212\272\205\2755\303&\276\177\020\254\275\2019\337\275\0314\261?\177F\233>\217\343\234\275\360\201N>lLH=*~\014@p\207D?\260]-?\232BT\276!T\314\277\333\355.\276E\211Y\276\340\312\021\277zi\021?Jo\010\276VW}\276}\215q\276\334\361N\276\231`I>\340}\023>\200<\374\274]\364\375>\371\350\254>\033\370\210>\240\200\272\276;\245\205\276\37403\275v\327\341\276\341\305u\277u\201J>q\323\372\275\374l:\275\245u\354\2768>\363>c\264\364>1I\032?\357\361\355\276I\243\211=\336JX\277\331a\360>\'\353\221>\332!1\276\3243\205=f\235\001\275\300q\276>\275\230\303=\306^\300=^\314D>P%E\276\353\205V\277u\341\237\276\334\177\345>\310\200\271>\360\252\314\276\206\214\022;m\235\223\276\333P\355<\001Pn=\021\207~\276;\351q?\372u\317>\220\315\002?%\324!?A\256\017?\264\316\320>\335zF?\204\367\002\277\010\375%=\222x ?y\262\031?\333\375\266>\005E\304>\333\t\225>\035\027\\\275E\305\326>&\010\371=\373\n\263>\377\322\273>\357c3>\367F\000?/B\252>o\215B\273\007\260s=y\200a\276KU\212>\260\016\331>\301\026\n>\355#\334<{\362\206\276\355U\357\276\331\021&><^X>#\377\021?\306\023_>m\320\016>\253t7>\256\251\302\277\304I\231= Hy<\200a\017=8\321w\275\210\303i\275P\3177\275l9X\275\320\213g=\033\221\241\275\364Ky?\034\264\316>.\001H\276M\210\210\277L\'\\\275W\377C\276sr\206\274C\024=\276\276\336\321>\360\337\\\276\345\312\255>\362/A\276c\273\214\276\037\230\241=B:\213>\322\363`\276\200\365\337>\005\347\242\275\346\251g\277\220\252\352>F\256\251=\241>\215\276\340\004\345\276v\033\215>!\244\312=\360t\356\276\240\003\253?\350\273\001\300\'\256\232\273M;\035\277\264\303\016?h%K\275\022|-\277V\366\204=\256\333\003\276\007\236\202?Fw\213\276:bL?\024/\033?<\010]\2760\201\245\275\342\246\321>\3363\003?\335\356\314<\242L\213>Z\223\260>C\253\034=\026~g>J\311\267\275\300\266\222>\215\232|>\034\273\356>\034\204%?\351\231\331>!\277\207\276\371o\326\276PO\354\276\002\377|\276\276g\214\276h\247.?\337\254~\275\355\362\305\275\201D.\277>\343\376\275\252=\366>I\3348\276Q\367C=\314\006\231\276\360\213\366<\303^w\275\356\265z\276B}\224>$<\332=\212\021\212\274j\310\323=\275\216\231\276V\203\267>\213\356\246=N\004\210>Y\255\006\276|\247\351=\374\031\365>\032w\210\277\367\000\357<^\212\036\276A~\t\277\2340(\276Y*\253=\214\276-?\3415\010\276dB\206>85\373\274\204\224\200\276\271w\276>\361\200\312>o8\020\276>\366|> \300\036\2720a\303>!\356\035?0W@>)o\276>8\300\307>C~\'\276\336\223>>\335\307H>\356\340\207<\261I\241\276h\336\320>dQ\224\276^\324\n\276\342\312\355>\355\234\355\275\314a\307>\030\326H\277\246-~>\025>\245\276\021\014,\274NAC>\010\306\214<`\316\021<\240g\263<p\335\262\274\240\211P\2740\244:\274\200\001\326<\3507W=\013\022\331\275M\320\256\275\267>\257\277\234\371a=\241\2043>\303>f<\275\262T>\256.\251\275\361\361\346\274\243\231C\2764\323G\276\017\210`>\327\253\275\275y\016\266\276\253\335\312\275:yt=\223\017\233=J\027\363\276!I\206=\207\207\235\275\267\3479\277I\261c\276MD=\276S\022 ?\264_\005>s\025t\273_a\003\276\215\336\332\276\216\241\242?\0204\022>l\025\304>\363\330\224\275\021\343\307\276\035\226\210>\023J\213>*o\201=Y|\303\275(\256\t>\177\257\017\276@\000\315\276\030\324\262=[\373\225\274\252?\035\276\224W\365\275y\221\002\275\370\311\233\276\272p~\276\211\272\260\275K\320\352\275a\312f\276`#<\276EH\301\276\374ts\276V\245\237\276\340\215\346\275\355\276C\276O\237\r>\3262\264\275F\002H>\300p\233\276\003K\255\275\247T\234\276\213Z\247<&\367\270\277\255\302+?\031\226m\275\330\210H>Y>\353>\027\241\020\277;\245\031>\354\354\230>\ty\213>\257\032\025@Qj\013?\313\215\300>\342\221z\276`\330Q;\257\250\002?J<]>E\360&>\211\022^\276\020\234\312>(\025\263\277F\272\233\277\2479\365\274lp\226>\354f\335<5M\215\276\332\211C\275\375\345\261\275#\342\023>i\217\373\276\002\305\202>\031\353F\276+\344\241>\372A\246>\243X\027?\250&\302=\314*h?\230=V?t_7\277!\230\251>\270[\344>y\206\304?\361<>\276\261\315\251\276\034\254\214?U\205\021?A\314^>\366\304A=&\216\343\276\364/\001\276\373\353=?[$\360>sBH\276\032\232\314>\026\352\037\276\217\217]?\321\tJ?\345\027M?P\014N<0\255\334<&\260\261\275\322\211E>\232\224\037>\\9\300\275(\336\007\276|\035(\276"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "w>^\275t\347\007\300cv\016\301\300\027\233\277\'\352\302\275\365\005\250;2\372\376?_\376o?\3634\353\2769\243E?\227%=?\017\274\243?\347\0347>s\210\310?\224s\030?e\2356>\344\202\346?\267\203M>#%\347>G\301<?\333s\257>\201\345c\277\240\262\331\276RZ\224\277\005\325\302=}\346x\275\211-o?B6\004\276[\272*\3006(t\277\311n\310>\312\004y?(vx\277\226\000\013\277\336<I\277k\307\254=7\246\002\277\022\327\222?\005\275\231?M\265I\277\375\227\257\274q\362\026=\276\213z\277\371\370\207>\0059s\277\3474\204\277MW\233?\357\361\001>\r\262\314=\013\272T?D\251\363\276\207\316d>m\301\305\275\373#\226\277mj\246>*\020\013=f\225\270>x\324\000\277\376P%\276\"\223\306\276^\n\257>}\353\017>\376\235\270?\314\332\006\301\255\241I\277\034:\304\2732\347\334>\337j\322\277\322\242*\277Ud\202>5]\332\276\202Y9\276jM\200\277R\027\255?\221\"o?\362n\225\277(\rK\276\277\325\212?\244\3233@\361$*?&\237\245\274_3\207?\024?Z\300\316\256\277\277\360\222\377>u(n>\340\\\364\276\344\346z\277S\362\215\277\215}\273>\266\247\207?\020\035\277\277%\243\202\276)\363\211\300\374\221\035\277}\014\365?C[\213\277B\214\236?\341\216e?=\007\020\277\026\2725\277*\227W\277H\026_?\312I\215\300\2302\220\2746\313\005>R\326\200\276\222V\377>\002\351\211\276\332k+?0\020K\2777e\202?\324\213\226?c{\r\300\332\247\332=\005d\025?\260\013\362\276\214\337\027>\214\265\250>\322 \344?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\036\262\275>:\203\\>\333D\342=\264y\241\276j\031\210\276\307\270b\275\203\336(=uWh?\240J\343>\217\301\002?7Q\">\2153M>\350\231\246\276-\275\020?V\325\232>\002G}\276\200\034i>Z#e\277\000\336R>\312\366z>\337\324\013?N~\220>\340\325Z\276_\013\336\276]^s>\356\310+\277L2\n?\016\350\263\275[\234&?mv,\2768]/\276\342P\210<\325X\005\276\022\201\033\277\367\032\026?\010)\306>\351\240\262>\241JU?\235y\377\276\243\332\226\276aQh?\365\265r>\221%\303>,\000\031?\n\222\206>\326\353\020?\314\246\216>\356\330\032\277%\345\327\276\323\233\024?%\033\305<\177\334\207=\336\005\375\276A\0061\277\277:\326>-sz>\202_\211>\010\274\243>\202\022\261\275\026\366\030?\205\330\215\276\3524\255=\316\027T\275\254N\025>\027o\341>~U\030?&\273\253\276\006\345r\275\24360\277\316\332\364\276\031\216\033\277\312+\311?/\352\307>{W\272=\245`\365\275M\372\205?\013L\031?\355\305A>)\262\212?\262j\332>\017d\211?\201&E\276o\n\241>LA\216<\200\335:\276\221>9?\251\206\031>bPu\276\334A\252\275\336\226\321>\331\323\353>\022\014*?\250?\242\275\232\302\027>\030\307~\276\034r\367=\007\027\031\277\014\264\014\300\224\360\373=\020(\032\300\002\244\031?\374\204+?\"\036\340\277\322\330\357\276l\321\023?\265!W\276VX\251\276R\227\255\275\241%w\277\270\302\271>S\374Z\276\036\315\266?Z8\243\276Y\221\211>\261\371\t?m\272g\275\n\334\307>\2062\226\276=\355\231\275\263h\367>2\025\213>1\337\206=\202\311V\276&\017\017\276=d\253\275\201\213\222>\272}|>\004\270\255=zV\353>\030t\027?\341\270\204>}{\255\276\016+O\276G\013\326\275\r&!\276X\361I=\213\014\271\273\316\037\221\277\245\203\200\276gmG\277{9\001\277h\2500?\336\017)\277m[\020?\024\225\003\276~\326\005>\3779m\275\222\302\002\277D\373\001?B\247H?\234\314\205\276\001\275\224\276\342\266n\275YYF\274\245\222F<\327~\202>\240]\243\275\2341[>(\021\366\275\333P]\277nI\273\277\230\033\314=/\255V\277\207g\224\276\200M\222\276\245f\320>MN\310>\365\030\227>w\007T\276\354\016\225\277\375\375\242=\375)\231\277\355(G=\\\373\273>_0\205\276\240*f>\020\331\342\276 [\323>\017)r?\362@4=M\361\204\275\024\342??\365FT\276(\365+?\220\265\237\276\037#\313=(\002\203>\363\224w=r\250\027\275\\\324\220>t\361\n\276\010\221P?Bz\226>H\234\201>\231\010k\276\336N\210>f\321\244\275&^{>\362\032\005?\341\244\360=\327\255\227\276G\3034>\313U\177>\220#\025\275\246\326f>U\2171>+sR\2764pP\277\263\360\220>\262\242~>\201\003\241\276Y\336.>\230\335\021\276\204~%>\323[\262>\000T\223\275r\270\206>\271\005\001<D\272\244\276\271\010\244\275\360\022\020\277p\274\035>l\nk>\202B\253>\347Y\205\277g\347_\276\"\005C=\343\204\316=9\307\225>\370\022 \276\344\020`\276\347\335<?\343\3154\276\002\215\266\276\204\205\205?\305C\301>\037\312\206?\236\233\326=\266S\002\277\3710\274?\034\244x=\232\010\225>\335\230\311;\313+\213=(F\235;\036\231|>K%\250>N\022j\276}\215\323\274\000\033~\276xw\314>\226\231\n>\244cr\275\370\343\006\275\250\272$=e\205~\275\364\034Z\276,\306\034\2763\332\032\276\007\017K\275\210\355\266>@\303#?\265\225\340>\3762\223>\231]\271\276\000G\225>uq\214>\246Mm\276\227e\203?fX\330\276\277w:=\311\343C\277\202\312\014?4\240\033>O\035\177\275\365\344%\276\033\010{\275\336\307\215\275m\242\007?\332P\213\276r\233\300\275\335A\357>\350\206>>G\245\211\274\223\232,\276\253\323\034?\356\341G?\272\211\n\276\220\2104\277\r@\200>\n\t\276\275V\372\027\277\241\212(?\322\016\n\277\277\343@?Y\373\"\277^\336\002\277\203\246\254=\241\255\204\277S8\004\277\232&\355>\271g\035?b\033)?\253`\222>\000\r\261>Y\372\027>]\354\275<\225Ww\275\257k\313:xt\217>\364`z>>\212\302=\245\200U\275\327\210\360=Q\365\007?z\217\033?\336\351\005\277-\n\274=\235\245E=\254\335t?K\325\233=\325\325,\276\023\301O>\300\030F\276\217$\272\275\0055\247>\331l <\001\244\032?&\332\332\277\327\343\337\276\217\254&>au9?/\227\331=\347\313\021\276\334\0018=\225\021R?*\030 \276\"\007\005\277\026\217e=\377\3657\276\331\372\351>\364\322\307>\327\2765\277\373\2733\276\234\262h>\230K\263\275\347v\234>\234u\210?F\226p\276\037g\363\274\2348y\275\3758\370\275\250\252\221\276\337\306[=\212=\000?\331\224A?B\276\026\276\360\253\261\275[\r\323\276\243\216\005\277U]\234\277!\3422=\206\253-\277q\306\341\2761\235\310>\357\355\370\276|\362\323<\025Q\377\276\"|m>\211O5>\330\267 ?b;\211>:\254)\275\017\336\321\275\203\200\254<8\232N\274\205\353{?\2105\222\276GS\376\276\3514 \277\254\267\366>\025\262\205>8\034\217\276\351}\352>O\037\304\275cBG>&\231\230<\027\362+\275\246wq\275\336\300\312>\220\336\213\276\356\213m>%\235\257\276,\3240?%\236\021?!\223\263>\226\241\n\277q\263V\276AE-\277\353M\373>\223\036\216=\334\232\037>Z\304u<Z\270G>\'\324A\275\027\261\215\276\353\216\202\276\371\024\337>\313\241\203>\021\333\326=\276\356\007\277A\004\310\276!\023\r=\254$\307\2750\352\266\274\230\324T\276\205\036\240=\025q\265>\352\233\361<\326\375\016>x)\311\276\231~\236>\277\3552?W\345\314>[\226\022=\210\337\353<yT2?\3270\241>Q\033[>g\255i\276{q\204\272;\032?\276\201\2250\276\322\005\006?\2218\255\275G\rP=\035\353\242>N\337\322=\313\212\273\276M&\311\276\310\340E=b<\356<\r\3408\276q\315\226\275\'\350\356>6\221\334\275\261\303,\275\313\'\327\276g\230\351=\315\317\266>\026u\270>0)\r?\353{\n\275T\201\304=a*\305>\032I\230>cg\017>\235C\301\276H\010)\277\356}j=\014H\304>\254\324\t\277\210\323*\277\256\273-\275\311\320)\276\224|\211>X2\232\275\347\347\342>Z;\332>i\273\355\276z\373\206\275\007\027\316\276c\220Y\276t\366\204\275\0041\261\275\337\336\327\275\\\272\314<\240\007\034\2750\026\234=_\365\255>\246\367\"?d\2705?\352l\000?\311\3529\274\374 ??\2324\202>\266O\244\2759N\217>\334\n\365>\016d\215=\232\007\001?\350\247*?)\313\336=A\2170=\271\360\021\275l\003\305\276c\347\007?\36161\276\014\353^\276_>\223>\004%\326\274y\337T?\024\360M>\016K\361\276p\021\372=>\343\007\275\335\366\335<\232\\^\276=\312\030\277P\373\034\276\005q9\276\005\342\257>\214|*?_&\237>\177\344\023\275E\337U>\251#\013\276u\234\005=\234\036D\274\310\352\372\275|\376\305\276\210]\217=61\203=&\312\314\276q\3522=\232eE?G\003u>A\230B?\n\273,\277\277\217\224>\335\263->\017z\212>1\326\254>\353\345N\276\026W\372\276\030\312z>\017\3528?\202\304\211>e\016\364\275B\330\323>\3050b\276\242i\333\276j\223\207>\300\255\t>\260z\r?\215d\006?I\250>\277i\031\274>|en>A\003\303=v .=Kh\243\2769\316y\276\213\313\267>\036\316\370>\247\236r>\006H\270>.8Z\277#u\000\277\022-\023?R.\321\275\352\360\313>\224v\320=\032\020N\276\000\310\356<\231Tm\276(\343#\276\316\001^>\240\275\032>\337\201c\2767\nA<h4\256>\000^\364\275\352\223\242\276\254\224\335;4/\226\275"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\262\351q>b\004k>%\325\352>\201\372\234>\332\226&\276>K\313\276\372,r\276\353I\326>"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "*\353)\276\034\251\007?\343\215\027\277\001\016\013\277I\000\221>\220*\246>\227\035\345\2768\356\217>q\261\274\276z\200\001?\263\320\031?\212\021\"\277\014\037\325<\262\367\262\275/\242\271\276\004\306\002\274)\270\202\276\334O\365>\261:\r>\230\227z>W\001`><\032\350\276\276\000\004>E\341H\277\370RT\277v\354\312\276\311t\362<\310A\253\276\215\013]?\005@c>\352|\274=\312Ue=\332\031\302\276#\242\327\276g\314\300\274N\221\256>\025(7?3\n\010\277\023\254\340\276\n\006\t\276\377\203\222\2768\307\006=\204\273\313\2761\270\270>\004\265r>@\006\037\276W}\204\276\345\371\013\277\310\036\016=_\270\215\276\276\360\261\276QO\235=\003\010\306>)\312\177\276}\333\215\276{\215\275=\315\025\332\275n\233\265\276BR\231\2762\274\360\276W\236U?*jK\276\030I\350\276\353\250\014\276\362\372%>3\001\256\273\352\235\244\276M\\\330\275\274\037\017\276\223\353\214<j\204S\276\2746\347\275"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.7088879942893982
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
