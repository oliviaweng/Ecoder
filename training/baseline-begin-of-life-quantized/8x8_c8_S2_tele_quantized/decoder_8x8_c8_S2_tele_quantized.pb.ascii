node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\254\250\370;<d\014\276\032+\254>\030\256\225>\255\303P>\007\374\362=\264\201]>E\332U\274?\024,\275\267\000A=\363\025 \274T\253\256>\221\243[>7\236F\276\362\350F>a\375>\276h0\000\276\331\320\274\275\257%\n>\225\315\030\277\203\004\257\276M\343\316\274\363\211(<\355\331\311\276\002f\236\276c\350\231>x\363\310\276\324pE=\306\'\274=b*\243\277\373\213\215\276I\262\305\275%6A>K\330\272=\332\241\251=*+C?\241\332\313\275H{\271\274\235E\274\275s\215-\277\262BL\275\276\253\330\275\357\262\206>\253]\354>7\364\226\276E\327\222>9Hd>\335\270-\276[\256\r\2779\023\246\276l7\222\277\275\342\002\276=\313\247\276\215g\252\2769\202\332\276\031\'+?\311\275k\300\356-\034\275\374O\263<[Q\002\277e\270D\276\355X\225\276\232]!>\303\360\240<k\260\336\275\231k\213=1\277\237>v\330\244=\336N\205\276\267\217g\276 \237\224\276\'[\274=\230\375{>g\376\000?A;\202>\277_3\274\323\3031=\010tb>#U\026\276&x\206>Dq\377\276D^T?=\303\255\276@\306l\276.\324c\276\003\261\344<\246\226K\275cxI>\025\204\352\275\235UW?\032=\243>\024\304M\275\224\003<<\356\036\001=Bi\"\277$IZ\276\333\373\250\275+M\230\277\305`*?\237i\327\277O\320\263\276D\310)?\024NB?\274\000\006\275u\245\023<\240P\217\275\033\242\023\300\034\\\031\275\303\n\206\300\332z;>2\357\363>,0\355=\004h\007\300C\223\003\300\323\246\211\274\246\346\213>b\244\204\276\275S\222>?\377\027>{\243\017\275\204\343\214=\"\265E\276\200|\r\275_\024\252\275\310\204\355=\251\017O\276\326\3637>b\377\300\275\237\326\177>S\202\255>\036\227\376\275\311\000\006?\230\246\247?([\211?\221\326\230?\323\355%?a\265)\276>\274w\276\204k\315>Ot\013>H[>\277\001B\244>\250\213\247>\206y\202?\260\3710=c\304Y\275\233\360\306>\261\201\353>P\312\272\275\331k\036>\252\312\302>\304\222\261>\266\325\034>\265\2144>\361\321\253=\276\346\264\275\243\re>\351Ww>\223\231W>/S>\275(s\246\274\326\337\215>\330b\371>\317\r\322>\305\2522?l9\213\276\016\267\342>f&:\276M\271^\276\032F\242\275\2722\t\277\314\225\340\276\030\020\221\275\325\315\034?B\261\003\276\251H\314>\314\365l>\326\351,>f\332\315>\367\201x\274L\231\354>Q\323\371>\340\307\274>O`X?8K]?/\3733=1\0372>\226Y\301>\263\340n>\367\r\027?\215\350\250\275\322e\327>v^\337>2\322)\276\374\267\261>\265\325\030>j\032\207>\205\\\263\277\335\325\241>/&Z?\214\007\213\277X\323\367\275z\036\275\275\222\260\350>^[\014\275f,\231=%\301\014?\370\243\201>\207\267-\276\264\022\375\276\206[\212?\037{D\276\321\032\t\276y\014\220=\036\3752?I:\316\277.\327\253?\357\207\321\276\246\010\326?\205\037\352\275\332V+\276\373\202f\276~u\252>\013g\273\277\035r\320>}\\A\276^\363\364?\332u\"?L\351\333?iA\271\275\301\241F>\231x\034\2757\013\313\276\373\260o\276aa\332\275(\016\030?\275\271\371\276!\"K<#y\027\275\307\241\246?\276\325\001?u\207\333\277=\377\212?\367\321\002=\027\036?\277r~\301\276\241\310U\275W\002>\276\315\374\024\276\200M\317=\214\230$>\270\005~=P\365D=\331\214C\276(\310(>0Z\001=\305\347\374\276*Z[?o\211y?*x(\276\264?\207>8\3170>8\0315>\371\373 =\037[\027\277kJ\265=\265\024\373=\331\026\250>Py8>Ys\374\275\245\241\311>\301>\337=\344kf>\3615\314=t\304C?\002\217\230>N\301\222>\272;\355>\005\254\223?P\000s>P\254\014\275\t+\221>)\374$\276\312<a\2766\363x?\020&\211\277\257\322\031\277\323\247z<\254\037\207?\023\213\220<\023\305->\245\376\232>\307\032\212=\360P\202\276`\352\262>\0337\273=\202\275\256>\021\200\034>\315Wq=P\304\225\276\005F\241=\274\212H?44\202\276{\230G\277&\236\263\275\236\025#\275dO\020\275J\372\332>\210k\273\276h\221h?K\327\215>\371\2019>v\204\263\275\225OR\276\020 \006\275$\256\214\277wH\t?\022A\036?\222q2=r\n\026?1N\253>\374\311\037=\371\000\220>R`\227>\331^\002?F\221\017?\2400H?&\300\315\276\254\331\271>8\033=>\234\206\r\276\332|\273\276\315\321@\277\215\270\206=u\030\221>\342;^\276\022\371W>\315>6?X3\341\277\207\2128=MI\276\275\034%\343\275\361\303\003>p\326\343>\0077}\277\363\360\210\27679L?\312Dq\275s\266H\276\007 &>\024\027\346>(\3314=\321\276@>A\0275>\202\257\010\277UR\203>\245\340\021>\020\016u\275\320\207\034\276\305d\212\273\021\'L=4\274e\275\215\317\350\275\221\3543>G\212\366\277\334\032w\300MLr\276\323\227\376>\276\337:@R\305\016\277\337$+<>Vx>F~+?z\241f\300\214\266\233\275a\000\305\275\272\312J>\322\177\362\275\n9\215\275\200L\257<\207\001F\276\024\265q\275\010R\344=m6-\276\343\252x=\030K\033\277\250\301)?\363V\031\276\365\267x>\357\2563?\327\236\371>\t\307\023>\225\260\251>\3511`\276`,~=\235\362\227\277\236~g>gQ\261=\261\275\204\277\271\361\370=<k\357\274:\034\331=B\253.\276\204\032\340>G\007R?X\337`=\001\024\354\275\307\262\245>\255\326?>\357\226L\277\003\252\215>\220\036j?\232\241F>\364\017\014?\265`\t?\353\353\215<0\260\013\277\006\260\304>\323\275\226\276\345\356\207\275\007NC?\245\267\325\276C[\254=\337\217\351>\3222P?\237V\200=\311\201\317=\324\004\221>2#\310\276C%\032=\020\3132>nc\216=\315\030\026\276\242\037\001>+\354.>k1C\276\237\366t\276\235J\375<7\327\243\276\235\315\"?p\343v?\001\257\202\273\315\263-\274\245\"\020\275\344\003y?\016\330\003>\001\375\275\276\302 \232=(\247\243>r\353\302\275O\007\350<\225\307J<\206>\025?N\344\246=\327L#=U1\020=\324\030\303>\312b\331>\207\006Y?\235tR\276\'\306=\277\241_[>)\034\252>x\014&?\204=\030?\376\005-?\023g\207>\rB\343\274\253\211Y\276\010\036Q\276\375\362a\277\235Y\232?%\002\277\2779\3105\277\356\002\326\276\2015#\276u]\032=CtK\276&\265\013\2774\n\030\277\247\027\237>\034\312\314\276\320\032\215\272vj\230>3\022\033=\247MC>\362k\312=\02291\276V\"\355\275KhA\275\205\364\351\276|=\033\276B\312\\\300%\352\217>\273\240\221>J\017\344<\371\237\312\277\2368M\275xn\004>ax1?\325,~\277\3662\354=\250\362\006>\357>1=@\256\324<\0140M>K#\353\275\341\357\024\276\375L\017\276\000Kr<\326\224M>\300YR=\233/\017\275\275\250\254\276l!K\275\"\320w\274Y[\335>\2149\237\275\025\315\314\276(\256\317=\221r\204\277\336j\350\275U\333\035\275#>\346\276;\341\207\276\223\237\030>\305Q\343>\004\230#?\375\357\n=\265$\036\274\264C\213>T@\223\276\355\331L\277\300\372;\277=l\\>\024n+\276Z\033\207>\276\021\031\276\3511\223\277\315\275!>\201\177\200?6Pi\275\263\244Y>\272#\023=\244\033\377\275\205\r\362\2741\236\213\276\2529G\273&\022m\276\345\242\346\276\214\025\274>\3553\210\2762(\225>!\221\323\275[L\340\276v\317Z>5\211\005\277\256\n\352>*\240;:\247\3349\2768x\232=\260d\312=d\225*>\377[4\276N5\335\276\275Ei>U\020\336>\241\'\273\276;\364\207=\274\353\344\274\347\303F\276-\375\376\274\372(\375>m\345^\276\021\001\270=\223\230\010>2u\254\276uc~\274\306\255\343\275dL\236\275\367\212\342>h0\231>W\014\302=\t\330\235\276\037\2268?\351<\260>?\366\212<X\207\263\273\374b\271>\345\266H>v_\252\274|\337\367>\023C6\276\\\237\016\277S\246\025?\307\005(\276J\253\211\274\016\033\327\275\330\306\250?>E/?j\235\331>\335\336e>\361\272\322>f\370U\276}\364\372\275\314\332\214\2756f<@\031CM\277\276\3632\276\231\270\302>\236\354\301\273\337\035l\274G\267\036\276\314\362\003=s\351\321=\227z@\275\367\215\361\275\343U\304\275!\256\245>\030\234W<W!)>rG\374>\223\003\204?\323\324;\277\211\306\343\277\006\342\357\276\320\263(>\245Ee\277\200%\025?\235_n>L \001\276\234=\035\276d\005L>nE\014>\274\216->L\315\000=&\026$\276\026\333<>\267h\356\275H\276d=y\277\027\275a%\314=\007\343\327>G\353\303\275\t`:>\003[\237>\372=\301>9\200\211<z4\332\275i\317\352\275H{H>E\226\356>2\346\357>*h\203=\034m\312\273\036\'\211=hx\024?\233\364d\276LmF?\236\275\226>d\351\345\275\245\356\212>\250t\212?\030\314\273\275\237&\030\276\322\341\317>\317\246\321\2769/\364=\342z->Spv\277E\276\016\277a^\306=\250\257=>PI\232>\365\003\\\276;\352\203\277\266\213\035?\317=\315<\356\277\202\276;CY>\225M{\276\252Mj=Z\230z\275\371\'\002>>\300\336>m\377L\277\207\310\236\275e\223\347\273~\254\013?\277\360\214?\360\244\034?\301\303~\276\310\211\240=\t\371\035?\303\210Z?\346\250\200\277\275f\230@~\003$\275\322\350\201<6\256P\277R\0224\2769\276k?\270`\016?bS\266\276-\372\007\276n\202\232\275M0A\2765\005l\276\343\037&\277h\323\307\275\t\217t\276x\367\367>\276\356\t\275\332\350M=\235\326a?\366y\213\275\002\271\325\276\353xb\274\213\264\302=/$b\276\224\327A?\\\246\343>D\013A>\352\225\210\275f\256\037\275\230\376\217=o\001\007?w\265 \276%<3?>R\237\277\321\217??3\370\340\275\177\333\016\275\242\335\033\276g$\343?M\237\366>;K\013>\365\356\233\276\347\352\363>3\3125\3009\341\364=<\'\177>\205\263\351\274\0214t=\006\203\023=\010\033\265<5#B\277\r\360M\276\377\035\222\277y\225\276>\273\033\006>\232@!?\354\370q\277\357S\213>\014V\214\276Pz\213>Z6\216\276\002\205\033?\254\2472\275\370V\n>y3F\276\340\007\016=\320\220\307<\360r\352=\304\331\262=\354\357\257=(\225\000=\244\374\363=U\374\233>J^\342=\213\2235\275l\014\245> \3470=\370\'\237=\350c\341=o\3239>\221K\277>zWj=\033\354\222>\371-};%\374\010>\030\021\217<\232\210\024>\212\\\205\275\226\006\327\275@\037\275=t\t\000=\021\276\301>\200}n?\241\355\317=8W\010\276\366P{>\374\006\200>N\262\361=\363\2053?\310xN>+5\212\276\366\366\330>\335\276\035>\031\331\236\275+4\232>\326\377\321\275~p\263>\005\203y>\245\320\000\277\003\312W>\306\241\205=\226k[>\2357\232>\227x-\276\333{\324>c\243\276>\032\305\222>y\235\037?b3V>\007\225\317=\373D\007>\r\374\241>\2775\244\276\264\335\313>\013\370\004=MM\222>\002\001\301=rZS\277\355\314.\277=\2426\276\037\252\355>Q\032\230=JT\242=\271\266^=\332A\243=G\265y\2757C\263>2\247\217\276\275$\343\274\203j\"\274\016z\271>\000\232y>\314\345\234=\261\200\023\276\340\341\034\276t\"\005>\344\361\317\2769\306\357=\260\361\010?E\354\224>\013\310S>\203\241J\275y%\277>\330\037\001=\002\362<\277\233\234\031\276I\342q\276g\244\026\276\324%\216\276w\346\271>\273\306\002?\334i\000?\337\003\357<W\273\277\2736\244*\276\277\274\032\276\006\031\243\277i\317A?\233\305)>z\354!?\337\337\332\275\0054\253\276\327\344\344>\322?2<\020\020\373\274`Dv\276\004:\">\211\350\245\2753\303\265>\353s\270>4\365\216?\021W\247=\237\n\r\276\312(\261=\261\024\362>\200\r\217\277Me\007?\034r\232\276\212\3400?\023\257\346>\316e\231\275\341R.\276\356\352\023\276\34092\275@&\t\276,\251\'\276\010\033\364=\240\363\307=\324\t5>@\335>\2761\234\321<\376Z\221\275\251\247\206\276\355\254\023?4\217\035\273W\240i=F>\353=\233\026\r\272S\327\256>\232\306\272\275\272\034?>\347\215J>\273\373r>n\345\342=\314\265\330\275\264\202\237\275\202g\215\276n\245\223=\232Dg\273\233\360\242>d]=?\035\377`>\030\205Z\276\325\222\316\272\323\333\000\276d\271!=\316/\356>\376z\331\275I\372\330\276|\345\325>\025\274(>\376\005\367=3\315&?\022\217\204\274\232\312\301>\276\\\005?\204\310#\276\305\366\354>\330\366\n\276\272\033C\275\202\351)>\334\"\201\275\317\013I>\365A\342>\324\\\223<\243\232\252>\330b[=}\024P<\204<\373=\321\354\316=\025!b\2760\376\267>\013\277\225>\"`\">\ts\233\273\231\276\347\276q\315M\277A\362K\276D\222w>\323\357\272>\215\233\014\276\271\220\374<7\027_<-\323\216<\035A\213>\035\315c\276G\267\267>\360M\212\274\207g}>\364O\236\275\031\202\221>\362`\r\275\356\332\304=\000\237\222<\272\237\003\276\337\030\211=\323H\357>7\235\274>\201\235X>\0259L=\365\030\201>\233\020\246>\274\232W\2779\211\001\276\254\325Q\276\\\304\363\273\250\362\020\277)\035\301;\225\031\017?\215\177-?\341]n>_\323\373::\347!\276`\220X\275\023\230k\277Q\270\210?J[\237>\341\202\243=\257\277\213=\206j;>\353\316\206>+\271\206>\273p3\275X\250\313\274\223\n\323>3j\245=W\341\255>KZ\302>8\211\223?\221\276\255=\331\206R\276\256\233\214\275\215\262\222>|8\232\277\322\360\306>\001\336\201\276\246\306-?\226\207\025?\233.)\276\246Z\027\276\344\235\275=\340\210\377\273\227=3\276Xr\267<H\272x=\237\341\022\276*K*>\200\327p=4 \n\276\206<\257>\273\325(?\373\013%\275\035\312\320<\220$3\277\202\'\310\276\366i^\275\371s\"\277\337\314\240\275\"\224(\276b\331e=\305{\224\275\014P\276\274\006z\220\276\301\242\323<\"\230\026\277\315\307\372>\022!6\276um\027=\234>\277\276\311\354\025\277\353\243\345\276\203\230`>\372\303\324\274\375\031\277\276\3546\312\2762\333r\275\316\003:=\223\260\022?4\033\256\276\3405\272>,\330\376\276\021\310\256\276\372\275\260> \255\202\277+z\215>\rT~>\274\022U>\357\372\277\275Nu\362\276\331.\352\274\212\374R\276\211\272\021\276\225,\030\276\271\036;\277\024\354\325\276\005\t\300>\205\217\254< \335\035>\021\227B\277\341\3420=w\256\001>\365;W\277\351b\250\276\203\002\365\274\t\216\023\300/\\\035=\214n\035>C\351\247?\362\031\206=Vs==\314\250\022>\351>\323=3\322\300=\376!\013\271\305\221\365=(\354\225>Y;\023>.)\336=\035c\271>74\255=\267\206\351\275\3162\220\276\2010\376>C\336y\2768\002\234\276\260\327\222\276\340\312\340=\271\010\222\276\260\314I\277\000\371\017<h>\354\300s\007\251=\2536\033\275\270\373)\276l\246W>\373Z\017\277\306\212\347\276\250\357\227\277|5\207>z\021\233\274?\234\277\275P\273c\275\216\374}\275%\277\265>\316I4?~I\376\276\242\246\316>\321\007\360?\317\345T>\212\361\245>\360\342A>X6\034\276,&\265\274p \213\276\223\351\301>aoO>!\r\\\275R\277\030\277\367\200\016\277\355\370\177\275h\242\350?_\367\252\277\332W\200>nC\263>\267(\320?\250\032O\277\01037\275\267\235\222;h\0160>\202\371>>\002w\365\275\340QO=f\2039\276\244\305\334=\001U7\276$\253\372=\264\214)>T\251\017=*m\247>\371\027\267>\037f-\275\020z\036\277<\311#?:\217F\276\264\374T?\016&B\276\014\261N>H8\304=\365\026C\276\304\017\235>\2514\205>\363A\263\275\337\236??V\363h\276\223[\220\276!\303\036?\"\307\333\276\305. \277 x\220\274O\r:=\347\003e>\221\314\252\276s\271\253\275\263\000\252\275=\264\246\275\031\365N?\373h\024?\214K\027\276\212U\031\276FzR\275%\305\353=t\354\017?\002\313\215>7\370\343>EU\305\275\373\201J>\307;\353\276x\205\371\274\246\342\351=\213\177\335\274\276\001\364\2767\027\225\277\026\344\205>B\000A?dK\315\276\312y\226\277\222;\360>\1778\003>\331\315\343\276\320\203\365>\273j\307\277\304\363\210>\003t\030>G\377\2148cJ\347\2749\250\217?[RS>p*\230>\26189\276\240\256\227>\212\221-<\220\322\240=\377\022\363\276\323\271\037\276\265\223\252\275\237\020\356\274\213\027U>\024{\222>H\237\017\277\351(\033\276b\370\333>#\321\347\276\353\006}\276\232\312\034\275\014K\271>\232o\203\274\216\244\276\277\222\304\225>\222\261e?\256\326\224\275\211@\332=\021?\211\275\236m\324>\030\323\032\275\373\251\201\276\243\022\016\277\341>s\275<\035\270\275\230\276\317=\303\266\241\266\003\3563\277\360\276\344\277@I\023\276\351\002\215?\3066\346\275Rw\027\300\355+R>\341\241Z=\263\017\023\277\034\353E\276\232 )\276\316\204\025\276\035\036\\>\343\206h\276\237\027\232>6\033\007\277%\366s\276\001k(?EBB?\275\2408@\322\371\254\276w\002S\274$\312 ?\211\003\203\276=\004\316:\210\277\365<(>\377\275\3608@\276\322[C>\260\"\215<\200\r\307:\320\304\276\274\212\376F\276\230\215\266=~\037\215;O\254;>\304C\352\275\033\252^\276in\334=%\300\001\276\017\203\031\277\344\326\233>\312#\025\277\313\204\230=\211\260\375\276\010\220\001\277\211\254\230\276:\325J\276a\007\234\276\032X1>\2244(\276$\374\355=\013]\225\273\022M\025?\343\024\006?\321F\200=;\367\226\276\252\266v>\252\035\332=\230d\262\274\240\243\204>\376\'\273\275L\2641\276\232*<?\216\240)>4\252[=&I\335\276\324\373\300<&\257\265>\266\037\216\277\351j\360\276\274\202\033\276\333\375B>\3424\005=^\'\021\276\014\005\226\274\332\353\251\276\305\360|\276E2\013\276\253\305\201\274\315\003\354\276\251\020\326>\227\303\301;\251\254\320\277}\r#?\263\023\271>\326\205\235>\224\033\016\277\342\0060>\222tp\277\237\373\313?\007\203-\275)\245\207>\013\232\266>\010I\214>Q)\372\274\361\323\000\275j\316\222\276\340\000\236\275\n\231\234\275x\026o>\013\214b>\210*\376;+\231\364\275\003\016\271=\027\356\215=G\003\266\276\243\324O>\345\342\"\277\024\245\003\277\266\3440>Q\002\236=\177gi\276r)\273=\302$%\275h\207\355=\342\254\317\276\325\305\000\276\025\303O=+\371\313\275v\237\212\276\273\0203\277\250(\275\276d\347\r?\031K\203\277\367XS\276\371\001f\276Y\023\003\275\327\310\336\276\356\346\256?\365\305\273\276]\031n\276\024\205(\275\261\2248\277>\201q\276\344\361E>A\277\241>\302$H<\003D\202\276?2\031\276\035\000\272\277\203\340\212\274\231\007&\300;\027\301\277\256DV<\333|O>m\323\312\276,q\207\277\242x\320\275\000\242\256=\342\225\344>\307-\224\277\264\2146\276C \307\275\226S\000>h\230\027>8\256\311=\344J\343=\312\330A>\004o\027>\034\217_\275T(\032>r\206f?\215\001\363>\032\203\305\2760\3346?5\t\031\277\373D\210\276\356\245j?\274,_?d\331f>\202\031\364<\273\r\r>RL\316>\322b\033?\332\345\311>\016Ng\2744\232 ?\213h\237>I\275l\273\262\265\274>\264C\216\275@\227\324<\306\214\230>\324\314\200>\274\256\006?Q\267\231>\263M\375>\325\373\242>\010\036\212>1\307c\276\214\234\362>\334\200\333>6Z\243\276\310o\323>\215\270s>\177\032/\277f4\246>R\345\252>P71>*^\200>/;\357>M\362I\276\002\300\\;\306\241\352>\217\224\246\274\230<\021\276\341Xv\277\022#+>TXj?K\330\276>M\r:\27649U>\210\277e<B\367>?w\233)\300\312\332\216=\337\002\215>\232\365\201?a(a\276\035\025\022\276\252\2254?6\205\006>,\232\225>\t\336\001?^$Y\273}\341\342=QK4\276\256\332\330>\241\361\314=\2344M>c\352\237?\325\270\346>J\217#\276\227\006\242>*\200G?\352\360\310<\017+\302\275\215\335\237>\217m\204\276\252\211\204=\233\351\346=\3746\353\275\0238\265>\232w\224?\237\276X\276\217\216\311=0\341\260=\262\306\222>\350\352*@\207\371\216=\332\350\031?\261i\267?\321}<=\310\324\220=`K>\275\364\306x?\234c??\377\340\030?4l\367\275\372\0018?\006\334 ?_\214\225=\234q\256\276y\213\276\273\313K\277\275\t\2351=\014\247\032=\330h\217=\271^\340\276\233\031\350\274\246\227\221\277\306\t\372>0R\367\2758|\275\300\001 4\276\215\021%\277\372\202\373>\3026\254\277\301\237\014\300\246T\336=4\222O\276\300C\306=2\204\026>o\0248\276\210\265j=XF\235=\021\365\337\2753\246\260\275x:\303\274\226\246\321\276\360\016\357>\341!J\276\222\302x\276\0355\345=\314q\330>f\344\372\276c\003\234>\036\351d\276v@4\276\200b#?eq\217>\335tD>[\236n?3/\026\275\263\230b\276\321\307\375\276\025\266\234>\216w,\276t\032=\275uo\217\275\205\314\256>\214\023\276=\210\235\257>\210\236?>.\004H>8]\032>\n\332\351>\206\034\261=\331\r\366\276\034_\252=\002\024M>\222\035\272\276Rnj\276\023D\021\277\206\032\035\276\213\242Q?y\016\312>\233a\324>\201\307\364<\000\273\333>\342\016\'\276\333\"^\275\211\373\000>g\341w>\222t6?\245\002)\2776B7\277\201\212n\273\216\251\001\2779\327\327\276\361E\024\277Q\304\374>\276K\017\277h\013\016?\333]\242=\020.\211\277\316P\337=\370\241)\276\206\311E\277\324\344Y\276\266{\226>\312\334s\276#\323\211>\324\363\317=\277\365\310\275\013\246%\276\371\267\245\276\255\210\255\276\376\203w\276\321\346<>\003\305\016?\364\346\360>8Gj\276\254}F?\325\307\261\274\27517>\354x\326\276[a\374\276}\014\354\276Run?\361e\212\276Sk\220\276\034\357\014>\367\326v\272\374/\345<%\330j>\265W6=s-\370\276\244H\265\277\315\026@>\256\335K\276,\263\267=\312\215\'\276\312x\037?l\237#\300>@\005?YI\025> f\203\276\204\034\200\277\261\313\007?\317\032b\276h\237\250\276\266\017+\275\347\364\232;\227K\306=\322\234n?D\225T>\224\266\245?\340\2640?G\tp>\212\346\261>(\301_>\275\340P@t\023H\277\317\002\n\277Z\244\311>&t\205>\372\206]\276\251\027`\274\222\356D\276\361\323%\276\234\354,=\000\360\277;\246K\270\275@\212\n\276t\223\255=\362\335\017>\340\337\226<\371\017\016>\351\177\363>p-^\276\237~\237?\356\373\300\276\203\312E>\233\357\253\276\264\347\252=\0030\037\276\301\021\213\276A\207:>\331[C\276\334\251=\276\024\352\301>\203\327$?\354*+>\366<\244>\021!^\276\320\264\245?\374p(\277\"S9?}\336\361>\273\275\242>\235T\371=\363\204V?/\365\313\2746Z\354=e\t\356\276\226?N\276\023\301\247?\342c\264\276R}\221\276\010\035\245>\302\326\013>\324\'2=6\374\022\277\336i*?\207rx=\002\243\262>\241\267\200\276\370\314\347\275\006}i\276\'\223\236\275b\350\001?[\204\216\276\275\230\277>\336\230h>\212\207\303>\214\261I\276\350@\252>\235\243\355\275\236|j\276\027X\212\277:\201\275=7@*\277\206X\205?\375\3008=\3140\016\277\250\374\n\277\264\315j>\344\303\350>\221\275L>\217\037\330\275\275^\013?>(\014>P\203F>\262\257\010<\342|\324\274\365\367$\276\035\024\236\276\3578\007?\356\341 \277\323\004d\2750\315\264>5t\000<&\022\276>\3057\027\276yp\204\2761>\260\276\245\234=\274}\330A?ND\333?T\327\257\275\325\360\004>\206N\333\275\200\010\003>\217c\376\276\032\022\221?0\371\277?\263\273\274?\365\031\275\275\240\377\353=^\2664\276\337\357H?\242\rO\277gS\002\277!u!>\036\366\362\276\275\3255?\352\245!\276\257\310\022?\247\021\360>\314\022\022>y\0210>y\274;\274\304\317\021>K\036\352=,\261\025>O\007Z?\305\214\373\276\254dK\275S\031\033@\026\014\331?RQ3\276\243\3779>\306)\307?\333\205\236?:\357\216\275\316\333\213=\262\347\014\276\374\001\233=\020\325\237=\300N\237;\360\267F\276\340\014\375;8\227\241=v\024A>9p\336=\3211X>3\330\025\277)=\034\276#\362&\277La\200>\027\364\353=\321Q\377=o\\W?\021^e\276\\\231\311=m\273\210>\005\341\231<\302L\223>\200T\240=\0065!\277\362<\265?\016t\200\277D`\240>GY\034>\373\021B=\350\262b>\375^\345>\341\205\023\277\202/\300\275j^\307>\344\217J=\331\244\202\275\'\303\231\276\265B\217\277\343\201\022?~\257\r\277\332KV>\240m\216>9\220\261<-\032\215\277NG\231>\2763B=\236\334\004\277\352f\007?\253z\371\275\022\341\021\276L1\357=\203,\265\276\002\021\362\2762\352\233\277%\257\242\276\313\r2?\361\2527\277sC6\277\335\347\006?2\264u>L[\275\276\206\030\247?\321\251\362\277\374\2340?*-\226\276\026\274\343;\014\261\242\275\367\034\014\277<_\334\276\261\262\352=%i\320\276(\244\247>J\222\323=tx\027>\214jP>\337\313\224\274\013\204\217>\230m5\274\026\365\213>\325t\204=\010a\310\276\243\205r>\247\303\367=p\260w>P:\344<BU\314=\217\006\217>-c\352>\353\240Y\277\332R?=5r\177\3000\374\027\276\317w\252=6n\231\2757\244\273<\237\2505?,\232\300>\177i\221?\\\331\210>\341|\305\275\212\320\314\275\342\234\306=\232\300\224\277\244d\026\300\305\317\340>,u\312\276H\343\001?\033\021)@\304\320\031=\237HT\276\212\257\261\275\245\336\356=h\326I>1\356\254\275\260\352\320>\273\034\205>\332\023\214?\262>\304>\216\321\307;*\343\006\277F\r\330\277\026\330\355\300{\270T?\241+(\276\207}\352\276\023\004\307\275\356J,\2760\250#\275\3305\231\274\370\311E><\263\025\275\260\221\'>\244\311\336\275\214Yk\275/\253\322\275ZP>\276K\261\356>UK\'\277\r\243\241>. \373=D\344&>\334\210\242>\255^+?E\345W\276\207V\270\276zs\333\275\235t]<\366Sw>`D\304>\3708<\277\335\033\202\276\37202?\352F:\277=\367R>\025\334\310>9\367\022\277\261\262\225\276\346\360+>\205\371!>1:\201>t\230G\276\215\324\203>\244\324\232\276\242<_\276K\350>>\'\225\332\276\2509O\277<\'2>\276\321\t?\207\240\014?-X\240<\327\366\340\275u%6=mp\257\276\215 \002\277\344|\316>\350%\201\2760\253\014\275\335\256\324\275\211\240\346\275\305\303\301>?\377X\277\232v??\3216\233>\350J\003?\014\212\253\277Xi\200\276(\277\310=\365wu\276C>4\277W\201\313>Jo$?\331d\n\300p\251\306\275z\202\322<:\216\010\2753\321+>l\240\205>\035\324\027?\312\267\033>\3245\010\276\307\371\203\274\337Vb\2763\335\321\275\016:\341\275\342\353\213>\342\235\225\276\3722\213\276n4\370\276$\027\376\275\317g\207=3\355l>\034\346\360\276\331\"\234>\251\0367?\2102\301\275\376K:\276\244Z\365;N\211\366?\361Dz=\032\344F\274@\002E\2766\302%\276\204\005\345>\277\343O?\240\343\005?\216>\351\276\302\364_\275Y\211\246=R\365\006\276\250\373b<,T\270?\271\314\221\275\322Z\357>Qb\024>YG??6\023\246=\260\001\340\275\0307\236\276\360\3305\276V\362\314=\224\347\321\275/\361R?\200\334\213\276W\244\336?2Y\017?Xl\027\277hw\262\275\006\346\035>\226\223X\276_\031\307>,\006\r?|\244\323\277\370\361\217?\332\235\317\275\274\243\332<\360\200\330=\n\306\205\275\340\032i=\243\205\304\275P\335\022>\030\307>= \020\307=6\2706>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\314\337\351=\353\342W\275\237Sl\276\311\323\356>\310\022\356=\372\354,=\0226\211=\374\235\251\275\230\277\243>\222=B\275H\222\034>\025\023\020>B\213\014>\321\351T=\277\321\252\274\031\024\036;\353\276\214\275w\335h\275\330\020>\275d\006\336>\013\300C?\245\376\273=?U\264\275\345\r\006>\023{\206=jL\206\274M\312\035?%\314\321=\031:\213\276\244f\304>\037\362\256=\241H\355\274o\253\014?\242\333\013\276\367F\327>1\"\250>\0061\316\276;\030\327>\242E\304\274M\024\213;\"\367V>\027\021\251\274f\227\314>-.\324>\370\2645>\321\340\376>A\3545>n\274\226\275\222\3160>\030\201\004>\3243U\276\222S\326>6\323\223>\255\305S>#\032t>F\023\031\277meK\277 #\266\274\344\007\214>\234.\201>\024\216\n\275\367\004->\312\263\270\275\241\014\254=[2r>d\322\254\274\350\3133>\226\262\221=\000\363x>\357\005\">|\032p>\334\277\277\275TU\033>\324(\221\275\352\363?\2764\220\322=\014^\354>\001\357\243>\351fa>V\334\037=*\260\354>\352\364\301=\343\262\\\277D\365\025\275%#W\275\256\211\246\274O\'\331\276\363\242\003>G\221\331>gT\370>\263\006P=\035\316\220\275*\205\022\275\223\332U\275tP\213\277\316Su?\3417W>\036l\204>\334|\222=\007H\352=m\327\200>T\323\350=\341\024\270<\235J\270\274<\366\246>gt\205\275\252\002\r?\2458\263>)%\220?\264\257F>\316\305m\274\372\260\267\275\337\241\314>2\n\211\277T\274\270>zv~\276\340+\351>@W\016?\021\230\035\275\373\256\303\274\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\257\016\251>W/\346=\312V\306\275\253\361\002=\304\271\301;\340\216\332>j\365*?\023\346J>u\203\001>\220\033\020>]\253\007\277\235\322\n>\031P1>.\326\013?\312\351\254>\016\333\256>\260\246h>]\247J\275t\301\253>Z\323\212>\255\017\'\277pX\330>\223Kp>\226?\304<\375\034Q?\030\226.\277\351\225\216>\342\322\007>\365,7>\275\000B>\240tj\276\346\352`>s<\215>\354-w>\367z\345>\302<\030\300Cg\202>\312\337\205\276\010\350\322\275\247\237b\276U\245\250=\245\342\214>\001\376\220\277\261\014\002?\001\201\001?\004=\352>\250\326$=\336\004\025\277\r\303\350=DJ\001\276,\353\256>\242\253\031>i\346:\274\221\'z\275\353\214\233>\255><>\311E\215>BjR\276Az\016=T\027V\275P\016\236>t\356F=\365A\335=v\354\014\277d\036\265=IA\262=@\342\220>\307Q\220>\316\371l=\036(5?3r$>_X\252=\330a\320>\225D\274<E\375\000\277\240\351P>.r\010\276\322\327\005?\003\243\031?y=\220<Id\312\276\035\225\017\276\336O~?qx\340=\222r\335>O\320.\277)\344\271\277\017\242\202>K\367=>}\265o\276-$\345>\020p3\276l\347j\275\225\343\267>u[\023>\332\254\361\276\243\274\274\277\027\273\006?\314L\220\276\3244\301>\003~7?^3\355>\306\324\314=\231\006\020?B]\240\276\274\345\013\275\364\265*>\213\007F>:o\354\273\214\370\267>\356\255\216>\334\230:\275\256\3779>u\262\030?\337&P>\036\007[?\263\340\373\276\372\346h=~\210\365=\277$\002>.e\203\275\202?\000\276\027M\225>\276-t>\016\\\022\275\356\005L>\232\307\206>2\231\346\273\2418\214>\203\300g\273G\302P\276\277\013:>\233E\241\276\r0\217>O\223\264>\001\014\244>\330\3433>\032\021(=\223v\026\276k\017\261\274\3422\007\275{y\361=\204\223\342>C\003\021\276h\200\351\276\242:\277\276\371\360\332\276\226c\312>I\256/=1\262\025?\023\016\016>\204e\372\275\352\336\007?[\300I?\214,\222>Yd\233>e\243\265>\254y\274<V\3707\276\3121\023\2724\345\323\2757\324\252>\034\331e>\001\235\362\276{\201\000\277\316\241\243\275ND@>\326\252\247\275\3279\023>\\$\024?u\300\332>\014\302G\276\347\030\321\276\030\227q\276\3173\237\2766N2=8VT\275\310\202F\276A\026r\276\374&\033?\202\240\244=\\\275\214\275\304\367o\276\342z\374=M\327\r?\3151S?=\tC\275By\370>\262\336\262=[NP>\223\205v>)\350\315\276\225\254\006?1z\217\277\2064\342>\226\336\236=\264 \005\277\204\362\327\276\222c\250?\246,\306\276\034J\313>\371v\257\276n7l;\006\362\232\276\244\356\371>\241o\325><\225\362=\213n\303>#\304\206>\026-\212\275\221\321\236\275\243\311^\275~\251\206>\000\030\276\275\025C\302<3\240\350\276\264I\255=<\226\016\277\311.\212\276\211\245\020\277n\314\003\275~\354j>\254V\261=\020I:\276\325|U?-V\036?\265\242%>\005\337\265\277\332 \034>\237\241\257\276\355\354\274>\271Y\261>\230\320\024\277g\246$>\274\036N\277L\356\324>}\017\'\276\006\201\214?(&\365=v\177L>\343\206->\213\332\202=\230\365\270>v\010N>\353+\256\275q\177\317=\347m <Tb*\276\0144\305>\260\323\240\277%\326\336\275\373\325\013\276\373\373k\274\302\313@>i\036\035?\267}\245\276E\324\350>\244\000U\276\036X\016?\252\232-=U\026\013\277\330q\305\276(\310R?\340\367i\276\266XW>\035\204\303\2766L\307>\006{\251>g2\204>\235\361\217\276hC.>\177\350U>\000\206.?\230\0361>e\2363\2773\r\330>=\311;>Lp\375\276\256\215(\276\323.\210>\342\276\004\276\242\225\302\276\216\230\r\277\022\t\227\275Hv\222?\000N\317\275\372\205\244\275\272NS\276\200\273\274\276\201\205\316>\333 \324\272\376 \003>\341\315\333>D\237\343=#\rU=\256\260%?J(\025\276\350\027\317\276<\037c\277\233\201b>\2444\332>\271\242Q?c\243\276=i\357\262\276\263O\002?\036v\222\275j6+?\362J\303\276]\310\244>*\230\200\277e\300\207=\2773a\276\177\346\214\274\212\361\224>\255\221\215\2760\336\227\276\261N\221?a0]\276\033\236\373\276\000D\026\277\214\365\235>\371\302\022\276z\355\013\277C\331\256>eW\215\275\357\344\214=\376\321u>\001\n\003=\335U\270\275\031\021)\275MB\343>\363|\223>i\032\375=\233+\320\276\263\037\014\274u=\224\276\'\241\317=\236\242\216>\254\\D\275\001~*>\251\327\303>\370\217\342>\203\375\245=\205\260`>\365x\245\276\\\320\330>\273\343\265>\225\362A>k\336\216>\240a\003?\2336\277=p{\271>\276\327\202\276:/\001>\372\322\314\276_@a\277lo\276\272U\306n>~\242\252>\325\276\361=i{\215:\305\366\222\276\362[y\276\262:\230\274\322\3241>\255\204\377\274\006\251\314\275F)\022=WJ\235\275p\343\251>\037\212u\275\021)&?\334\305\332>9\240(\276\356\204\377=D\210U\276\237.\036?\344\371\247>5\320\301=\242\310c>W_\244=\"f@\277H\273l\276\372\177\007>^5\262<\236\\\353\275W\010\234\275C\370[\276\342u\347>B\302\017\276\327\231\366\275\246\361\001>\340\037\234> \202\031\275g.\305\276\335x ;\373\331~?F3s\276yg3\275\376\270\224=\354\367\371>\331\357+>\347\027\232\276;\253\214<\213\340m\276\203.\003>\305\374\212>FU\236>mt\213>\203\345\020\277\323Q\n\2769\272-\276\206\263\032\277\036\3420\277\027\036-\277\316\245\023?&\324w>:\221\254>\347.\000\276\255\340\204>\371\304\236=f~\272>2E \276`1\312>n\266\001?\233\333\353=\354:\274\276\363\203\320\276\252:\266;8\005\347\276/\323\234\276o\343;>\016ES\276\007wh\275-\345\357<,\262F>\215M5>\270\207\271>\374:\\>n\362\027\275C~]>\331\366\341\276H\343y>G\311\030\276\003\\\321>\310=Q\275\215?\215>\005\243C?\263CU\277\223\350|\276\316\303\302\276\253\351\252>\003\200\356\276\\\256\311>,t\021=\343~l\276\364p_>\307\026\002\276\177\341\235>\005m\273>Y1\352=\261\215\025\277\020\332\200\274&\tg=\215\006\343>+\rB?\365\310`?\263\031\272>\000\031\360\276\243\204,\277l\310\306\276\220{\032\277\365z\230>\377\034\350\274\225\351\373\275\272\317\277\275\252\323\014>^&6>\273\305\375<\201]J>}!\t?;M\227>]C4\277z\336t>\237\367\002\277\037\342\003\277\013O\253\276\302y\t\300\004\277\014\276\3313\306>\347\241\257>L\227\272\275\213]\265>\220\365H\274\376\035\025>\006t\256>\260y\207>\276-M>\007\232T>\014\215\271\276C\026%\276\036{\025>\214\223\364\276\215\264\277=\333\2149\276\t>\357>\340\354\026\276\003\"\220\275\376\227\360<y\271W>\025p9\276|D\">-w%>\310\255\350\275\3427\267\276\234\350\305<\022j1\275C\035\254\276\004B\214\276\301\207\352\276d\2300\276p)\351>\2315+\275{ a>\200V\035>\377\367\023\277\322\010\254=\307}7\275F\303\241\276`\374k>\rQ5>0Gr\276\372\016\002>,\275\367\2755_\332\275\210\234\013=\305\370\272\276y\001\013\277V\261\252\276y\231/>J\360\315\274\216\343d\276\333lY\276H6C\276o\250d=\322\324\333>\337,;=\241\310\324\275Z\224\216\276\272\306\266\276\220?\000>H\245$>\265\032*?q\342\000\277R\276\314>k2\311=gt\222\276\354\017\202>9\221z\276\354\305!\275\366\2511\274#\035\243>\304\002\235\276`\300w\276\346\315\220=\356\371\336\276Q\027\320>\373\354.\276\342\253\010>\330\210\276>89\241\276\221\334b\276\353\3323\276)\037\010>2\233\202<P\235r>"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\202G\'<\210;\n\277l\360\213<\365\237\203=F\242\275\276\326\325\207>oW\205>\333\\\346="
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "Bt\240\276\035\337\220\275/\276\254\276\335\003\376\276\370\360\220>\206f\366\275\237\254\211>\333Sd\274\201\035\000\277\236\332\243\275(\202W=K\362\312>\244\343\031?\2645\217\276\250J\005\277%\333\010\275\240\264\256\276X1\272>{\211\"\276bJ\321;\254%F>\273\277%\276\007\014\241\276\033\027\252\275D\234\256<v\364\275\275\256-R>\027\260G\276\327\333G>\345\346*\276\252&F\275\366\333&\276\351.\277\276M0\316\275\334\247\227\276\227\362\207\276\205\323$?\342\256p\276\255\246\254\276\032W\305\276{w\'\276b\236\262\276\354\r\276\276\342\r\274\275>\255&?\374\363\214>\300\310\237\274\334\nz\276\327)L>\362\204\361<\273\216\240\276b\253\216\276\227\345:>\277(\262\276\341\337\322>\004&j\276\"\027j\275\005\331\344\276\200U\331=\211p\'\276\364\374\236>_\n\354\276\304\366/=c\372\214\276R\376\022>\316\220\025?\206q\207\276\016\367\032\276\006\0225>d\372\363=T\337\301=V\244W\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.24201378226280212
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
