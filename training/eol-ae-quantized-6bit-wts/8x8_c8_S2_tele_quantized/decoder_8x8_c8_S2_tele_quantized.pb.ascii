node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\224k\271>\301v\312\276h\213\312=K\307\325=\243Ud\276U\333.=G\261\000\276:\235K\2766P$\27662\256\275\342\006\244\276\2659\235=\004[\223\273~\266\304=E\002\203>-\376\026?\356\351\333>_\320\227>\275CG\277\237\211^\276x\337\215\276\314\r\255>F\353\263>\341o\016\277($\002?zx\203=\017\365/>3\2222>3\360G?\033\tY\2775\035o\276\337\257\200\275*E9?\010\243\270>\322\256\354>y\312\014?8M\036?<\205\354>1rp\276Q\215\277=\240\304\027\277\312\'R?.\315\027?K\357\200\276\276\373\014?\214vF>\325\200\201=.D\336\275\376;\n\276\204\303&\275Y\263\242\275\216\306\t>eSq\275\225CU>4? \277\316\314A\276H.\021?\302\230\244>:\013\013?3\027*\276\\\357\256>6\357\025\277\253\357\304\276l\001\215>6\364S>\351\310E\276\262\225$\277\024\362\t?\302\365\302=\356\210\343>2\354\243\276\005\224\003>%\t \277mn!>\023\201Y\276Kn\224?\342\001{>\255u\322\275\367\250\037\275n\367\254>\003>\226\276\252\271\024=\206\312I;6\227\343\275G`\023\277\370ax>\261\017m>t%$<\342\222\202?\345=u>\225\260/?\332)\201\275l\217\000\301\035\343\333>\352H\250\276(\203\225\275Z\037\001?\263\333q>D\000\233\275TR\270\275\351\270\326\275]\326\004= \2228\276\002\253\001\276\201*V?U\324\230=~\222\353=\345\0024\276\361\243\242\276\316\231\217\277\226\344\366\276\025\025J\276\303\220\201=\273G\231\276;\211\257=\230\251\201>i\344J\275\r@{\276\'\352s\277{\036\214?,8%>\320\272\035<\3756\377\275\234\\*=\356\215\000\276\340\251\202; r\001=`,c\274\2051\265\275\341\036\345>\"\243\'\276\250z\226\276\212D\037\277pg\014?\317\215K?Rq)?\'\304t\276\027`\324=H\\\236?\322\\\222>\367\006\r?\032 \035\276<\227\216>\210\267\017?%\317g?#\n\274>\3016\030\276\256C\305>\247V\220\277R\310%?g\370\201?\022\370\324\276O\307?\276p\363\276\276\035\257\272\274\233\3156\277!\324\206\276B\300\311>\255\374U\275#\2239\275\016\306p>\207\007)>\346\333\001\277\365\225\267>\357\251_\276\177\236A=\372\300\211>:\331\362;(\336^>#Z\340\276\023f\222\275qD\272\276\2138\177=\221\217\333>\204\245\272=d\230\346\275\320\000\272\2767U\254=Pu\342>\300\034R\276\226\244\315\275\351\317D\2767\005\314\276L\221\244<\330\240\037\276O\352E\276w\352\014?\212\273\252=l\332\276=h5T\277\340\257\371\277\357|\242>R\276J\276\244i\333>\273\255\254>\222\345->\226b\250=\'\237D>\202\255\002\276v\366\253\276\034(\267\274\234\222\310\276\265\222\213\275*\325\335\275!V\000=\220\311\222=\314M\227>\203l_<\216@\246\276\231\371\355>\017|V\276{\025\230\277\013\253\204\274/\216\355=\222r.?\013Z\333>r:\311?+\237o\277\201\200\027?i\361p\275\245\232\226??~\017?(\202\025?\261\302P?\343\334\277\276\254\353L?\010\206\034\276\200+\224\275\211V\036?\265\352z>PR5\276\241\257g={$\n\277\3654|\276\310\231p\276\313u\346\275\231VF?\262\223e>\237\271\200\277\373\230;\275\242:\244\276S`\320\277\362\234\343>b\306-\277\022\230\307\276\235\240%\277\0348#?\301\253\372\276\177#C\276\270S\376\275Hu\373\2758\276\276=\024?\222=$6J\2757\177F\276(\275\273=\344\313>?\323\360\016\276X8v=e\320\352>\212\014b>`Q\005>\372\377{?\tA\360\277HwP\274X\210\016>{\317>?\242x\363=?\266\310\276\033\2250\277Q4\024\277\206\335\033\276\210C\270\275\245=\027>\2533\203>\246\243#\276\274<z?\266\323*\2769\216\273\276\307\356->\237A\206>w\254\271>``\236==\314e?\251\366>?\357W\023\277X\243:\276|\226\030\276[\200\035\277\372\257\035\276\357\325\213>5\342\030\276]\336\312\275\372\252\254>\274\312\235<We%\2757\237\035\276|\241\023?\320\000\304\276\235\246\331=\021.\266\276\370WT\276-\307<\275\354Q\222\276\026\330\n\276\201\351.>\207<}\276\241\026\207\275`8=>\303\256\204>R\210\325<\274PC>pR\306>w\000\010<\307\260\275\276\341\265\'\276\356d5>\220\251\016=\275E.>\006bu=-\225m\275yW\306>\333}\000?H8\267\275\017\013\272\275\354W\241=\204\3436=?{J\276Q.\005\276rzF\276$h\224\275\357L\033\2769\326|>\232u\223\276\223\200\027\276$\262\370=c+\312\276\353G\270\276\342\024=\274\000\224\246\277;\023\027\277\274\2647?\374\333\304\275\024m\332\274\201>\351>\332\250\330>\261\252\307>\352W\311<<1\356\300\206\341L\277:r-\276\374Ge\277\272\312\177\276\221\300Z\276D\"\027\276I\343\206<[n\354>\210\370<=\023\363\221\274z^\364\274B<S\277s\245\232>\014QT\274a\232p\276z/\014<\234\010\235=\303n\027\277\260V\303:\320\266>=w\352}\277p;\266>\254\016\321\276\354\027i>Y\200X>\230\203\005?[\245\n?\270\rE\275b\200\373\275\330\375\007\276\000\214\275;z\366O\276\004O\014>X\202\262=\300\006D=\213j\243=\257\355!\277)\207K>\341T\212\275>\324\372\275+\330\247\2757\343\273\276\374\377V\276\211\3343\276W\0337>dtO\276\216\370\343=<$\274=m\237\267=\345m\225=\347\235*>\327!G>W\r1?\201\177/\277\034\244\001?i7\365\276-L1?P|M?\241R\232>\037(d>\201\241^\277\306`h=\356j\274\276)\201\366>\350\026 \277 \377\224\276\201\2032\276\361\373\230=\306b\276\276\327=\257>\221\004\034\2731T\220\276\200\346[>\251\345\"=\327Gr\275\244\022\023\275k\204\"\275M9\314\276r\213\037?\316\222\377>~o\364\275\211\200\337;\262P\252=\247\345\031\276\023z\206\276\3345\235>\007\223\300\275c~\247>\367H>>O\261\256\276\020IK>\254\251\373\275\200\350\223>\314\370\257>MeA\275\023\272\366\276I6\023\276\200\0074\276\371\265/\275Mq\004=\247\275u?\341\335@?\001\205\220=\371\202\357>-\024\220>\013\234\020?\034\0276>?\025>>/\377\276<\351\262\031\275c~\317\276\265p\264>}?S\274\3741\264\275c\345\205>\246OT?\221\271)<-\265$\276\362p\231\274^\3030\275\346\362C?|4F\277\031\212\276\276[\371\230>\337\251\177?\001\014G\277\337\247N\276\332\207-@\020\355\255\277\350\031#\277\354RY=3\322Y?\3522|\275\202\211V\276xD\360\275\242\227\027?`Z\364\276\236\371P\276\021\230\022\275 Vz\273\001\177<\276\346\300\335\2760\253\003=\345\t\203>^V\316>#J\245\2768\370y\276\027\351\331>I\341\340\276X\354\216?\240#\373>(\310C>6&\251>)O\370?\240\244\264?\374c\340=\314~\022\2760 \304\275\000\257\325=0!\245=\360+8\275\300\375\267\274\013\304\035\276\024\3619\275@\214\034=\207-]\275*1\303>\206\301\223?qC\024\275\350\334[\277\272\243_\277\363\323\251>c\342\356\276\207\001\004\277\357\346y>7\225\255\276\332\025\246=\204\322\305=/5\003\276\331\270\270<\271\272\302\275\345\030\t\276\317_\035>\000\320\355\276\244h\305\276\363$9\275\265\304\214>\010\n\305\274c\021\\\275\374\275G\276\2647\266<\221-\215\276\2046\013>WZ\r\275Q\016\022\276\205\210\216=C\206\232\275\353+\024>\252J\345\276v\252\005\277\002\024\247\276\302\216r\276p\334\376\272\247D%>\362m\310>\036\311\277>\233\234\322\275\001\030\007\275\3720\007\277\371\227\033\276\313\023\355=\206\372\250<\237\202\240>VR\333=\025\221\235\277\016\000\256=\177\363\245=S&\305\276\371\225\006\276\330-\214\275\366\341\177\276\005v\200>\0317\020\276c\023\"<k\374/\277\001\261i\277I\010P>\014V\303=\347\212n\275H\212\373>-o\245\273e\345\240\273\277\237\034>d~N=\202\004\036\276\226x*>\tn8>\217o\355\275\220>s>}\341*>\236{8\275y\266\004\275\\h\002=\214\257\332\271\004N\345>?\350\327\275\207\233\034\277\236l\224=\203\357\242>\261-\325\276\002\267\272\275D5a?\304\305\024\277\004R\030?\2212\314<\232\363\"?w\205\020>\327q\206?D\234X>\313\204\345\275>\202\031\276\265\232 =\307\333\024\275J_\216>a0\350>\207\237\263=\030F\347\275\023\345\006\277\036k\271>\251rD\274\346o\313\275\026\030w\277u\001\376\275\\\316\214>\361W\204\274xc\342;s\361\n>\177\033\027\300\2275}\274\244&\037>\267T\222>\n\234\207<\010\032J\276,7Q\275\200^/\275\330b\033=T\007\240=\204\266\010\276\0304\362=\277\333\307\275\360O\006>\254\032\224=\247\310\301\276B(\t\276\375\r\362=\241\021\264\276\345\177\376\275\333B\355\276`&\347>\341\346\347\276MN\211\276\036\243\247>\255\027-\276\220\347\326=JC[\276@\230 \2751\205\266>\205\342,\276\017\356\235>\357<\030=\230\177\343\276\025\"J=:\303\324\276\274\306\345\277\224\320n\275\354\321\262=\254\267\212>\253\351\243?\257\202\024\277\250\000\257>\360j\241=\334\217\252\271\221%F\276SE\211=(\r\375=\300\354\215>\260N\323\272&\355\037=\246\337K>k~\023\275\277h\274\275\227\277;>1\261\034\275\003\263\312>\302\tM>\2262V=\207Y~\275\274g\323\275{\t\253>*\363\t?\201\302\"\275.\024\343\275\242l\222?p\232?\277\223\323\021>\341\336&?=J\236>\343\3127?\273,\177>[}\000\275\027[E\276:!\342\276_0\211?oz\230?\353\270\010\277\3737M>C\026\200>|\210\032>\204u\005?\004\006\214>.\214[>\300f\002?\212\234\316=\264\256\232>w\355i=\326)\341\275\362I\274>\361S\263\275\310\230I\275\035\333\252=\271\3019>\004\274\207>vM\273=\273\023\264\275\266~\014@B\220\\\276\313\354\335\275\217\316\355>\302\216\376\275\0149\206\277\213\304\010?M4^>1q_\276W\335g\277\t\213\021?\337\370&\277\265\"\357\275\010,\n?\271\372\272>E\014R\276\354\374\000\275v\200\341=\223\0069>\311P\003\276s C=\364\205\267>\375\225\251\274\014k\'>\340m\000\276\251\366\032\277\242?\247\275 \206]?\330A9\275\256\206\031\277\003\373\t?\355JM\277rk\337>\370\302t>eR+\276$y\000?9\214\243\276\222\357\031>\375\'\242\275\030\354\320<\333\031\035\276\324\254)\276\230\n\275=`\203O\2768\010\244\274\307\372*?M8\333\273\325\200\267\275\021f1>z,\251>\252\242w>\345\326\240?\333(A\277)63>qs*=\303\351\265>tV\217\274\236\352\211=d\251\033\276\261/\227\275\237\211E\276\360\272\233\275\335w\020?\3473\323=\225\356%>\346R\022\277\221\212L\276@\262\211\2779\253\n>\237[\351\274<f\355\275\334\303&?\255J=\277\304\260\204\276\204\241\300>\351\3316\275\310s*>\205\256\277\275\376\t\322\276\313\004\251\276ckQ\276\275\230\210>\220\272\236>p\000\'\276\266q&\276\262T\032\276\266\266\021?\324\304\362=\036\321U>p\362\021>l\322>>\251i\305\275\233En=t\023\251>\317\030\206\276&\341a\276y\334\262>E\313:\277\236}\326=\273\236\336\275\240z\020=\322\300\370\276\001\276\327\275\260\265\013?\354\001<\276\3425\250\276\317\337\334\276\370,\361>\214\323\322\276\n\274\206>%a\'\2779w\200\275\307\3247\277\241\273`>\3729\244\275~\333\301\275\345\302\001?($\207\275\207@\356>_\266$>\313\264y\276\212\017m\275\266l\201>\223\273\010\277\016[\325>\201m\217\276S.\310=\010\222\t\276\\\267\261?\\\221\230\276\327\236v\276\000r\274>\"\240j<\231_h>\3156\253\276]!6>\311G\316<\"\3074?\313K\032?\031\340\257\276;\353\033?\005\265N=\373e\021\276j-\364\274\265\025\235\274\203C\266\276Xg\007\275\363`\363=\035\0239\276\207I\006?\362<\313>\360\363e>\337I\017>\222\266\210\276lDU\276\223\201\317>\235\t\273=k\334&?\300P&?\210\203\244>\261\023A\275\206\355\243=\302\310\234>>\313O?\3023\020?\206[\234\275 1\342;\255\323D\276\337\016\301\2752\3612>\202\023\027>\300\374\212\275\240\252G=i\270\177\276\341\3578?\206M\027\276<b\302\2753P\220=w\231\237>\271P\312\276\230\002\210>\003\332\010>\203\254\003\277.\243)\275KCW>5D\021>\032X\352=/\377\243=s\205l>\307\245H=\342\204\020\275b\240\325\276r \001\277~\0224\275YQ\006\276\n\313\354\274\362\2259\277k\377\243>ij->\023l\307\276N\301\032>Q\351\031\277\201\000\274\276\343\3660> \366-\275\224P\246\276\327\3338?\t\220r\275\341-\021\272h\0333\276\260\025\207\275\210%\230>\316\364E\276\200\206\246>\251\276\234>\267\206\002\276`7\353=\207\256\006>\300\020\002>\226&\200\275\237\177\372\275\207\356;\276\251\356\233\273\006Y\255\276\243h\327>\231\0215\276\366\264\211=E/\'\276\300G\337\2752\312\262>\223\274\372>\335\252\272>\340&\002>o\273\302>\310\300L?\313\030\253>p\333\301>u\025\220\276\247\253\346>z\354Q?XwY?\227\332\025?\216x\267\275Y\241\277>\357J!\275X\363\240\271}^\031>6\340\316<3\307\243\276\004\037,\277\026\2128>\n\225\017>Q\235\022>\221\331\325\276\216\'l=\353\316\360=\261\335W?\376C\220=Z\363m?\002\001\027?g\312\035?\320X\025\277S{\257\276\014\201\346>D\016K\2767\013\321\300Ku\001>\305<\306\276\377!\232>\205F\021\277\326\340\213?\002\314\205\275\371\027B\275\006\2521\275+\030\203=\232\203\017\2754\2627\276\274\325\236\276QK\255>\377P\367>\257\346Y\276\357v\207\276l\177&?PG\270\276s\340\243\275\371h^\277\013T\205\277\0201:\276\353\030\361=\374\375\215\277`I\224>Yt\275?\361\371\006?\320\357R<\225(\273\275@\250\000<(z\353=\204r\367=L\275J\276\310\263\t\276\200\230\373\2736\'J\275i\006/\275W\230*\276\364\\\236>\342\203\013>\257\221\037\276\252\231\334=p<\362>g^\276\276aUf?|t2>?\035\360\276Y\206\263>\362\"r>\323\245\333\275\3465\303\276B@\"\277T\266\016\277U\272;?\361t\240\276\241\374\273\276\363\322 \276\023o\344\273\222\212\013\276\304\030\024>\311!(\276\2350\r\277\226s\251>F\027\212\275}\303\037\277\024\253e\276\007\236\243=\302<}\276\366\325l?\327\353.?\'aC>\010\230\376>!f\242>\000\033\234>`\347\246=\033Q\301\274fi\'\277\344\0361\276l\211+:\016\355\222\275\224P\300\275\320@\027\275\205U\253>|\316^>\022\241\210\276\333\234$\275\214!t\276\242\"\004=\243\241\020?\004\313/\277\236\340=\276\212\t\025\277\346\271\266\276v\374\300>`,\262\275V\264\023>\351\316\201\277\246\226\255=V/\223>\323\366\310\274\314q\305>B\007\\\276 \255 >\223.8\276\203\311$>j7\235\275\337l\343\276w=}\276\275\271\037>\226\224*>\323\334K\277\366\226\255\276\2413Z>\360\353E?`2\330\275\347\301/\276w\325)>\3141\217<&\324\317>\311\342r?\177\314i\276\245\013\020?\276h\246?\033;\004?\350\347\357>\016ux??\206v\276\033K[\300v\376\313>\336q\017>\277\345\345\275\351t\333\276]\2643?\n\206$\276\360\005 \276c\037\222\275Kb\271>\337\231(\2760B3\276K\021T>\256\215\313\276\230\211\014?\203>\341\275\370\0020?\246s3?\007\272\235\276\266\000b\275 \336\300\277X^b\277d\244+?\260\373\321>\271kI\277\252\223\003?\354\301\200\277\350<\036?\350#p=\240\3362>\217\337\036\276.\204\030>TE\343=\300S;\275H\035\374=\350\034\210<\023z\006?O\316U=\346\247\207=,\311\331>\321\2272?\000\025X>\240\3121>n\246+\277Q\317]>\235e8=\366T!?\231\225@\275\336\350S>!\241\236=\346\315\247=\223\244\001<\261\234\211>~0\231>:U\002>5\225=?\275\351#\275\nA\317>\223$\252?\351\240}>\276\026*\276\177|\000\277\347\263\265\276\255\213,\276\305\354Q\2756\021\220>\314\354\024\275\325Z=\276\251\027\255\276\363}\033>r%@=\272\356\373\276\271\214\007>\273\306\'>\325n\204\276)z\\\276\312\360\234>\372\246\323>\317\304\000?e\001\224\27520\311\275\272\312!\275\224\341\010\276\352\013\274>\026e\307>2\235\277\276\353v\'\276\010\024\357=\374\324\342=\220xg>m\363\311\276\233*i\276w\262\261\277I\377\344\276=\341\213>\301u\t\276\257.\230=^\037\235\277\027\257\315>\332l=\276\320\n\205>\021\013v\277\177J&\276\241\307\204\276R\2028>}\226/\276\230M9\275_F\251>\333\030C>\372JB?IH\304\274\034\276\025>\311\234\223\276\371\032\t?\376\211\201=n\375\352\274\021\304Q\276\354\213\313<\233\311\354\275X\376\017@I\024\253=\317\235\243\276\214\207\021?\177\315\345;\014\335\025?`\256\305\275\367!\347\276\230\365\004>\212<)\300\314O\201?\265\221\031\277\037\352\252>\021\220\001\277b\275\365>\271)\252\275\"\321\323:\032\202\330\276\232E8?\263-7==\207+<\300a:?tDK=\020\250\n9\331\022\266=u\340\307\276\340\"\221\273\356\241F?\220\306\210\273}\270,\277\350\'n?\243\230\035\277\211yD>.\235U\276\331\006w=\312\236\256?\201d\260\275\026\221\320\275\354\300\313=tX\'=o\224*\276T\\\337\275p\242=\276H?\200\275\006\004\025\276\036\000&>Z\n\001>\0178\336\275)VI=lc\025>\277\260V\276\324K\231\2756\205\227>\373\207\342\275\324\020\021\277\342G\235\276t\365\"=\211e\243\274\320\244o>\305\355\305>\023\227\251>Z\2641>\026\225\261>\002YT\275\031W\004?\236\026\362\275;\265\320=\374\3479?\263\214\342>T[z\276b\240\275;B=\"\276\275\356\250\276L\2004\277\250Lu?\310I\265>{\304\344<\252o\205?|\260\002\277\344.#\276\237\210\026>\212\346>\275o\306\205\273\0017V\2750\306b\276W\257\252<\"\341\226\275t\272+?\227\0068\275\325\370\222>]\204\242<8\265\013\276g\346\243>\246|\362>:F\347\274\324\301\326=\010vN\275P\013\353=\351.\330\275n\235\216<#\013g\2756\313\031\277\220\236\221\276\265F\322>\300\322\335=\315V\023\275\022\314\t\277cj\222>\207\363\310\2763\014\330>\244\n\003?\354\200\267>\021\251F\276~Q\246\276\022\264%?[\374\024>!0&\277\224\014{\275\213\257\367=\261\211\213>S\324\220\276K\212\320=\036\313\355\276\3605\264\275$\324\364>\013\312\225\276\022\256>?\365\2530\276\005\024\341>E1\020?20\372\274]\3244>M\226\205>\204\275\t\276Q\343h\277\007\262\t\276N\304\032\276je\313@)\026i?\n3T>\003\247&?\200d\037? \271\261\276b}\222\271\223.\031\276\206\326\r?\375e\333=\031\307V\276\313K\245=\231\277D\277\270\022\243>\023\026C?\244\033\372=\334+\202\276$\331\034\275cq\303>\301\214\270\275\243\022\360>N\004\204=\017\3468\277\346\342r=\266-\000?\251\005\'?5\327\376\277e\2621?(\214?\276\361\3042\276j\3603>\010x2=4\260\313=\262\245)>\251\342G\276f-\025\276\\3\276>u\206\256\276\336\343\322\275MT\201>\311-7?\360\362\316<\302\271\234?4\337k\276.i\302\276@\360.\277\227\021\323\276Y%L\275\034(\231\275jl\030>\307\341@>x\300\204>/<\003\277o\300\366=\261\346\227\275\004\365\021\277\234\207\245\276\016\3532\277\027\002\314\277d<\n>\211\205\204>\"\260U>^\210\010?\364\0045\276\344\177{\276%$\371\275\200\361\301=\2658\216\275\0052#>\335P\033>\336\224:\276\274U\367>\201\346\036>9k.>\311\306\243=\360\247[\276\016\315\244>\222\224i=\226:\013?\231\033\177>K\033\214>#\311\327>\023\211\340=\265H3>QZ\251>c\007\222>G\212\035>\341F\025\276t\237\267\276\360\272\242=\"w\327>+R\245>\014\230x?/\335\376>\365\361\022>h\'\274<\322\232\203\276QK\264?\357\205\332>T/9\275\203;\370=\331\312\300\273\213\331\327=ZdW?\270Zn>x\222\r\274\253\2308?ma{<\002>\005?\332\353)=\334\256\263\274\004\013\224>\270\343\220\276\036\246\034\276\245sv=\020\223\323=\260\t\027?\003)\275>\021\214\215=J\303J? 3\213>\373\256\272>i\265\246\276GOh\276@\253\227\276\243\336\026?yV\357=t\316\001\276^u>@\232fq\276z\317.>\246w\235\275\020\332\353>\3036I>\n\312\020\275i\260\316\275\343t_\276\314D\025>\027\375\027\276v`N=\310)\324>\346Z\240=x;\335>\366\346`<\206o\000\277b\347)\275!\013\302?:~\327\274\310a\273\2767\252\206?\310U\222\276\210E,?\266\0013>Sh\313>\335\364^?\367\227\014\277\305\t\334\275@^\316;\034\315\036\276\340%\'=\201!\366\275<\352\377\275\364\3403>2\251C\276\034\215\021>2CK\276\214\004-\276\272\241\247=:c\003?.\226&>o\026\037>\314`\355\276*0\231\275\033l4?V\031B\274\233\'\">O\277\254>\004*C>\265\277\017=\036\020\360=`\205\214>\241u\303\276d\254\277\276\235p\025\277\220\233.\275B\'#\275t|\000\277\371\014]\277\371\324\257=\376#\351>\326_-?\\\357Q\275\2624\030?i\275\251\276\007\257?\274M\244,\275n\234\346>L\321\323\276\016\340\306\274Q\312-\2751\221\261\276\232\211\254\274\024\373\030\275n\272\014\274\335,\270\275\"\353D\277w\017\372\274!\r\233\276\226\254<>\213e\220\275\313K\243\274\315\300\256=t\226<\276f\371\227\2749\205,=e\262\206?\354\216!\276\352\240\342=\356{\273=e\352\240\276\202${?\366\202\216>\24234\2761\335\365\275\231\274^>\255\034\315>|\347\205\275!>(>\017\3657\276\206\375\016?\0051\365=,\305>\277\027\376\217\275\242\t\210>%P\005\277~;6\275\315i*\276]kF<\301K\007\276\233U\311\276=tM?\310z\253>\235\\\213>\276w\271\276\227H}=\023\310\240\275p\025\210\276\266\205\025\277\261\261\036=\210\330s\277\211\335\031?~-Y\275v\013\347\276\200\232\240>\310\'\023?\255\263\210\275\013\323\311\3009\027\303?-\266j\276\222I\213\276\343\214\252>`W\034=o\236\333=\250\203p\27656}?\307A;\276`\255_\276h>\247\275\222/n\276m#,\277\310\355\251\277Wy\240\274\246\241\010\275\247\2120>\264+\346\277*\322\262\275zSr?\005\322u\277,\004\360>MF\033\277\010\340R>\220\237\206\277\323\276\273\276a\005g?\010.\"\275\200\306A\275\374\232l\275\276h?\276\340\'A<j\223\373\275\214\246k\275\310\002\201=\324\223\237\276\227H\330\2752\026\247\275\026\326\207\276zxV\276Z\242\307>\316\377\262\276\265q\205\276\311i\210>\273\362\327>\262?\032>\323W\256>\344Ep>\224\215\334<\315\322-<\223p\016\276xC5?\256\275\335>>H\234\276,\2602=\014\266\202\275\033\267\203>\375\326Z\274\367\225 \277K()=|\222\037?\233\\\006?\304\244n\273\336N5>\305H\230>_N\350=g\331\237=\242\006#\276\222g\244>\372/<>\320\245\272=M\355\234=M\264\251=\377\232\017\276[\005\234\275(\263\236\275D\3516>=\220\036\277\303W\006\276\334\326\026?\365\271\234\276P\2416\276\332v\255\275@\260#\277g\236\213\275\236p\r\275\322\034*?\3365f>\255\031\234\276k5$\276\370\302d<\222\033\t?\311z\215>\245S\370=[\201L\276>\356\243>f\246\275=\224Z#\277S\251\024>.\033\260>\263\224M\277\256\0219>\266\347\025\277\316\355\206\276\3739?>\256\346\\=\355\307a\276\\\270\207\273\2328\214\274\024\001h>\'\0138:/I\360=8\244\376\275*\273\315<\361\267\253>\300\342\216\275Z\340\262\276d(\034\276\035&\342\277\203h3\276\205Mu>\245\362\027\277\244\366\211>\255\232\335\274$\000\206\277\0167\223>\307\230\236\275pQ8\300\266\017\342>\027U\341\274\023\014\004>\250\224\374\276\202\252\311\276\220\234\027\276i5G\276-P\211\276\344\"\\?&\035\250\275\245\265\312\275\023\314\013\2764\250&?\335\035_?z\321\020\276\213O\342\274^\024\203\275\316\245\260?}\202\213\275\035\323\216\276\371\2203?\303j\205\277\215\223O?6Z7>_\322f?Y\234N\276\3327=\276<\005\001\275\\k\201=<\326P>\300\"t\274\352\260\032\276f\310\033\276\244\322i\275\030\313?>\026q~\276\354$M\277\231\350\247\275\262N\322>\302\034V?s^\003=2\243E>\270\001\"?y@\023\277\227f\255\276\231w\273>\262\021\310\275\202C\243>\314\310\276>\"l0?;\246=>v\327\236=\270\251\024\275\220Q\271>\236R\232>\323\345\361\275\301/\246=\246|\r>\360\255O?\004I>\276\230O\335\276.\312c?\270\320\372\276HTb?\312\221\372=9tj\275\'\210M\276-R]\276\355\033\"?\3655%?U\224\247>\230gU>IcR\274\367\223\031>\006M\255<\331?\352\275\300\243\277\276lb\347>\231\213\362\275qz\222=\356\375\030\276n\373\037\276\004\353\002<u\353\250>\356\371\333>\250\305+?\313\230^>\320\333\250;\243\236\270>\270\3431?\231\366\036?K>\022?\322Aa\276ZP\252\276\216\271\n\276\th\031\277\370\002\003?DVP\2767\350\257\276\346\322w\276\023\331\233>\334~h\276,!!?\310\010\022>\274\271K>\014\350\001>\254A\325>\377\216%\275\220ZC\2779\340a\2753\316\376>\270\257\305\276+\266\301\276*`\372=\321\264\213>\314U\025?liy>q\244\236\274\376u\177\277\3123z>b\262\326>\025s\205\276\006\204\"?\034\250\024\277\371\343~?\207|)\275\362s|\275J(\302?\251\\\022\277k\032\303>\351YM\277lo\331>\035\301$>q\346\351\274\350\263\027\276\206:p\276\333\211\367\276\302\321\353\275\200YW\276+\337\013?x^\027\274\255\260[>H:Q\2757\321(?1\326\321\276\370\005\001\277\264_0\276\214]\277\276lL/\276|y\037?hf\237>\250\236\270=D\353\271>\374\354=\275HY\222>\355\377\365\275\235\210?\276c\034-\276r\274\250\275P\237\037=\230\177M\275h\247\242=\320\207\036\276b\344\353>\205\324G\277\352\322\r\276,\314%>^\332\341=Z\275\202\273l\235\013?:\223&\277Vl\037\2773\223\343\276\372\322\206\276\320\230\246=w.!=d\220\177=\304\217-\2764\271~?\037\303\242\275+\261Z=d\310\244\277\017\353!\277\2232\317=n\006p=\266\301\217>\310N\327\276u\2667?\251np=\036\220\254\276q2.?\231\364\347>\201\314\245\277\233\332\353\275\247\206V\276T\367Q\276F6\036\276\266\035\346=eVW>K;<\275\240\345\203>\325\213\277\274\261\313\250\275i\005\377>fs\'\277B\033w>\217\225\220<\260\303\302>\344\340\034?\004&\353\274]\213\270>\305\236\262\275\036E\037>\033t\256>f$\310\276\327\372+?$f\363\272?\206\354\275R}1\274\375\271\264?\220\273\214?w\216\032\275\364\274\277\275\013\356:>\252\234\260?\302KT\276\371j\036?\221\030<\276\340\004A\276\333.\243=\225\002\375\276\215\035#\275fz\213\276Z+\244>\247\363E>\356/\n?\203\016&>6\242]>/}Q\2771\013\255\276\363&\004=\353\262\007\275\321C@<\301\373^?%\373\357;Q\217R\276\302\220\344\2774\034\201?)e\034?[\315O\2772\351\317>\241\026\006\2760\234\263?if\245\275Q\347\234\275\321_\241\277\303\027o\277\253B\267\276D\0311\277x\364\232<\361\352\314\276\303}\035>u\030\204=\017\372\275\276?V1\276J\016\021\276b=\004\276Zo\304>\275<\227\276\361\r\277\274\322\251\324\275\\a\221>KR\336>\372KB?\274\225T=e\365\206>\261\367^?3U\204=\r\236\025?\355\332\247=\265\206\026?\270\314\263?\366H\273<\273o\300\275\230J:\2758\256\221\275\312\340\005><1\315=\344\266\225=\220\2142>\000\335n:"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "e\223c\276\207z.@\202A\250\274\264\340i<\322\267B\300V\245\343=\203\2007\3003\311(\276}^\321?d\022\222?\016\236\347>\357\201Y?\036t\006?\374#\216\276\340\3754?\251\202\337\276\371\364\326\276\234\241\022\277\002\037\351\276\265u\206?Z\005\306?\265\223\216\276T\254\034?J\303L@\326)6\277\2223O?=\324\230\277\264\364\347?\341Q\351>o`\251?V\033\267?\322\337\266\274R/\345?\246,\266\275\372~\240\275\031\241g?\005\255k?\235\353\033?\346\312-=\320\260D\275\307L/\2778\242J>\320\270\206\276o+=?\231\256Y\276\241p\373=\001^-\274[\227\322\276\225\361\266\274V\363\236?\203\265N>b\333\r\300\353\344\n?c\024\004?\350UR?\312\366\336>\226\263\313>\314\'\347\276\215\\\331\276]@\020\275A\226\240?My\003?\317\266=\276\317\232\316=\"d\240=\026\215u>I[\311\276\277S\210\277nd\314?\331W\224?\0021\216>S\232\216?\227)\020\277\t\317\001?;\220\"=\233\265\024?\352\205\264?g\251Z?\323G:\277\336\323\024\276\303!\253>\254n^?\017\322G\275\213\000\006\300\006H\314=\r\322[\277\233\3352?\024t\337\275j\264M\276\\\025\032?\224\235:\2779\256O\275?%\205\3005B\036?\000\266\004@\354\037\215\274\265\374\224?\340\"\334>\3231\232\274\246F/\275\376gw?\021\022\222?pXI\275\222\234!\275C\373\355?\r\222\363\276\272\237\t>\255\332\332\274%\324\204\277\211\200\337<\013~\250\277Q\227L\275}\257\207\277\322\364\360?.\254\216\277\267`S\277\016\036\204>T\311\334\276\021\236\017\277\202\355\003\276\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\032\251\232>\r^\253;\330h\313;\013\016\215>\\\031\030\275\234J\231\2769\"U\276\306\200\223><m^?\376<$\276\214\223\240>\251\nn>\003 {>\371p\025>\267\204\033>\002\017\321>\323\277\036=\363G!\276\260\221\201\276\205\210\303>\206\374>>\026\260\334>\\pI\277\253\225Q>\224y\271>m(c\276C\230~\276\210\2466>\034\221\037\276#s\360>\361\301\021?\303r;=\027\024\347>\025?\200=\326\270\234\276\212G\227>>$)\275Rb+?\263/\214>V\263\006\277u\241\361>\264xH\276\324\264\000?\360\361,?\364\242\317>\340G\013?\302\273\333>\247\351\333=\3464B\276\237J.\276a\223C=D\233*>\250\nF\277\200NK\276\273`\013\277^Z&?\236\265\252>\000\244\252\276\234\201\316\277\026b\276>\364\367\274>\217\350\372\273\305H^?C%\t\277\235\022\201\276\306\266\016>\332\262\244\276\017^i\275\303\305 =\240\r\n\276\247\377\224?\023\037%\276\246@\374>U\265\244\276AR\211\276\354\347g?\343\331\037?\247\027\021\276\357\212\342\276\033\376\324>\226E\027>\324\231!?\004>Q?W\2656\276\004\250;=*ZT\276#\240V?B\036g\277\232\210U\276\0044\326>\223\210\304\275\031IR?\023\320\272<\233Hq\276+XL\274\242\236y\276\344.z>(n\202\277~2,\277\3105\366>\313\230}\276\n\360\375>\222s,?\212\355\226>\277\3153?E\261\231?\314\235\237\276\340%\005\277\357\\\214?u\306\244\274\320\373s>\\\204\361=i\2476\2763^J?,\233\221\276\324\370\307<\005\263u?\315\017\211>&\021\361\276\234\373$\277\347W5\276\330\207\r=W\214\270\275\272_\316\275yi|\276\220\331\326\275\"\203\233\275T\256\035\276\002\375\206<\326\237\263\275\245\016\215\276\003\332\271\274\251\263\240>\345)\016\276\323R\331\276\177\336\247=\321\205\271\276\371\260>\276\2378\350\276\330\317\022?EP\226?\021\243\251\275_\234\241>\002@\025>>#\023>\322q\036\275\366\271t\276&\272\007\275\321\245\202\2767BR?\317\2615\275=\212\276=\227\275f>:\0178\276HIm>\0044\373>\255\373f=\370\351?>V\255\276\276\301\220v\276\3752\321=[\353\365=\223M\220>\232\321!\276L\355\274\275\031\007r\274\007\000\253>\371\320\254\275OK\'>*2s\276\234\033\373\276\275N\200>.\362\346>\230\221E?\347\2708\275\354\034\342>@\347t>\330^V\276(\216,\277xZ\204\276F\321\001>%\203C\275e\304s?^K\341>L\\\246>G\227v\275\243\217`\276\363\265\333>\251n\317=,]\003?v\017\350>\206\031\373>\374\035\365>\354\000\310\277#\233[\275s\314\300>\223z\034?\217\204\027>k\243(>:3\245\276\021\376\242;0\243{<\023\373%\276=f\006\276\005p\002\277\352\354\334>\276\000\003?\t\330o\275\355\000\202>\273Y\300>4\3320>4_\024?f`\211=\364\231\300\276\315\2506?sh\321=\212\220\201>\014\2744\276\354\323\355\275ec\307<\246a\021?\026\253\013\275\303Q]>\345\357\351=r\376U\277#\"Q?\300\341\006?\"\000\210\273U\2178\277\241\340\364>\234\224z>\256\246\340\276=\323\000\277{\257\224<Y\226\265>\257=U\277\"5\002\276\245B\001\277%2\330\275W\"\376\276\204\224\222\276\2706\236>!\022y\275SK\201>\343\227\266>\033\313\304>w\240\035?\003\334\323\2755\216@\277v(4>\013e%\277vXo?\253\345\006?\001\316\343>\222\241Y=\323\030C\276\"\353\327\276\333\016\301\276@\252\207\275\245\305;?\3433\033?\260sm\276\205\243\006\277\326\265!?\336p\262;6\371\342>\272X\013>\274i\033?\021\302\033\276f~\232>\024\237\361\275\344\217d>Cv\027\277\230r}?]\002I?\313\275\322=\250\214\275\276\336\342\317\275\031i\003\277*\275\\>*\346\225\276\273\317\020?\003\220\245\2756\340\267\275D\250\031>\227\260\207\276\305\004\330=,:5\277\'\017\020\275]*\352\276b\317\034?1\247\214= \002s\277\265\265\231>l=\201?-d?\277K\250E\274s&\220?\022\212\311>W\224\207\276rs\013\277\3478\266\275\215\314\350\275\257\352W?\351\356\331\274\315\333\223>\375\313\362\276\350\204\004>`l\031=\233t\340>\267\370\212>p\375\253\275|\222\021<\034\343\265>\341\231\025\277\032\327V?\3204\353>\217\315\306\276\324\251\340=\202\316\263\275Q\"\257\276\214\212 \276\3502v>z\262\326>\235\3538?\207\341\010\276_\273\006?\027\252\261=\342\027D>nU\277>,\300\264\276\006\325\302>}\273\337=\273\207;=\306\313$\274\343Vt?0\344\r=\316\261-\277\253\340\317=7*\030\275\215\0369?8\375\212\275\r\035\001>\362\314\324\276d\241\027\276+$\246\276\276\005\221>\t\307\r\277^\323\017>\221\'\225\276|\243\232>Qy\005?\254\360\021>Z\037\233>VC\334\2754]\330\276\315\034.\277\267\337\374>5(P\275\027\021F\276\315\2021>i\315P>\212L\005?\326o5?d\310\202\276\034f\014<\274\226\017>\203\375\367\275\312\256\230>\222\342P\276g\215w\275u\274g\277\017\213\325\275\343v\311=\\9\323=\250r1\277M\327\207\276\277\333\335=\211e\254;\007\357w>\ra\350=\t\344\215\276\372_F=\206I\326=\222$I\276\233\037\030?\214\335(=\270\317\n?\276\013\320\276\251\302\250>\254\367\302\276\033\321\271>\252\330!\277R\203\203\275\213\252\t\277\360K\214\276\276\204\305=\204\353\230<\031\263\253>\314\252\243><\243\271>\241\032\275>\375\336\022\276oh\001?a\244\353\276\000f\372=\243\230\344>N\310\371<\247@o?\357\245~>p\020\350\275\3462\362\274b}[\276),\220=1\302\200\276PjE\277\022\017\001\277\246T\334\276X\253\265<tl\036>-\r\030\2764\261\325>e\362L>\220b\377=\242\244\252\276\323\n\010?7Q\\>B\361\031?\206z\241;\305\306\322>\254\251\347\275iW\310\275\n\331\330>p(t<R\232\020>y}\202>F\3417?\213\237\215>[\366f?L\270\304\275\323\030\241>\362\355\214\275\030NJ>\014\002\021?\222\325m\275\205\324b>\341\026\220?\323T\023\300\201\237\206=O\342t=\205$\220\276Fp\025??N\377>\220\245\r\272\032\017\273>)z\323>#\370\022\276\311)\316>M\271\002?EI\230\275\256J\341\276\324\356\307>\277\327\033?\370\345j>\265j\202\275\237\005u\273\263\0240?w3\263\276\263\354E>%\323x>\265\r\232\277\325\246-\275\263\372\311\275[\231\000?m\027m>\273\375\205>W\304\005\276;\344\277>\357hr=\266ZK>q\000Y\276\237\2258?ne\240=\226\360:>\235th>?\337.\276\024\2376?W\251\254\2760\364\217\275\217\202\010\277W\217\333\276\312N\035\277\365K\201\276\337)\260>PZ\232\277\351\327\334\2755A\251\276H\204 \276J\362\242>\322\333\334\276\245\014%\277\343\307]\277\335\364\207\276\247\346\267\276h\272\023\276\375\234\362=\231\272\006=\354e[=\250\263\363\275?\247+\276\257\336A\274I}\277\275\005\347N=\002\340\006\277\330qp:p\335p>\310\310\345>\376\275\373>4\305\260\276G\034\013?H@k>j\276??\361<E\276\026%\300=\034SH\277An\323>\0013\321\276\000\2051\275\252\375\204\276\301\213Z>\213-4?+\'\370<\007\277\t>\223\331\303=>\320Y?\307\341\232\275f\333\004?\024E\177=A+%\2769[\272\276dC\213=w\272\271=\033\201\355\276~\n7=\256\312\264\275\216%\224\274Q\250<>|\2301>\213e\263\276\023\371\014\276\261\200\226>9y\346\276\230\222\323\274\246]\335\276\245\234\256\276\0063D\276\302\207\217\276\024\002\367\276U h?\3156\221\275\325\237\365<\266\004\212\276\337RF\2748\204\203>\224\335\302\276\235\252\344\274\261\332\367=\356\366\276>U\257\223\276\354\007\372=~\222\345\276\377\037\242\275w\235\034?VG#>\'\322\252?2\017\351\276"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\332\372\217>\213\017\301\274\274x7?\355\014(?\253\021\017>\325K\376\275\026\257\023?\351\023X\277"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "JX\214\276\001\300S>\202\221\376>\002\351%>\217\n\323\276d3\030?\005w3\276\246\277\006\277l~^\277\262\002M>\362\215\302>\354\025\365\276\016mU>\301\026;\276\250\217\001\277\2716P\277\201\223\245\276vr\223\2762\177\016\277\266\r&>\004\237B>\204\350\221>\rg\210\276z1\351\276Q\334\277>\235n\006?\373 \026=a\302|\276\230\214\010\277\202\370\322>\357\375\006\277\236\263\016\277\016\324\330\275\226\252\220\276\027j\305>Ns\307\276\3545\333\276\317K\254\276\260r\333\276;\220\226\277Kq\232\276hGq\276h\373\250\276z\240\343<U\200\216\276\207\226\361=V\177\203\276X}Y\277\210x\253>1f\241>\010v\032=\354\207\307>r+\000\277\375\234\306\276\355\325\230>W-\022\276B\033\215=,X\027>\334\253\305\276&=\317\276\230.\246\276\221\373\360\275\213\344\212\274\006\3602\277\336X\350\275\363\336\240>\376h$\276\t\343\375\276W\313\216\275\234b\013>\214j\010\276\275\2171\277"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.3780447244644165
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
