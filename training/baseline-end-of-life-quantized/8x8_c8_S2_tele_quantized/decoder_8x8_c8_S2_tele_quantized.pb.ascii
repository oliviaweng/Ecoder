node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\237\203k>\256\217\213\276\324\3717\274\251\3415\276\276Xg\277\352R/\2766]\352\275M#\r<\257\006\264\277rW[>\333\325j\275\204\201\005\277\020z\233\277\236\237\016\277\224C\304\276\341\350\005=\235\256\201\276P\r\304>p\322\317\276\311\303\343\276\317\340y\277\030\006{>\277?\244=\264\227\030=\313\372d?\343\272g\276Zdh\274\210*\257\275\3268\337\276\204\244\344>\346\277\232>\333\035\014>\020R\233\276\rW\261\275aSy\274\260\204y\2769!\205;\214\257=\277Yn\274\276\216\nW\275T\200w=\032i*>\r\263\210=\373\256\317=\365\223\200=\333\241\323=\344h@>\212\351\216\274\024\301\230?_T\007\277\332\322T?\331\357\372>1\006D\273\024\201\367\275\036\254\225>\370+\325\276\035\362\376\2750\257\034>.\276\305\276\342S\023?g=\213>\223},?Sc\243>\344#c>;k!\276<5\216>\374\343\037\276\275*-\277/\263<\276\365\205\003>~\031\025\277m\273\304>\005GY9\247)\002>\001\3364\274\030/\263\276\232\261\351\275/\r\240>5\264\224=\301\024\216\276\304_>\273N\273\220\276\006\243\234\276\223\247\213\273\237~/?\030\352\320>\272\276\016\276\336\303\337\276:\305\370\276_\224p\2774\373\212?\3704a?\265$F?w\003\317\277\202u{\277\373\373X>\254\274\021\276\024\004\t>_\036\215>\317\203\226\276\220\275\237\276\360\023<\2770S\317\276\306H5=@q@\300BM\367\274\212\332~>\037\310V\276\354cz\277\212[$\276\201i\315\275\271WF\276\227D\020<*\322\301>>`\007\276\352\213\330>\243fY\276\222WL\277\326\014\345>\250\210\t?hB9>\252\220\031>L-G\275T\252\024=`\270\037\276\032VM>4\323>\275$wF>b\256]\277\240D\001?\233\376\236=\257-\206\277lk\326>\247\307\001?\234\323\310\276qj\231\276U\240&\277\222\016\254=\001\025,\276\0045\'>\246\371\300?\371\216\376>B\201w\277\363\3152\275\202h\323=i\262\340;\236\3302\277k\006\004>\2478\246?\223Q\351\276\242\302\016>\370\232\217=\222\333\243\277G\346\020\275\263b\340\275\257M\005\277<8\t;<\207\243=\207\037?\277\021\0307\277\010\260k>\002\271\"=YX\000>B\373\275\276\001\007\276\275i]2>\307\014\t\276>\235\231>hi\300\274\0036\300=\003\301\014\277\027r\332>:s\007?d\006\202=\263!M\277\233\363\005?\275\005\256<\345\243\275=\014\237\276\276\273_\021\275[\025\350\275t\347.\276\355\321\350>\'\026n>\312\234\216=;`W>\245\377\343=\330\034\335\275\010\t\265\275[\264\032\277Ca1>\230<\341=r\222T\274F\335\301>@\236\351\276\356,8\276\235\272\244\276\016\264\003\276\257\305\336\276\037\277\024\277D\\\223\275\275\301J\275\020K\260?\257\344\343\275\233C\373\276\005\005\225>\231\353\331>\254\177\263\276\276vQ\275\357\224y\276\nk\337>&\321\273>\'X\000@\300\370v>\244`\342\273y/@\277x\3439>52\203\2768\212\204\277d\231O?of\037\277\267\241\344\276]\301v>\233(<\277\301+\363=aM\022>\354\266.\276\211o@<\323\323\313>\213@B>\213m\264>\352\344\277>?R#?_\302\252\276\263t\241\275\254\302\004>\256\003_\276ZZ]?\034\207\255>\226\005V\2761\3269>c\211\336\275\010\356j>\210\365(>\n\275\212=\336JV?\301\366\006\276}#<?7M\343\275\\\\F\276\352\2448>\351[\032\276P\225F\274dO\361=\304\314#\276HUH\275\346A\013?:\016\252=wI\224\276\360B\266=6;\321=\024\357\206>\351\323\203?\261\352,\276\000\3034=\021\210\257>x\367\254\275\300\035\005?\205\332\215>BA\351\275\021\374h?\231\330\343\276x}\254>.]\014\277\034Y\334\276\'\0349>|\205K><\r\373\275\013]M=\2760\216\275)9\023\277O\023\340\275\276\002`\276Q\364C\277\177k\253\276\347\372\302>j?<\276\302q\302\277=\344\"\277\026\264\022>.\365\222\275\321\343\274=\240\274g>\314Ex\277\nB\032\277\345\007c?^\226\333\275\2311p\275R\300\273=%\273!>6e\350\275EfQ>\306\345[\275b\306\211=\333}\357=\'\224\253\274\316\370x>d\235?>3\222\206\276x9\001>NL1>)\177\257>x\266\212=,\\\361>,GB>y\223\n>\262\274\n\276\021\355\003?\333[\335>\222`X>\020\301T\275Z\347P\276h\2146?\347=\374>%v=?\363\244\003>|\030\r>V\n\205=Z[\262=\035\263\005\276T\306\252\277\244]\255=\242\274\230>/mM=\306\320\027?\214\327\262=\335c\246=\371qm=F@*>\211e\246\276m/\010\300\243\262\311=k\306F\276X]\275\2747\321\330;\301\204v=n\233\236>\377\362\224?`m\\\277/\223\271\276\214j\305\276\177\320\035>\037Oi\276\377?\263\276\216\2421>\367\231\222\276\273|\277\275\034q>\276\207I\005?\302\267\311\275\313t\366>X\320B?\303\343i?\007\\\211\277\000l\207\276Srk\277I\005\235>\353Y\036>@Gd\277\355\364-?\320\202#\275\003\377\213?\206\273\235<\223\270_>.\2563?R\237C@\276H8\276P<8>\200\302o;\300}&<@\334Y<\257\252I\276x\317\010>\303\275\276\275\351g\333>\222\2742\277I\234\002?\254\000H?=\360:>C\320\202\2753\272\001\2774I\037?\020\303J>\013r,>\360hc>d\221(\277\234\024\246\276\376\267J>\035\370\250\277\360\205\265\276\356\343e\2772\342.?\303\253\300>\322\031\231\276}|%\276:C\310\274\346K\201?0\3415?\033\rE\277\377\237\367\274[\t&\277Y\207\247\2762\021L?\333\t\365\2758vT\273]\300\372\274\310\351\017\277>\366\025?!\023\322; \366\001\277O\272\223=\237\230\366\276T\261\340\276\320c\304\275\217\007\016?\\\244\001\275.Ku>\002\223\212>\037\260\326>p\302\241>\027\347\375>\272m\t?\373*\216\2761>w\276\373\003\317\275k\037\305>\266I\'=_\200\006>\022e\341=w4&\277\357#C\276EV\254\276\302DA>jB_>\016j(?YF\311>\356Y\272\2758\254\250\277G\221\255\276\210B\253>R1\'\2760\343\323>lh[\276\200\276\227>\'\342&\277\020\225\202\276\246\nB\276\n]\t\277\301\272Y>G?\310\276\214M\r\277\365\304\323=h\263\215>5\177\312<\026g\202\274\272g\240\275s\333U\277\264y\335=\376A\314\277\206\037C\277Q\262\325=XTL?\270\234?\277x\320\312\274\211\305\313=e0y\300\3064\030>\364\355\355\276;\020\262>x\t8?C|\016>x\370O\277\245\206\326>d~\363>\003\242\207>\314+\036?\335\210\017\276\350\017(\277H\271\026?\254\2615>\250\230\245\277\363\237\333\276/\'}\27655\026\277\3604\205\276\344%\014?\333\237i\276\346\336\340>\250\020\363=\370\232\203\277\205\013\217=\216\226\276>K\205\272\27571\"?<\275@>,\273+>P\003\013\275\350,\334=N\2357>\210\257\t\276\000\032|=\222\205\257\275\3035\031\277v\341\370>\006\265\354=I\341\375\277\177\247\353\275\322\355\264\276\263\237n?rA\004?\317j\316\276O\264\034>\3760a?\023\t\022=\023\'U\276\211\013\021\276\243n\250?\032\032\257>\027\366\024\275U}\020>SI\177?8.\331=3r\001\277\341\007a\276T\nJ\277h\245o?S\2171\277\243\266\227<\307/\257\275\030\211\360>%H\035>\230\3531>\252!\214>5PU?\361\344+=b\245{=\033\326\031\276(\336\226>\243\2321?MD\227?\366\333\037?4\0031?n\243+>\243\313\356\276\275(\363\276[\3311?;\245\236\275\224\233k>n\203\371>\350\304\245\276\013\022I\274\005\272\365<fR\031=]O-\276\2428+?\241\307?\276D\2125\276\003\354n\276=\246\027\274a\254?<\332u\036>\230\356\314\276\233V\262\276\214N\217\277\n\\\013\276\0012\305\275T\327\260>h\271\341\276~\007\320<}L\014?\231ex\275\355\310\177\273\252@\013\277e\323\203>hj\225=\224\324\020?6L\371\276\017\271\222\276\204\374\241>\306\200\362=\032\316d>\300\006\206?E\010\324>\036\357\\\275l\024\255\277\002ng>P\340\256\277\025\237\316>\354(\226\275`F-?\350!\222\275\211\n\326>\253#\322\275\210]\317\277\336!\257?\247w\210\277\326u\363<0C\216?\005\276N\276xi\322\275\3235\337\276G\300\010>\253\255o\274\306\036>>,\234\332>\333o\371=\367\375L?\232\377\030\277\211a6\276\030\035\026\276\3716\026>D\352\326\276\027\346\220>]\310\224\276\036_C\275A\025-<\325\223w\277\347\213\355=\345Wo\275]{\301\277Be ?\037\3162\277\206:\361\275P\211E\274F\354\n>\332n(>\304\301\332\275\036\2625>\030\020\020>\230_\275\274\020\213\203>\355\377\202?\027\004\332=\'\000\016\276\274\257^>[Q\205\275\313\005\267\2769_\300>\001f\241>\275\277$?#\027F>;\005\212\275\016F\223\300\"\376\301>\275\242E?>q\354>rWS\277\005\275 >K\256\016>\004x\251\275[\341\223=ne\335\276\270\2246?\261&\212>\3069\206=\025\234\221\274b!l>/Vv=Z\220\257\276\312 \277\275t\262\315\274X\023\233\276]\243\023?r+\006?\347`\316>\220\253\t?\3364H\276/\252\263\276\375\246\316>\017\036\322>\364\323\024>\325\354\245>\364\014\350>\304\177)?\022y\330\276H\2451\2768\342\375>\332\3171?F\245\230\277\333\360\344>\354\347\316\274\'\333\262=A\315\000\276D!\010\276}\336X?\r\251\347>\261:l=-\250\210=]\376\006=:\177\005=\200\tF\276\256}{\277\"\210\226>H\331\237\273\240\024\243>/\3501?|\020/>\222\203l?(\246\246?\031m\333\275k\302\255?Cu\003?Ig\026\276\005\245\255\277\270m\r?\245\'\024?\003\366\253\276Y\267\216=pW\206?\235\021=\277\274Bc\2761d\201?\013\222\017\277\222\353\343?\253\336Q\301\324?y?\322\340.=1\205J>V\2641\277\201\033\214?\343\031\370\276\275\032\240>7\235\215?\315D0\277]\322%=m=L?\365\027\360\275\017+c<\251H\t?fT7\277)F.?\030\300\233>xn\215?5\rj?\364\231\331?\207K\243?z\277^\275%\032\333\276\360m(?\255\022\232\277@5\204>]\331\025?\232\344n\277\257\235_?\327!\277\277\300\207\377?\216\325\260<\237\254\234\277\037,\362?Y\007g@*3\002>$\264\322=\\\357%>\344\'\006\276P\352\023\275@\026z\273\r\355\304\275\377lK\276c\006\005?*\233\373>\204\016a\275\216e7?\031\364\325\276Q\235\213=\260\213\271>>Zy\277<t\256>I\317\313>\021\341\250>\252;\227\276\"\303\002\277\264*;\277\3151B\276\261,\030?6\337\350\276m\217\235\276\305\253\367\2757W-?\273\267L\277^\211\232=o\257\377=\2062p>\326\346\223>\rhB\276\241\371\260>\006H\247\276fg\344\274<\305Z\276\3140,?l([\276t<d>\223\222\027>\n\006\203\276\261^*=\370!?\276BK\005?\032\301\222?<}\t?Y\375\020\276+\363\335\275_\276\235\276m\031\024>\321\327\307>\'x\003?)5E>\237\255\027\274zQ\256>\357\210\344\276\356#\266\276{\363\310>\213 ^\276)\354\026>\037p6\276\204\3058?\256#)\276G\201w?\276\031\026?\331\270.?\330\347\312\2773\315\323>\021O:?\301\301\352\276\333D\355\274mb0\276\327\221&\277\n|\201\2765`\300\276C\302@\276\274\345\253\276\310?\331>\205\221z\276\211\356\037?\205t\307<\025\376[\276{\241\037\276P\301\264>\370\246\263\276\373\014\320>\206\221z\275_a7?\227\240\302\275o\247*\276\261\202\235?l\312$\277\001\033\003\276z\312\016\276_-8?k%\257\276\340\177\230>P\014\027?5`\323\277e\030\030?#\"\221?\005\354R\277\210\335\202\275s%6\276\223$\326\277\202-r=\243\214x>)\340\t?-%\202?\361K\222\275}\0338\276\302#\220\2760\024N\277\300\217\264>\212\003\026?\300o\303>\336\345\217?\003 Z?\315\001\"?Cx<?!\322\275>\247\231\313\274\312\2317=\377\317\317>/\254\334\2760\010\253?\000\350\2129;\260J\276L~\007\276\372\371\025>\265\\J\276\310K\271=h$\010=X\0234=t\001W?q\250\223>\010gV\275\002\334d?\336\251\375=\205\251i>\021\313\000\276l\3556>\357\'\014?b}{\276n \020\274\002]@>\373\334n\277\317\363u>\237\274`>\244-\216>\204\r\233=U\257\004\276\252\036\r;\305\201\210\275u\303\017\2777M&\276L\243\037\277u\222\272=\361\322!\300\214\330H>\244\276\237>\177\211\374\275\316\252l\277\014^\342\275\321B\266=aim\276\377v\3159%S\251=\256\356\270\276I\237\275\276\213T\231=\353\002k\277%\3623=\226\343\013\275\336\310\301\275\010`\360>(\211\006?\334\212\234<\177}\013\277\2014\316\276.\037Z?\311\035\342\276\276\275\006\274\025\304\214>6\333#?\000\252Z>\010\t\273=\263\311g\276\024:D>\351b)>\316\025(\276\000\026\303>\204T\313\276N%w;m\3319\275\374\002\260>C\247V>Y\2773?\336\014\023\277\031\036(?&5\262\276X\016\204\277|\200\206\276qd@?\034\203\004>m-\307?\030\317v\276\332\302\220\275\342\332>?/\'\274: \377\231\274\250l\030?\n\324\232>\200(\010?\021:\216\2763\005\365>\003I\335\276U\024\263>&\327\030@\273\326\251\274\343x\266\275_\240\341\276\374\212\000\277\252\202\360>\346\364\242>;\261\302>\316\023\026\276v\306\333\276P\331\273\275p\002 =\231\335#\276\300\020\254\276\232\n\222>\262\030\004>\355\023\342\273V\201\026?rHf\275\2345\207\275cd\">\222\374\364\274\226\352\215\276\235c\362>!sF?G\032e?g\202\264=%v\352\276,\362\201><\322\337\276B\022\263?\232\023\001>\325`\306\273$\340\213\276\212I!>\353\264D?0\023\233=\260Lj\274\000( <\317<\253\275\340\'V\275\246\333\022\276(\271\302<b\245\024>\331\311\356=,ii9w\227\234\276Q5K\277\023$r\276U\322!\275\247\031\233=\277\311\321>x\326g\277Y\320\321\275\354\323\304\274\231\205\304;\017\330\304\2764\221\333=\370\230t\2754\272\310\276\331\233\205<nV\206\276\234\034\025?\032\036,?{5\333<I\310R>Y\353\003?\245\214\374>\363\272\205?\2367\004\277 \257\243\275g\007\367\276\343\360-?u{\270\276\363\246\004\276\023\220[\277\231\220\211\2767\206|=\352\311\253\276\365\352S\276\tJ>\275\266\213\323\276\325\334\t>U\240\033>S\252\200\275\370\3068>za<>\326\001\t\274r\004\250\276\005ry=\316\303\317>N\362\206\276\245Q\204\277\275^K?K\345\222\276\023\361P\276\300T{\277QJ\310\275\327\353\"\277\342\371\265>\205D\030\276\247\210$\276\353\326t>y\341\366=\217l)=h\267\344<\007\242\373>|\352\327<~\342k\277\321g\377>\312\211\244>n\034\036\275\276\252\311>\272\247B\276\213 5?\235\301\301>\236\232Z\276}\365E\277x\333\026>\277\r\353>l=\033\276\026s\266\276\205\343\033>\005\200\355>\365\314\023\277aI#?<+n?h\266L\275\261\002~\277\032\211\275>eC\313\275T\227\275>_b{?;8\301\276\347Y\032\2772\202*?j\335\004\277`\267\242?\017t3\276\315~\220\277\233\266p=\346?\323\276f(\357\276F\351\016\277_]1\275\327\264\213>\303\300\366>\024*\005\277\266.\236?\016\220\224>\321\206\230\276\216\203y>A\372\030?z\303\345>\020\351R?\3432u>\306\021\236=\215\322\244\2763\302\360?\272\001\200\277\302\275b\276\275\305\344>\302?\020\277[\341\260=\220\301\312=\312\243G\276F\341\000>\354JV\275\364\315\013=*X\007>\234\3358\2761i1\276\331H\006>\247\362\363>\030\2645\276J2\024=\377\363\352=\372\372M>\361\200\314=\235dZ>\267\360\034\275\302uH>\261N\213=\242\331H?\226\375y?\277H??\345\260\325>\003\344\204\276I\013\010?ai\253\276z\037+>`\301\227>\302\225\215?\362\211\324\276\362c_\276\356\224\223=\203\226\237?\322\216\026\275&15?\032o\367>\3610\247>A\253\034\275\343s\257\276\262G\201>DZ\273= \347\004>$D\031>\277\014x\276Zu\250<D\344&\277\026\343\273<\204\277\225=\343a\311\276w\374h\275\217\3546\275Z\234\325\276H5\261\276\270\231k\277\035*\251>TK\021>N\263%\277d\230}<\225\034\247=\016=\305\276D\342\032?\270l]\276\227\001\204?\202G\363\275@x&>s\363\321>R|^\276$f\240\276\013\026/<SN\n\277\2737e\277\002\241\221\276\331{\201=\344\030+\2765\ny\277\205\007\352\275\360\331I\276\301\306\322>\r=\303\274\014\354\234>\307\036\230=\367\361\025>\311\332K\277\373\002\243\276\252\025\317=\232\201.\276y\244\024?\204\301\'?\235\276\014?\277\233\326>\250=\215\2776\222\332\2753\226\250\277\260mm\277D\233\034=\301\2312?)\311v?\225\232n>\220\3266=\356^K\300\021\032\230\277O\316\305\277z${?\300\227\305?mv\346\275\370\267+\277{\236r<\354ku?l5+>B\t}?\264\347\316>\304\324J\276\002\353?\2774\364U?A\365\016\300U\336,\2755>\251=\216\244\324\276\004\203k\2775@\335=\034\210\242>Z\332~?1A%\277\220\245*\277\320\300\023\276w\300\t?\034\356L?\273R\014?\020\260\006>(\006\240=\247\276\344\275\032q\007\276 \321(>\244\307 =\000\301\322=:\200*>\322J1>\006\245\311>\013\004>\275n>U\277\025\313]\2772\271C\276\242\345\243=\234\276\032>C\035\003\300\237\2661>\277\274*=\031\003=\276z\212W>\261\335\242=\335*\">\300D\340=\267g\177\275\213\327\375<Hph=\216B,\2759 9=<\335B=\'U0>w\240\267\275\205\035\247\277\3155^\276\230(u>\354\301G=\033*>\275\377[\226\275Zvt>\n\315\214>\32514>=.\267>^a]=\354}\302<f\2619\275H\352\255\276]\177\313=\2626\245>x\031\244<\274\373C>n\016\207<\373x(>\363\323\207=\333\'/<\204\004\232<\370\350\221\275\033D&\276\341\2100=\221\021\030>\024w\213=V/\035\276\r\223\021\274\277\377\023\276\355\200\000\275\002\261`\276\252\366\022>\322\314>>\350\016\024>\241\203-;\373|\027>R\003\204\276\202\0346\276,\'\247>\306\003/=x\264x>\260K\025\275\236HF>\362\013\240>\303\341k>k/[>C\302O\276\317x\372=\035\221\251>R\211,=\321\200\007>\313I\232>\236\200\301<[\032F\274\037\023\020={+0\2765\343H=l4N?\246\334\232?\266\2737?\031\334\t\276\2016\324\2762I)>\252&\022\277\0314\242\275\224b\252\276\363\r\035>jr\006?N\322$\2764\276\003?\304v\213\2749\323R>t\347E;\255\356}>\337\255\256>\342t\335\272\337p\232\275SST>\361\352\014?\366\032j=\303|$?\234\223B\275)\201P>\3313\177>k\177\307=\262\263\002><\214\222\276\354\"\251\276\'\300\365>\354\nH>\002\225\"\276 \032\343;\027K\261=!\330\330>\244\315\251=@f\265\274\004e\253=0\326\376=F\'\036>\326\rA>\304\200\021\276\024>E\276C\275\315:\354la?X\277\344>\315\257\215\277\022G\203?|\366:?.\316=\276\221\337\322;\222m\355>\025s\243\276F\016\372=\303_\373=\2716)?\001\032\377>$n\223>\005\310\026?\323\302\025?\242KU=\316\201\310\273\033\322/>\201\230\312\275\370\206J>\014V\003=\252\271\377\276\256lJ?\261)\037=\204R8?\324\241m>\246\377\301=\316\233\335\276J\006&>\333\022\227>5c8\275\035\036\275>\025\230T\277#\255\025\277\330\215D>\202\242\351\276B?1>\325\r\261>\034-\023?\357s\036>Dm\227>9\003\023?\225\304{<[\263<>\254\016\021?\201\277\202>\343\246\264>o|\'\276!\237\027\277\311\202\343<\211?\267\275b\323c\274\322\234\031\2775\307U>B+\037\276\020\023\325>\251R\350>\232\243\327\276\032\034\002\277oe6\277\2747\227>c\266\362>\320K>\275v\330\036?\\O\300=\362\022\022\276\375y\260=l\211\000>\r\275U>G\233\004?\027f<\275\001\010\364\275h\231G>\246\224k\275\242\216\220=L\330J>\245\243\356>fk\376<\023\367d\276\337\n\t?\3057\264>\212\321\010>Bu@\277\306\322\201>4\346\264\274bU\000=\262\342Z?^9\346=\324W\233\274P\273\024@\243l\325?\365F}?\241\317\357\276^\375\216\276\347\213;\275E\"\226<\007\324\226>\367\312\341\276VZW\276|\265Q\277\256\020\305\276.\030#?[\212\223\277\352\244\236=\024\'\234?\210#\273>\323\0332\277n\301\025\276E\212\302<\351\366\205=\373\256/>V\272Q\277\215\021t\277\353x\353:\301\035\002<\337\024\245\276A\332\020\276\265\241\016\277l\315\024\276 A8>\302q\241\275@\021w=\211\232D\276j\326\007>\340\335\312\274\224\310\321\275\350m\206>\354\265\236>Qs\371=\377\275#?\014\263\\\275\006\251\177>\235\302\316\276\234\233\375\276i\224\225\276\324X}={\340\341\276\360\306\306\275\201#\n\276\325\023\036\276\22541\276\023\344\210>\307\321\036\276\003\3323>\230\027V\276\304A\256\276\353\312\t\277\223\227I>\306\026a>\324\014\177\277\222\2220\277\324r\242=\275\020\326>\\\322\'?%g\014\276e#\023\277\3238\027?\243\274!?\032\207\003>\341E\364\275\214\356P\276\006\335\030\276\272*\007\277A\2246\277\325\t\033\274\313\200\353\276X\262\275=:\316<\275\325\202\345>iI\377\276\377b\207\275\024\340\005\277\034r1>\004\226\005?7P1\276R<\364\276\031\2564\277\351\337t\276\245\320\255>\'\021Y\276{p\260\276\331\000\306=\265e\005\276\017<C>S_\364\275f\257%\275\025\223\265\276.\257>\277\267\234\033\277\031\364\377\273\222\350*?\213\271Y\275\005\3446>W\205\206?U\021\261>=,\224>\356\353-?\311\342A\276~\263G\276\276\230\324>\212@\316\276j\304N<\022]\375>\237\010\275=\373S\224\274\374t9\277\034\025\310=\'\3176?\312\342q=;\255V=T\254\357\277\203-\225\276+\346\236<\006\205?>\0063\356=\237\322\332\275o\203\254\275Ksj\276*j\253>\035\3144?\010\003\256=\343CQ>E)J\276ip{\276Md\221>W\262\327>E\274H>\223!\215=\371\027,\277\317\364\323>B\t,@\344+\350>ba\277?Y\014\227>\nc\033>M\003J\277\026\025\031\277\254;(?\004sD=\303\000\250\276\3013\326\277\250=\207>.en=3Z\221\276\355,\357\276\237O\202\277\262\325D><\"\336\275d\375\346=\254\366b\275P\016\315<\010\300\244<\212\365?\276b\337#>$S\300>Qh\032>/\221@>c\333\"?h\003c>\0163\203\276H\013\223\276\255\250\330>\261\376\227?B\211\203=[Q\212\2765j3=\023\216\336\276\014c\031?\377\033\270>q\233P>\237\260\367=\t\005\275>h\321\017\276\204Y-><3\314>{\\N\275\224\236\325=S\241\236\274j\272\276?\'<\212\2764d\020?\267\002\221>^\230W\276\n#\231>R\227\326\276\376\230%>\340=)?O\324u;\337u\312>\205\350\026?m\216U\276\221\207e?\315\3450=\300&\242\276y\n!\276\312\020U>\243\257!>\347\366\035>\177\225\354;\350p/>\206R\271\276Z\355\207\276qU\351>C\"\245>Hr\250>\363\347\226>\272\361\270=\366\255e\276H\236\267>O\2226\275SC\376\275j\200\022\275\031\300\000=vT\227>\236\211\215>dc?>\361\032\010?\350\2673?\233j{\276\336v\234\275\323[\236>A\221j<\'# ?\0267\024\277X\305\246>_u\216\276p\2451\275\243\3109>\202\206\363\275E7&>\217 \270=\371\362\370<gy\302\276\264P\232\276\230#\325\275y\014\304=\013\033\007?3\353\237>t\024\265>\205\020.\276\300\233l\276(\362\312>\340^\364\276\213\262\342\276\020\300\363>(\306\365?\306\340\276\276\375h\320=\201\300V\276;\375\200\276^\255\262\275\245\223}?2\225\211=s\350\016\276u\277\325>\004\324\025\276F\247,>9\201!>\231\253w\277\215ZY=e\266\275<s\027\026>\235x\005\275A\304\206>(\220\263>\032P\276\276e\271n>\014j/\276\346wM?\226D\232=c\033\203\276pb\237>Ah@>o\372\314=\004B\317\275$ w\275g;#\276\240\331\214<8}\356<\320\342\032\2760\335v=L\023\362=\224q\311=\233g\247>\227\2170\276\024\037\255?\347\031\032\276>\233\266\276\222+\276\275\373\356\t\277:\245\263>\377\355\242>\310Z&?J:%?n\301u\2744h\024\275\0312,\277\340\237J\277\225\257B\276\031\211\037>\223\016\232\276\3043\207\276?\022\003\277\215]\023?\005\355\023\276\320z-?|\006\204>\224J\276\274\357\364\326>q.\025\276r\331k>\242F\004\2769@\025?\373)\336\276\353\376\"\275\304\027W\277+\322\302>\304\343Q\274b\216@>\317\252\342\275r\377\023\276t\232\032?\304\'`\2760\352j\276c\246\221\277\rV\317=\232\315\313\275\310\227\"\277\223{=?\364\300 ?\317\332\017\275,\331\004?\021\277\245<\032\310\017=Ni\312\274\264>*\276\312J,?\002\2067>\366G\005\276\004\370\236\276n\211\317=\353\364Y>:B\032?\363\370\t?\322\367\245\275\243\211\n\274Re\227>\275\344\302>\221\360u\276\007xW=6P\016>\2455\354=\372\027_\277\007\342\333>_,\337=jE\317=l\211\246>u\"\320\276\376\340\363>\230(\302>R\264\271?x=f?u\377\235>\277\347O\277e\030\206>e\204D\276\235d\254>\254\267\017?i\200\r>\004\356*\277\033\261&\276\204\020B\275\026_\004>r\266\303?\250\270k?\213eo>\216\236H?\302\232F\277\373kR\276x\376C\276]\370\213\276{\017\227\276\016l\201\275\200\230\226\276=\2042?\003\245F?J\215\021\276mt\232>N\305\321>\255\223\323>\347H\034\277\036\331\020>\344n\222>\376+\336<\312\300\005>t\322O\276\342\364\360\277f6)>\360j\373\274\375\243 \277\025\231\337>OH\206\277\370\374\343=XE\020>\341Q\311\275\022\377\007> \303\003<\\o\204\275\000j\334\273\344\245\337\275\025\272.<\326\014c>3\337y\275\014x\233><C\367=LX\372\275P\027\340<\277\320\002\276F\206\267>q]\332\275\227\346p;\000#k=\230W\331>U\203~>\376\304\275=Y3\026\276v@`\276\005\353\003\273r\356e>|z\010>\n\034u>\322\203\r>\025S\374<\301\tH\276\300\206\034\300\002\006\257=\342+\027\276qN\017\275\036\273\030>+\001\023\277\274\362\276>\301\237 \276\363\266\355>\301G\r\275L]\310=\342\214\244>8\303\233\275\0331\017?y\311\026>\322\3265=\013Q2\276I\010\311\275\350\375\222\276\303&X<>\030E\274\343\270\233\275\314C\263\276\337|7\276\324\317\257\277\340j\010?\327\2055\277\345w\033\277\223\302\347\276\223\337P\276\017K(\277Q\257\006?+\020%=\325\340X\276w}\010>7\306\301<\256\241z\276WX\231\276\036\177\376\276\256C\323\276\0003&>\t\025\227\276p\2310=\246\233\266\276)\372\226><\312\022\277\205\002\206>o\023\230\276f\223:\276\352\365T>,\236x\277\032\247\223> \332\256=\020\275\271\276W\003}\276\217:%=\232\200X>\306\007\264>\222R\r?\3753U\275&U\312\277P\022A\277\001\305Z\276\250$\262>\265\2548\276\021\221e?\243\031\222\276\371\377\200\277O\220u\277\006L\034@\245\330~? \010\301>\202\241\346\275bg\030?\364\322\330\276\230Bl\276s\032\265\275\317\003\037\277\213r\376>8\211a=\275\033.\300\232\237\273>ycF\277h\305]=1k\234\276\000\033\224\276g\201\237\275m7\217>q\232\377=\373q\262>\232\335<\274\016\300\"\276G\017\261=\217@\316>\366\372\004<\207\021}>\310\376\353=@\211~\273uI@\276\270k{=\340\222\017\276\306W\t\2768\014\336=\242\234\'>"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\245\300\t?\n\235\307\275dn\313>\026\020;?\362<k>sX*\274\377D\212\274\255\0060?\235Tl?\254\270\307\275GCz\274OW\021>x\t\306\276\034\362\022?\314>\201>\320\202\212\275\275\'\203=)\007\216;\3509\001>\263\261;>V\276\026?x5\025\275\330\232\036<k\326\026\276\256\336\254?\324NH\275\312\0149>\372VY>\207W\212>@\316\023?|\275\035\276Y<\302\275\320\243\344>\243\022\244<y\211\'?\'\2203?\203j\207:\035\311m?F\230m>mN\327\276\022RN\275\343\r\034=f\206\221>\rc\301>\313\366S>R\'[>\370\'5\277|Y\'\276\014\206\'?\257\323\211<&H\033?;\246\025?*\001\016>\003\033@\275\346\205\271>\364\227\261\274J:\253\274xO\361\275\356\263\r>\311\302\307>\201E\006?\361%\377>\356\312\014?\272\366\'?\207\302\223\275\363\017T\276>@*?\354\377\253<\025\266\377>\220I@\277\323\340|>i\354\265\276\300\242p\275\316\263V>y#\364\275\230\001\274>lJ\016=\210\214r>\262\351\345\276b\262\217\276\364_@\275\0378\006\276#\300c?\346\303\">F\341\301>\371~\267=\025$\372\274\375\354/\275\371\271H\276\370u\001\277k\004%?w\313\002@\254w\247\276_$D>\272_C\276\013\223\207\276\021\275\001\275C{P?\355\260y>z\354==\r\000\010?\250\036\234\276\272g{\275\333\203;>\006P\212\277\364\301M<RoP=\272\005\372=\245(\332=T5\341>o\370\233>\371\034\016\277\365Y{=\311\r\302\275\022\337J?\203\261\250>r\213e\275Q\'\036>\366\314\210=\327*P>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_dense_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/de_dense_final/MatMul"
  input: "decoder/de_dense_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/de_dense_final/Relu"
  op: "Relu"
  input: "decoder/de_dense_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/de_reshape/Shape"
  op: "Shape"
  input: "decoder/de_dense_final/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/de_reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/de_reshape/Shape"
  input: "decoder/de_reshape/strided_slice/stack"
  input: "decoder/de_reshape/strided_slice/stack_1"
  input: "decoder/de_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/de_reshape/strided_slice"
  input: "decoder/de_reshape/Reshape/shape/1"
  input: "decoder/de_reshape/Reshape/shape/2"
  input: "decoder/de_reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/de_reshape/Reshape"
  op: "Reshape"
  input: "decoder/de_dense_final/Relu"
  input: "decoder/de_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Shape"
  op: "Shape"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2D_t_0/Shape"
  input: "decoder/conv2D_t_0/strided_slice/stack"
  input: "decoder/conv2D_t_0/strided_slice/stack_1"
  input: "decoder/conv2D_t_0/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/stack"
  op: "Pack"
  input: "decoder/conv2D_t_0/strided_slice"
  input: "decoder/conv2D_t_0/stack/1"
  input: "decoder/conv2D_t_0/stack/2"
  input: "decoder/conv2D_t_0/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\032\023>?\223\254\247;\343\350\036<[\302\010>p\200@=\236\346\271>\252Q\010=U\330F\274\336\303\314>[&\322>\273J}\276-\245\275\273@\005&=j\272\r?\366\021\271\274\321\207\327\276\021\240\022?\232\243L=\217I\031?\235\221\224\276_z\365>\200\213\031=\n\232V\276\374\346Q\276r\017N?cy6>5?\337>\253%\203>E\236\007?^q\032?\335\007;\276:\213?\276Y\247\230\276\367\005\010?v\205]\275U\330k\276\270\014\315\276\006l\257\276\363\341m?R\364\205\275\272\022\206=_\213\214\274\235RI\275$\371\260=Q\007\323>\261\023\001?k*\242\275{J\233<\364\227\360=g\006\313\276\320\305\210>\360\351@=\317x\255\2765\020\330>r\315\264=r\r\032?\317\246\364>\265p\\>\334d\\=\347\222>\276f\217\007\276\271Z\253>l_c>\316\247\204>\213In?\034\227\022\277t\250\033?\315\245\030?\254\315\260>4\031\224>\241S\340>n\254\005\277\023W\005\276Z\372W>\346\020\202>p\004\037?\013`^\275\274~\264>\333\300\224>V\207\224\276\242lC\2771mN\274q,\027?\325u\031\276 \356\305\275\2424\021\276\355\365\025\276\306v\323>\"\261p?\277\357<\276\320b\354>\326\177\325=f\246\266>\213\000\313>h\013B\2766>\200\277`\374\226>\342\324\236>`&n>\220\377\256>M\262\017>\331\005\325<\220\030-<\016\335\314>\337\005J>x\301\304>]\325\216>\300\'\376\274n\022\034?\346\243\006?mi%\276/\225\217\276\014)\353>\216\236\t\277\213\340s\276D\226\030?\267\217\270\276\2338\033>cF\214>ew;?\267\320\202\276\025\244\323>\037\356!?#\272Q\275\020 \366<Op\323\275h\317\346\272\372\350H\276\213\333\361>\247VY>\327w\014>\343\371T>\312\317F>\300\r!>X0p\276\246\370\304\275\177\256\325\276\035\307\201=\261\341l?\341\370\010?<;\372> :\227\276\201)^\274\225\215\024\276]*\354\276v\256\256\274\234\014\350>&R\251\276j\036\232\276t\3753>\265<\304\276@\216\332\276]\354\305>\267X\026>^\245\254\276\352\227\306\274\201O\363\273+\204\005?2\275\362=\223\251\340\274\033JR>\266c\305>\312cI>\202\202\204>#\014\224\274gK;\276\217\363\367>\311\335\2638\314a7<\023]\343>\241o\024\2763\256\265=\270z\253>\\\326\270\276\372m\327>\312ON\276\021\205-\277\375m\262\273a\266\222>\322\245O>\005\271\266\276\236\344\013>\367\205\325>jX\022\276\360\210D\276D\255-\276\2545x=}!\333<M\336\230\276\364\267l\276\304\030\2479\013\020\346>\234[\266\276\2308*\276\306\223\372>\372/1?\022\344-?\336\2677?%\034v>M4#>\020\200\267>l9\017\275\223b\220>@8\202\274H\221\004?a\317\232\276_\265\n>\035\305\220\274\3014\003\275\225E\254\274YB[>\033\231\347>\211\235\213=\031\005\247>\307\373:\275+[g>\0130\322>\362mv\277x\217\344>\347\362\212>\3742\235<T\266\247>5\333\211>a\253\000?\353\234\201\2767\037\005?_\363\362=\371N\375\276\272\021\\>+\323\304=\247`\207>\334\3351?;\262\221\275\330\244 \275\251\250\006\276\254<\002?\306\355\352\276#f\241>:j\203?\'70\276\364\212S?\343\035\020=S\335\276\275\004\204\251=\226\002\005?.\222\003>^5\332\276\226U\212>%\327\204\275\224\232\216\275z8M\276\227}\346<\263@\331>!\215\305\276.=\233\276W<\314>\216\214\310>\t3\017>k\017\367\275\035\2612?\000\372\222=l/\354\274[\334\007\274\334\020\232\275\\I\347>\351l{\274\363\347\341\274\346\316\333>\331 )?\320R\034\273A\014\306<\367\223d\275:\256\021?,\376\362\276\310\002\321:s\3244>\277\342\006\276\344\214,\276\324\017\006?W\037\202>\335\356U?t\370\373\276\207\310\235>\240\355\264>\370f\003?\336qe\272\314\232p>\320\306\034\277\304a\273<\367^\247>\030\232e>u$\010?\203\030}=\"V\331=\343\030}\276\321\265\277>\354\321\354\2764\243\002?\226\300 >\336\311X>Qy\344\275\247\006\212>\300L\032\276\251\230\302>0\325\t?\037A:\276%\313v>5\356\346>\2119!>\331d\350>\324\334E>\235\364\366>\210kF>RU\013>\361N\244\276\271\326\315>\335LN?\365e\250\274s\222\023\275\340\324\025\276k\325\320<\345AM\277\002\326\247\275\346?\321\276\"?\003\277\362w\237=\274\017\222\275%aJ\275\220\257\027>6CD>\345\360\024>d1A>L\207\261\275*\030\237>\003\014v>|M\364<<%\342\276\",\014>\374\265\202\276\312\372\317>\245w\202>s\2559?\205\032\274>\336Y\205\276\031\377\362\274\350\334\220\276M\372\256>7@\364>k\303\211\2761I\231=\255U\333\276\222\272\234\274B\230\314>\231\267b\275n\2175\276\347\356\323\275oQ\254>\021f\214\276\216\274\026?\340\021\366>V\003N\276\357t:\276=\201.\276\231\325\006>hK0\276Z\205\311>\224-\252<\310\371\352\275t\272\325=\357\255~>\217\323\246=\216\225\321=7q\230?\202\3438\2766?\347>\321\177\217=\301\210\210\275%y\010?\n[\376\275\034\370\306\276\312\317\320<\345\236\345>\277\222\367\275Qt\270=\326\263\365>\035\022\223\276\201\336(>\217}l\275A8\022?_\2261\276`#\257\275\"\035\372>0*\006\276U\277M\275\016\036\331>\232\271R\276\364\362\375=\353\037\254>\321t\332>P\217(=\377+E>A|I\276\341b\200>\275\263=\276\220\260\031?M\204\305>\236\000P?\"c\376>\332\311\313>\307\325\235=;\'+>Z\250(>j\001\232>\275(\276\275\013\241w=0\002\005\275\244\252i\275\\W\354=1#*\276\337\241\214\276\235\001\262<\313\272\364\275@JS>\210\344\230>!)\340>&\027\205\276\376\302Z\276i\325\\>)^\311>[\302\362>\377V\241=-\2169\276J|\211?\200\245\035\277\232\323\377\275\327\003\027>\200Pq?\202\203\373=kD\265\276\006\006<>\234O\324\276K\310\213\275\203\275\350\276\217\234\t\277K\235w\276\207\210q\276\307\002p>o]\006\276X\247l?\234s5\277\335\n\014\276\362\221\035>U\341\217>\236U\374\275k\321\241=H\034\212>\255\262\024\276\321\200\036>\033\340\000>wZ\032\276\261\262\227>u\0063\276F\226\002=x\031\020\275\255\371\332\276\024n\033?\357L\037\276\340\211M\276\333\211\022\277]Q\034\276|\375\010\276Nxc>B\315\324>\232\364 \277R\200\022?\000\223=>:6\221>\276\267\256\273\327\362\304>\223\262\253>\236\342\204<\252\236\236>\312_\326<dE9\276f\006\247>\221\013p\276\207\260\266>)\350\010\277\376\240\270>\254\226<>\352M\254\275\316\240w>\020\272\001>\001@\301=\327\260\375\275G\355\343\274\263Y\300>\022\332\n\277\225kJ\274\272X\364=y\000%=\021\363\034\276L\210\026\276D\007{=&\030B\276\232\235\224>soU>\377xe\277\352\357\224\275R\024\240\275Y\263!?\207\023m=\256\241\236>\235\347><\273\373.\276\340\027W\276\361\211\352;\335[\335\276{\332\211\272X\020\262\275\247R\256>>\236\253\275\271\220\035?j\332>\276\306~\301\276ho\225\276\352\373\232>\264\204\"\277\242\202N\276\'\313G=!\250\200\276\250\370A>:k\275\274\273\366\261=*\006B=u\263z>3Y\027\275&\2152>\337\316\366\276v\363t=\266\024\014>X>\256;\277:\321\274\211\267\337=ai\231>\232\215\371\274\346\037y\276\275\227\277\2730\375#=\222\240\320\275\247#\262>\236\000\222\275\276-\305\276B\000\300>\251\370\202\276A\252\307=\363\346\202\276yL\306>d3+\275\241\377\227\276~e\335<\220I\027>\tE.>\337\\\032\274\362q\322\275/\037\264\274\2051@\2763\220\373\276\243\201\260\276\220i\007=\242$j?\360Q\\>\200\210\271>zJ\300\275*\274X\275\300\262\010?"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2D_t_0/stack"
  input: "decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "decoder/de_reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\002!>>\t\262\206=\027\352\030=\321\362+=\374E\251\276\376/\365=\"\374,>\306\345\004>"
      }
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2D_t_0/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2D_t_0/conv2d_transpose"
  input: "decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2D_t_0/Relu"
  op: "Relu"
  input: "decoder/conv2D_t_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/Shape"
  op: "Shape"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_t_final/Shape"
  input: "decoder/conv2d_t_final/strided_slice/stack"
  input: "decoder/conv2d_t_final/strided_slice/stack_1"
  input: "decoder/conv2d_t_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/stack"
  op: "Pack"
  input: "decoder/conv2d_t_final/strided_slice"
  input: "decoder/conv2d_t_final/stack/1"
  input: "decoder/conv2d_t_final/stack/2"
  input: "decoder/conv2d_t_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\270\303\223\274+E\214>\204\244\366\276\275\244u\274\317\016b\275\230\327\001?\270s\036\276\t\023)\276:\034\231\276\210>\017\276\211a\210\276\023\007p\276O\034 ?\251\245\034\276\366\'\360\275\271\013\232\276I\307\346=fq\215\274~\232\365\274&\335\262\276{\206\267>C$\370=\256C5?U10\276\036Y\004\276@D\204\276b3z=a\347\323\274M\204\244>$G\320\275|h\t\277\006F <Lh\r\277\321\326\251\276\317\016\343\27698\226\276\003\336\256\276\343\326\001\277\271\217p\275\363rd\275&t\234\276P\340\332\276~cf=\006\026{\276JT\333=\236*<=\342\220\004=\205>U\276\243\202;\276\376\274\003>ke\315\275\342\251\336\276\234\365\302>K\312\235>\313H\312\275<\253\024?\222\222u\275\225O\354>W\207\'=\222\246^\276\237\365;>\024\363I\276\356g\r\276\034\345g\276Mf\003>=Zl>\356j\230\276vW\342\275\016\006\314\276\217\314&\2762\\)\276\302\006(\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_t_final/stack"
  input: "decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2D_t_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.4298379719257355
      }
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_t_final/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_t_final/conv2d_transpose"
  input: "decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_t_final/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2D_t_0/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2D_t_0/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_t_final/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_t_final/conv2d_transpose/ReadVariableOp"
  input: "^decoder/de_dense_final/BiasAdd/ReadVariableOp"
  input: "^decoder/de_dense_final/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
