node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "6MQ\277\305\3667=\000\241\364>k\317\266\276\321\204h>\236:{\274\013\256\327=\305B\361\276\024\334G?\376\017\372>\\X\237>!\006 >\016\215\331\275\376\330\306\275`\035s\276\226\270o?\"0\344>\246\201<?\016\314 ?\221\3006\275b\2274?\326\217\353=\371\031\220\276|\006\240?Q\241\016?\240\271\221\277\301P\n\276?\024\345?Z\357\r\275\314\202\331=\362\037\237\276\373\375\221<\316\236\321\276\263\235\335\275\000\206z\2772\237\r?f_\307=\036zK?`H\254\277A\3312\276{]\r?\242\023\360=\002\340\231\275\355\247\r?4\263\247\275\217#\010\276\206\333\006?\354\n\235>y|\004\275C\325,>+\023&\274H\243\242\275m\374\247\275\243\362\374\275\225\2679\276\354M\032\276\272v\365>\254=v\276\025\373\333\276\240\206\324>\034m\225?\213\257\305?\224\320\321=d\331`\276\211\206\350=(\323\002\275\304T\232?Y\304`\277\177qQ\276\216\274\234\275|\353?\277O\211\203?\201)\254\276\204\254\310>v7\241\277;\363\265\277\023\243\332=\200\256G?\270\313\235\275\222\331\232>\307\323\307?\231\013\353\276G\300\236>\025\233\353\277g\'L?vN\220>%\002\n?\3746\004=<\372\037?\210N\357?j\233\031@\024\033\313\277<#x\276k\240\210>\361\204\335?%\020\341?5\254%\277\304@\257>\266\023\271\276\246\213B>X(\301\276\311\037\031>\005\300\245>\010\303p\276\373\202\336\277\021a<?X*[\277\246\005\303\274\322\000\204\277>t\000>9\302\005\277\315ha=\022\222\004\277\021o-\277W\260\367\276\212\242\372>\022SW\277\335-\035=0)\201?\014\362\031\277\314\3322\276 w\311=\310\237\235<\300\244N;\244CO>\204\025\300=D\362\360=h\372L\275\223#\001\276\301\346\232>\350\216\336?}\034\241?\005gJ\277vH\363\275F\"\265\275Z\243\006>\372\330\252\276\004\274&\275\245D\034\275.\000\264=;\314\227=\233\263\010\276\373\244\273>\346\233\360=\251\324\271\274\242\261!=\222\267L?q\373\274>\261\217\206?\340Q\234={a\275=\354nI?/ *\275i\212\374=\371nK\276wA\373>o\2728\276(\243\031=\266\023^\276=\373\t\274\251\375\216\277x\366\314\276\217J\272>\036\217\032\300\244\211F\276G[\321\276\303z\005\277;2\375\277\257\342\034\276AJ\377\276\025=\322;\220\213\244>\226$\247\275\221\316f\276\270\3121\2766\302f?\0043\322<\345\203\177>\357L\036\276\275\032\224<\323\325&\276K>\372<(\014\306\275\347\2465\275\230\361\321=j\321q\2760H\003\277\275\326>>\373\037\321>\217\023\005?\362\202v\276\263\225\220?\362\3643\276\340s\032\274Iu\177>k\262\007?ox\227\274[/\215\275\367V\362>S7\003?\373\021+?hv!?\320S\020>E\312\032\277\001k\032\276 37\277\007L\377>\235s\244>{\321\371\275I\3305\277\216\004\025?\247\340\216?\346\300\n?\277]\247:0\316\005?\332L\'\276#\004\275>\0141*?k\\*=z\357\255\276\324HF\273\363p\271\276\0143\274\276\274\003\027\277\031\274\353=\234;\200\277\223\227\276>\013D\213\276\327\241\272=k\300U\2773\356\014\300\2024\207\276\371\231\036?N\"\177\277\366J\350>0\007G?\246\027\322\275\221\320\210=\264T\001?\250\002!?\326U\022?\203\223\022?=\241G\276\023[\204\276\375\350\366\275\230\304\027>\034{q>\355\270P?\035\220\266\275T\265\014>()\337\274\002D@>\245\374\026\276\251\004\021\276\304\t\247=\270\262\227=\004Y]?-\035\262\276\010\242G?\341\236\256=U4v\2766~X\276\355\005S\275\"4\014\277\342\362t\276\241\2407\276h\316!>\276:\211=\207E\226=> \351\275<\307\032?\274\375s?sP\016\277\0076\306\2759+\261\276\3558\035\277Z\263\206\277\263\256O=\350\260(\276\206o\321\276\260\330{\277p\263\200?F`X\2757\350\324>\341K \276V\232i\276\366\214W=\3159\212<\034i\017\275\244\257\217>\233\211q?R\232\272\277bc\245\275\262\346\031\300i\375c?\327@J\276\r\214\024\277\315Z\202\277\375\3354\276T\234\202\277\252\233\246\275\242.M\276\016\")\276\316t*\277\247\360\242\276\317&d\277\301\370\367\275Z\357Z=k\331a\276\247\022\255\275\342v\017\276\210[J=P\032)\300\226\202x?\270yo=\215S\252\276\033\354%\301\273<\347\277[\'\357=\303\252\370=\342\253\301<\347\003\027\276\0353\304\276\204_\014\276\207\026R\276\025\266x=\206\365\032\277\254\346\n\274\335b\310=\326\326\311\276\365\247\336\275\237\037\332\2756e\"\276\315\243\221\276=\340->\266\036o\276\r9\277\276~\200*\277L{\336\276N\375\214\277l9\303\275\036F\214>\022\033z\2774a\306=V\232\037\300\263\342\303\277o\273b?\316\022\222?\243\227\004\276\273\n\324=\251\310\003\277\262Xh?Xk\302\276wH\206>\332ka\277\252\375e>\231\0232\2760\271\252\275\271\357\224>\354\250>\276\216\256\207\277h\372\310>\327\337,\276>\246\027>\354\034^\276\334\2130?\241R\024\275\030\300\223\277\262K]\276\037\216F\276I\371n\276xS\030\276\353\177\252\276A\013[\276\202Vx>e&\320\276/\302J\276\300\232_<$}\021>0\305J=\206\023P>\337\226\023\276\352\323P>\340\337\360<\t\226\220\275\276\025\007>\373Fw>5\tE\275\022\341\326\275\212D4\276\2216\222\273\233\364\226\275\177K\014=\365 \177>\262\222z>1\346\022\276q\006\315\275/\177\317=\306U~>2Z\337=\373hX>\304\353Z>\301I\r>5N5>\243|C>zo`>\005\330\210<\372Xm>\373\303Z>\004@\377=k\357\252=\273\002s=\241\355[=\376\373%>\332v\006>\224^\r\276\367ii<\207Ov>g\364\n>\357\344\002\276\216\231\r\276%\245\236\275\307\013\357\275\240\217\\\274\'\034\373=V\177\315\274@!\234<1\320\267=1\377\271\273\367S\226\275\334g\260=\265\003!\276\312\2244>\036\tu>\234\235\200>\354%\027>!\362}=\343\014\341\275E\312\203\275.B\333\274\017\000\232\2745\222\274\273\327\322\027>\367X^\275\037g\270<0`\373\275\371\001^=\207\370Y=\250D\203\274\320\314\033\274f\264\025\275\3474\002=\363\261\013<\302\266\010>\246#V>y\362\303\2755\252)>fmy\275:\013\017=yyL>~\317\000\276\270\225\200>\001{y;^\364o=\306\320Y=rCa>\206\360g\274rc\361=\3122\204<7\227b>\340\275Q>\005\256\255\275\223c\307\275\345\257\222\275BM\366;`\357\003\276\234j\033>\322\315Q<\346;\023>C\257\"=\014\342\r\274\233\205\320\275\005\336}>\010E\215=\333\311_\275\002^\026>\252\271\204>m\025\263\275\203x\345\275\305\317)>\205\247\257=~\265\372\275\307{|\276x\304\340=\326\024\001>\320\020\212\275\025\"G\276\313\225\036\276\203\321T\276\376\345\245<\377\346*>\222\267?\274\271\311\254\274\3313\316=x,\221<\230\302\"=\230\233\326\274\216\343\005>\240\347\303=\236\305\037>J\231\235\275 (Q=f\177\226\276\335\237\201\300.#\204\277% \267\276\371\2605>r\336\204\275\230\363\023\276i(\252>*\310F\277~\315\376\275\314\347\346\276~\231\361\276\276\312\023>\023\234\275\275\252X8\276\206\277v\276\253\216\"=\236-%\276\223\236\020?\227\275\274>\326\346c<\373\373\213=\255\260E>\216\307t\276\303\000A>\213\255D>\010\177\017\276\030\2557\276\343\350\031=\340\355\214<!\354\216\276EF\035=\350\374\204\276\nJ\225\276\316Y\254\300~\020l?\374\\m\275j\201\315\300q\263!\277\362`\323\277\203\364\276\2751\223\022\277`\226t\275Y4\257\277\000\362\204\274V\020\316\275E\344\233>\035\362\230>\273\300\220\276`\330\024\275\244\206\301\275\350\'\240=R\367\202>8\231\224\275\361\2539\276\312\243\305\274^\220J>\342E\210=Hm\231\270\225\013\005>GY\246\276\363\225\004?\307~\353<\023\360\354\275\324\"\034\276@\200s=3R\277=\3650\351>-$\211\276\250T\314\274>k\014?:S\336<`\217\037?\020%X?\036\341\027?\033\245&@\234\312\023\276\314\230\010?\254\232\333>\"\277\234\275\036\266\315>H\306\367=\024\350\017>I%\204<\252\030\037?$@\247>\3267X>\004\305\330\275\037\250\225?\227$ ?j\341\311?tK\370?\303%\263\275U`\227>O\314\223?\247\221\n\277\270\235.?D\246D?:=\370>\230\361\316\276+\204\242>\"\373E@gkt?\260\037\017?\214\250T?\324#\007\275\201\031W?2\335\235>\035F\227>\020\302A>?x\332\277b\027\036=\373z*?\032\271\217=\261)\243\276\002d\260?\242\234\020?\014\273\327\275\263c\235>W\243\212?`\027\037>9v\252\275\370\346\347<P!\204<H\252b=h\261N\276\317\353\246\275:J(>\031\2559>*\204}?\016\250\020=\216\025\025\276\003\023j={\r\007=\355\265\263\275\330O\026?V\323$>3d\014>_.\216\276X\271D=k\'\033=\320<H\276\310\211\001>y\251\315\275H:\373>\254\307\267\2766\374\272=_yY?\007\362\215\276\"\037\201\275\232\346\236\276L\332=\277r\000\021>\340\006\256\276\250\300a\276\276\347\023?\335\"\310=\230\343\261\275In\231=VY;\275\002\034\252=d8\255\2763eB@\302\232Y?\207\276*\276\230n\350?\2638&?\327\353\215\277\003\256\334>m\337\227>z\374Z\276\'\247\357\277sD>=U\\J>\267%>?\363\334\276>!D\354\276\335}\330>\205Ji\277\025\022K\276\332\276+>\002\345\244\274\032\221\340=\004\236k;a&\323\275\233\361\370>\036M\372>\322?W\276\271\022t\275\260\350M\276\252df\274\034 \377\276q\017\351\275\026\270\215\275\025\271E>\271^)\276M\327\222</\264N\275y\177\361\276\203\3471>!8\233>\353\323i?\230\216\247?\365)P?\275f1=J\235\022?\246\325\277\275\'\217\t>\335\273z>\253V\357\275\003r\036\276\322\025[>\333\254\352>\0214\027\276)b\372>\267$\305\275\240\220\026>\332B\177?\302\026\340?\312\3755\277\031\304l\275\237\305U>hC\264\275\"K\253>?\031+\277\257\004\205>o{\325\276WAr\277\320}\005\277\241j\264>v\367\213\276\211\314\346>\016G\341>cf\007?\3065\330>\355\265\212\275\022\024\301<\273\302\307\274\370\303P\277\354\016.\277\204\200\202\275\004\r\261?\361?\233\273\345a\024>K{D?\023L4\276\256\036\233\276J%??\254\336\033\276a\200\374\275\332\323\211\275\000Yr\272\032\324\303\275\320\022|<\341\0028\276 \027\372\273O|O>\356\345)>=\340\271\276\377\3144\273\265\2162>\327)k=VDY\276\276\034\367\274r|\227>F\227O>\213\\N?\004@\302\276\260\037\013\276\0018\005>\376\373k\276\004F\301:\307\227\360>\262\017\037\276\223\257\236\275\361\206!?\215d\267;\016\370\362\274Y\230\016\2774\020$?\337\006)\277\025\367\310\276W2\367\275\021\257/\276\344X&\276\271:\003>\332\331t\274\3035\360\275\256^\331\276\333\230>\275\373s\031\300\023\240{=Y\234&<@>\246\275k\351a\277[\244\204\300\022H\237>\005\210\304>$p\244=\246k\243\275\310\273p=\014j\355=\231\215F\276\226LJ\300\3766}>D]\265>.\337v\275W\037\203\275\263\373O\276\356\262\t<u\0043\276\007q&\276\226\202[\300\035e)\276E!\010\276\"\373\274\277]\371\330\276=\025\323\300h\266\030\276cI\277>\3162\327=c\207\355\275I#\016=\350\300\213>LPG=\313eJ=\277\025\330>\221\343\005>\314\nV\277\207\023\265=\332^\215\276\371\337x\277\255\262\030\276\263\037\301\2774\266\201\274\221\307\214=\241\200(\277\014\\P>\267\353\351\275q\002\\\277\352g{?\245\247\374\275\225\366\273\276Z\200\303\275\255|H\301mf\267\277\332\2124\277s\201B?A\017\341\274}>Q\277\275\263\310;;U\177>\265.\212?j\371\344>lc\353>b\211T=;\003\t\276\032\003(=\214\034\275=\3311\206>7\r\n=\342\351\270\274>\317\302\276\365\307%\275-B\214>\213\312i\276\242\217\246\277\"\'\221\275\203\270@\276\032\313\000\277=\377\253\276\014\274\204\276c\020\357=\001\340\307\274\365\233\261?yJ[\276zF6>\210\333p=,\271\320=\030\250s=\271g6\276toO\275\177d\250\275\274\025G>\301t\306>\356e\237>\213.Q\276;J\225>m\352\316\276\267\340\020=\n\364\004=C\325>\277u8\240\276\302] \277\025y\037\277ES.\275\240\215\007\275\366=]\276\250\335\212=m\220\346==\2253\276s1\357\276+\001\361>V\2150=\336\331&?\222\2238=\317\231\246>8\031\201?D\233>\275d\020\230;)\344&\275x\257\305\2768@\220\275\260\321\217\274l\321,\275X/\256;7,\003?\210\224m?0j\207?F\0178\274\346\2769\276\322\224\035=\326a\272?\257\017\312\277*\020\017>\217\345\321>U\377\246\275{\3504?hA\177\276+\030.\275\234\325j\277\326\334\250>\343\014\207?\235>\006?\010\376\223>\211\'\275=&c$>\026+e\276\022*v\276\304@f\276\235\235\225\275\377\022\215\276\025i\314\275\277=\037<\376^\207>\002\337B\277\221m\\\276-P0?\376h\312\275\300\004\000\274jy0?r\374\022<\236u=\276\013\032,\276E\327\375=+\"\201?`\025H?\373\333\317\275`\317X\275$\262\004?11\242=\306;\255?\265`5?\354r/>.\010+?Q\n\t\275\351\245\227>P\347\202>:\334\227\276\314d\234\276\253I\260=B/C\276\372\214\002\276\016\007!>\353\037\221\276J\323\243\276\274\343\225=\277\366\237\277\332\223\003@\016\303\270\276,\325\017?\235\270\013\276\326\340\357=;\245G=xt\274=\226\314\036?\016\021\331\276\261)<\276J\355w=\223\345\210\276\346\261s>\024h\226\275s\022\177\276\370\257\312>\037\020\354>m\341\323\276\312\201A>&Y\203\276\322`\003?\364\300\272<\252\r\205>\2540\037\275\026\233U=\256\027\323>\005q\305\275\371\350\021\276\020!6=\2146S\275\334@S\275\004m)>\252\0060>(\220\033=\334Z\026?cD7@\371\200\t@\020\202~@\202\224,\276+\302\003\276\266\267+\276\032/\364?\333\346\020\301K\0207\2772\004\001\300J\005\'\276\200\260\216\275wS\337=e\020\276\277\2424\244>\326$U\275\250Tx\277\357*\221\300\332\231B\275,\214\200?\344nL\277\267\204\262\276dv!\301\017\345 \276\240\351\261\276O\2026\275!\010\243\277\357X\253\275n\211\'\276\301\366==\004N!\275}6(?\346\337\325?k=\'@x\204R?\360\312p\275+h\311?\211N\375??\330;@\306\276\034\276^\360\354\276\300w\003\276\370\254\004\277\255\252\254\275\335\036S\277\201bm\274\377\261\247\276\202q\017\300\177:->\274\252\266\271\005\212\010>brC\276WK\"=aW\306=*\0364=\252T\252\275\205y\300\277N\301\230\277\272\306\317\275\353\335\320\276\323\243\353\277!\255\036>Vp\254\275u\315\342\275P\241X\275Baq?\r\277_?\031+\216\274\026\211\272\275\030b\212\277\253\3174@\013\252\331=\227X\007>\274\327\365=\030\325\255?\304\002\'\275\244\035I\277\007\310\370\275\365\267+>\031,\262=N\3536\277\331\177\245>\223\363\202\277\372\244y\300p\304X\276H\n\316=\264\372\371<\3368\201\276.9\254\275Kc\013=G\230\327\277}8\305\275\202`\257\2776c\317\300zv=\276\254|(?\001*\314?\032^\336?k\373\305\276,f\245\276\177L\227>\200\246\236\276\265\263o=\206m\332\277\341)\257>he\010@\031E\254?\245d\337>\n,\376?\275\334N\276\265\250\341?Q\323\217\277B\006\361\276}\226\246?sH\034\300k|\006\2778j\030\276t\3544@1?b\277\260=w\2754\3175\276\356*\340\275k\035;\276`P\345<\202F\034>$\013\201=\330+%>`\275\017=t\307\304>\211_\246>\306}n?\214\366M>\nR\275\275\317~\275;g\211\246\277\267\277\231\274\315\'\240\277\010\356a?u\201\210\276g\003>\276\177\357\272<^\351)?\241I*>\247-\210\275t]\247>\371\320\254?3?\213\275F[\266>*v\031\276\216\234S\276!.J\275\364\271 ?Y\337\271\276>\201\034>`\320\330;\332\263\027\275\337\033\342\275\304[\221\276\276\247\355\275\233._?\326\232u?q\003\261?9\365\213\276\354D\236\275\002=\'?\r\376?\277V\370@\277w\005(\277\312x\013\274V\004Q\276\013\003+?\340\222\204\276\010k\305<$S\034?\032+>>\333\366\250?\305\256?\276\307\323\270>\372\340\005\275\210\240,>\370\240\225\274\345\002\001>F\304\226\274Cr\225>\336pX\276\'\001^\277\206\355f>L)s>\227+2\275\365\001\257\275\203\327\267\276\rd\306\275DR=\275\263\216|>\366\234\236>SFc\275\320~0\275x\211V>\362u\274\276\317\001\001\276l\244\206=\266S\202\277 x\262>WKV\275DG\224?\252\351\372>\"d6>\302\201|>\333\370\316?k\253\035\276\364\230i?B\204\272\276\026\304\305\276\346M\214?b\273{=p\350k\276%x\311\277SYB>R0\316\276\223\322 \274]?\266>\014\276\356>{\315\346>\247\025\036\277\372\371\277:9\230\363>\245t9>I3\251\276\254L\207\274\326b\000?\273\307E>q\364\003>\373\351\374=\242#\267>\356P\r\276nsC>\016\013\206\277\360+\343\277\037\241k>\342\272\214?B\333\n\277\006\250_>\205c1?1\215D\277\235-\251\275\023\275\250?\226\217\301\276\360\343E>0\026\350=\020\262z<\002\214\006>\274\227\345=\036\362 >T\003\217=\3500D\275!g\267>\002\036g>\244(A\276.\362f>\261\203\206\277\334Y0\275\240\312O\276\244|\027>\314\254\260=\204\r\216\275]\032Z?\212\207\315<\206M\242=\032\221\234\274d\345\302\2738\240\237\276K\336\017\276\313\022\221\276\213\030\337\276\027\3211\277\225J\\>\002\\\345=aC?=\211S\303>.\2209\274\332\352D>\265\212A\276\203%r\275\271D\271=\270\322\177\276\013\036\361\275\017E\257\273\326>>\277\241\210/=\006\271\346>-_z\300[=\334\275f\221\330?\277\372w\277\315|\330\277\036\033A\276\213R\350>\374(\037=\247\303\003?\274\t6\276\335\343 =\361pe\276\312\275\300=\274\330\327\276\005 y\276P\027U?\272\311\032\276\205\024\316\276\333JV\2763\016\030>0\272\351=\257%\235>\202\331\374\276\373\321\265\276\001\207\001>\257h3\276c\3063>\320\222\002\275j\350\237\277$vM\274\263\253\275\275\204$\214\277P7#\277\371<\204\276\251\356\262\275#-\261\2770\250\351\274h\353m?\243\324U?_\251e?y}\357\27766\263\2756^\006\277\301\031`?\346\214\335\276\202\361I\276\301wP=\321P\360\275\300.\222\275\003\373\241\275\276R\275\2751xW\277|vA\276}\263q?\374kC\277#j\327\277\246S\022?\310v\307<\305\3043\277/\037\014>\007\355\246?L\356\267\275\333\211u>\202u\013\300U\274\240\276\272n\204\277\231\326\232>H\341\004?\344\243:\275 \200|>\025\371\225\276Q\032\273?;\246\256\276\002\263Y>\\\324%\275S2\324>tF\376\277W@b?\365\016>?\017P\311\276\206\266\223\277\376dM\2773:\007>\357\202\205\2772\203\235?@\240\n;\030:m\275\014#\014\276\340\244L\275\242D\023\276jP\372\275\230Vp\275\316\316D\276\231z_\277\326\363\007?u\203\226=\215\346\033?\033\007\237>\221D\371\275\003\t\031\275\3276\271\276\321\232\257=\315\277S=\200I\215\2769\220\263>\203:\230\274q8M\276\3772I?\364o5>\271\0373=0\r\243>\260\351\326=\014\r\245\276Xxl?+\023\221\276\361\r\327\274\026\346\220?\212RQ\276\3200\273>\335#W=\244\'\204?\022d\226=\n\262\212\274\274a\223\275\336\313\010=\276eh=e\227\022?\001\261\265?\335V\263?\020S\273\275,\265e\276\311u\031?F\277\217\277sf\331>e(\177\276\270\233(>\247\330\373>\252\023\014\276\247\350s\276\362\247\203\273\242\017\207?\021\363?\277\372\305u>\306z4>\316\320_\275\"Zy\276\335\374\214\276s{\200=\36030\276\247\004S\276\370\017\223\276{\2546\277\014{\301\275\033\357\254\275\214\035\030\2775\371\201=hB\247=<E\322<l\2518=\313\037P\276\327\nk>I\333\014>\005L\201< \025\374>\215\215\020\2771\017M\276gV\333>c\326u?\217)\206>\262\305\022\2767z#?V<\027\276\223\237\322=\253Z)>w^\246>m\\(\275\303);?a\305y\275a\026\300\274\274\332\344>\252\305r8\265P}\277\312^\372>\274\231a?Wzv\276v\215\036\276a\322g\277\253\211\320<\357\307\017\275D\316|>\007u\315>\037@\350>\225\311*\277= \270<\215\260\332>\027\234\025?\000\275+?\335\010\233?\307\026\013\276#\341\316>\273\325\206>\225\037\016?^6z\277\234\277\261\277\211i\253>s\017]?;0\212=\354\'\204>\021\376<@\352\321\016?C\357\243<\341\225\002?K\005\004\277\000\026o=p\023z\274\320\341\333\275\300.$\273\310\226\032=\250\\8>\234\353\300=\300\244\312==\262\217>\256p\206=m\306\200\277\022x\032\277\220x\271\275\004\0018=\303\271\347\274^c\360\276\362\316\003?,\2504>E\324\230?;%\231>?\024\373\274\036:\376=\2221\027?_\343s\276\337\320\251>F\177\321\272+\247\310\276\265S\212\276N\234\376>\270o4\274mh:\275\272\364\235=}\t\210\276V\231\003?\210D\n\276g\366\341<3.%\276?M\010\276\235\266\323\275\017@\265\275V:A?x\326t?2q\310\277h\217\223\275\014<$>\342\335\354>@\207\332\276Y\245<\300\321\333\020\276\240\240\237>\257z\007\276\370O\257\277\270\347,<\324\350Q=\305\371\020?\004\234\330\276+\030\024\277]@/\276\226>\243>\2219\221\275\350q\022\277kqE\276&h\252=A\344\200\275\225\201\202>{\233\306\2769\030\244=\027*\355=\002\'\305=\366\010}?\212h\216\276\324d\001?(^\021\276\211\245,\276\021\324\">z\317\207>\373Sa;\272\331\377\275l\276\024?\310\240\304>\223\226\237>C_\245>\315]\353=\017\004i\277O\006\020\276\351\350\023\277\243\202\333\276\371\237c>\315J<\277\254\033\t\276V\274h>\352\207e>\246\334(=\313\303\204\276\331\356}\277\365f6\276\335\254~??\252b\274M\312\201\277\027!u?\010\027\027\275\335\222R\276\201C\221\277+\206%\276\316\223\226\276\325\305=>\032\373\t?\267\340)\276U\224\321\275\260d\354\276M\235\206\277-\234\245\275\td\230\277\024(\310>\346\025)\277\365\023S?\004\327m\276p\352\010?\336\002n>\301|Z\276x&\241\277\300h8\277~\371\276>+\263\314\277\367p\007\276\r\215\204\274\306\272v>ZA\213\276*\372K>p\324\213<L\274P>\020\363e\275\000\026\020\273$\337\254=\336\266\024>\021gF\276g4\327<\336\255\305?\331\215.?#X\'>\245f\030>\325\311\005\276)\014\256=\017\274Z?\362\206\270>\036\231\004?y\017\367>\377\020\222>\225/d\276\367\033\030>\327`\016\277\347F\321=6i\017<\025W\223>\332@\271\276\256\036=\276\233\364_\275\275d\006\276W\233)>\271\007\r?\311\217\270=\n/0>\026\252q\275BX(\276\365D\'<O\014x\276\216\035,\276)\333C\276S\267\017\277/\325\002\277\342\203\206@\325W\317\276\r\023=\276zXp@v9\260\276\215\350V?i\002K>\276\214b>\320E\266\275\017\002\357\275\177t\240;@H\355=c\305\037\276`\311s\277F\003\030\276\364\237\222>\211g\321>\036\340B\276G\263\275\276\"\222`\276\237%\271=\216\366\310=\345\231\240=\340>{=V/\341>\275\023\005>B\257\022\276\2473\\?)\300\t\276\0160\002?\210\266\274\275\244Z\014=\352\276\233\276e\247\277>!\270n\276\212\352\330\275\250\246k?\235\203\201\276\223\021\">\374\262A\276N\217\233\276\205*\376?J,&=\356JS>?.\007>\264\231}\276\017\324\230\275\257G[=y \363=\333\023\371\276\370\322\270>#rQ\276(x\021\277g>\000>\267\024\026?\306\377B>\332\356\264\277\323\364\233=\024\217=\276,\030\n?i\244m\277[\377B\277\325Q\273?\250\006\261>\356:_?\321\177\333>>\247\037>\202\226\020@\365S\204?^\343\334<Z\371,?\025\217\014\277\272\345\200>\333\200\245>\377\307\220>\262\345\366>\316\266?>\270\005\305;\366\302\\>\360\213\243\276\373S\000>\236<\374>X\034\277>\014l\341\274\353\360\341>`\350,?4g\225\275p\321\273<t\373\201\275\265\n\314\275<c\376\275\267c\300\275Pk[<H(\'>\374\321\227?\020-E>7Q\250>\250B\227\275\201\205f\276)\261j\275\024\004\330\275X\264\000?>fm\276*\363L;p\342N>J74>i\344&\276W\231<\276\027\253:?5\312\232<\312\365+\275\231\361+=\036\311N?\220\'\210\274\255\002\267?\213\033\205\276\222\037\245\275mDs?9\307\302>\032\317a>\320\201F\2745\266\277>N\246\273\274\370\231`\275_\367\017\274\003\t\034\276\314\255\206;\237\267\252\276\377@r\277\341\364\224\277\240\332O\276\337\351\250\277\001?\027?\200\277\324\27741=\276\35053\275\217\310\242\275f\253\024\276\364J\203\276\021n->\340\230 \277,\273Z?\346\267S\277c\240\022>>\306\035\276\326\265b\276\266T\315=\254\013|=puk\276\223\204\362\274F\237:=&\265\253\277T\316\221\2778\016\300=M\236\034?7\371\250>\003\344\003\276m\235\347\276e\235\344\274\314}$\275W\200\037\276\204\362\217\275KR\202\276\005a\303\274\373=\235\275^\276->\350]j\277\335\216\r\277>8U\276*oU=Z\'\243\274\010fW\276\r\025\265\275\347\304\032\276\"<\n>\265\217\022?\016\274`>\322\316y\277\263E*?s\347Q\276i\360}\276\344\201\346\275m\004I\276\004b}>\211\205\260\276s~P\275em\035=\2517\231\277a\021\177\276\245o\350\275\244_*?\000\236\361>\030\301\236\276I\002\262>\226&\004>uw,\275\006\300X?S\316k>\275\325/\277\0059\313>#V\032\277\231\331\021\2752\376\236\275\217\257\013?\300Y\251\277\251HO>%\031\033\277\375\216T\275lcW\273s\005\002?\005\212\237\276\337\313\325\275\273x,?\312\033\206=,\245\220=\010\311\317\274\022f\024\276\240\213\004>\340\335e=\260GA\274`\353n\274@\215\202\274!\256J>\rB\001\276\354\331\324\276\324\245\'=AH\311=\267oo\276\254}\255\274\225\277\021\275\351\362\317\275+&Q\276\335\236\013\276_\307 \277\304\271L\276:-J\276\001x\r\277\250m.>\247T\305>\222\255\260>%\234\337>\322C->\322 \326\276&\214\022\277\272]\035?\330f/?I\340\275>a\344F?\035\2472\276\267N\036\277\257\304\272\275\311\222u\274\252l\374<\204c\r\274\344\303_\276%\265\254=\324-k\300\243\217\244\275\020\335Q=\323\356\212\277\207x\215>#\247\317\300y\337\207>\310;\340\274\032\t\335\275\271_r\275\315\366\306=\315\210\237=\355\350\035\277\321\201\212\277\240\210O>\333\235\005?;6)?;0\030\276\343\035N>\2307\332<\245\tE\276\361b|\275\230\2028?<\347\223?\313dE?U\220\264>\312z#\277<\370\242?\225\3230=R\254\271\275\nF\013\276\254\337\026\276[\233\343\276b\211\024\276\360\320\024\275\002\355\342;iB\267\276=\260$\276,>\244\277k\2764\277\214\007e\276\007\312L\300\207\261\251\275\211\177\222\277d*4\276-\376\346=\362.\225>\036o\265=n\334\204=\235\3437>\317H\240\274\177\321\262\276\262\000\256\274W\226X=kq\324?p\266\263>\372\326\373>t\300{?CMN\276x\317\366?\322\356\214?v\254\362\277\231v\212>T\324\320\276\365S\r\277\223\213o>\333x<=\361VB\300\235\014\005\277^y\241\274\360\355\251;\265`\210\276P\354F\277\r|\360\276\323\323\247>\226\026\\\277\327\237\344=E\034B\276\002\205\021\277\211]\035\276`=t\277\010\206->\267\222\220\276\343\372\262\275\357\315\265>\377\263\215\277\000d\030<\240\005\t>\272\331(\276\214M\366=\240@\366=\334:\250=[S3\276\372f\024\276"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\336\351\253?\035\263A\276Z\005v?X\036\240?OB\010\275Q\317\376\274\3737\'\275\325\343Y\276>\306\003?\277G\207?\001\017w\276\206\016S\275\256\243\034\275\315U\354\274\2404\177>\250\004/\276\317A\264>\336\316*?\235\363\265=zY\233>\271\3472?\375W\234\275\301m\030\277B\177Z\277\264\221\257>\355 \377>\346\367\366\274\2457>?\346q\024\275\274\017?\275~\374\323\275\270\211\037\275\215\377\216?@\235\323?m\037[\277p\253\n\273t9\235\274$\332\202\276[\277\337>e\340\323\277\360\202:?\263\325??\273\245\257\274\004\346\215\276\250L\301\2759\034\235?\351\323\230\276\000\304\336\276s\362\251?!\027\r?Vi\235>\234\316\034\274\r\364\231\276\321\005\275\275\222\005\321\273\277\"\020\275\246=1=\360\036\224\277\312\3214\276F\220\210>\206\262\247\275\016\250\t\277\232\227\266\2752\366\030\277\227\250\234\274\000\000\000\000\273\216j?bM\256?\314\332\250\275\233B\275\274)\343\200=!;\"\277\251\004R?\247?\274\273\254q\263\275\027\302\212\276\013\\\275\2740\344\250\276\330\312\220?V~\261\276y\342\\?\375\271]>\324,\363\275\334\236=?\3242l\277\255wF\276\372\257\023>Y\234\211\275w\343\023\277\356.\272>\273O\211?[\226w??\227\305\274\341\272\002\300\177o\267\276b\240\246\276\021\326\304?^\207\237?L\022\240>9\325#?\356\2707\276iL\341\277\337\037\010<\306GV?\310Q\215?\217IB?\231\035\r?I\315\314?&\324B\277[\222Q?\367\300n\275\262R7\276\276\206D?\346\202\246?\351\231\261\275\006\020\344\276\222<\257=o\2119\275\250\342l\277\353\306\222<\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\377Q\222=Q2#>9\235\214>\327#\243=\361L\343\2756c\274>-2%\277n`\365>r\206\207?t\362W<\352\'\217>\341]\334=\301:,\277+\256\001?{\"\217\2763p\251=\232\331\013>\342;u\276\324}\270>\252\323\361=J\003\n\276\001T1\277\206\013I?\243\221\225?ls4?\243\316!\276~\376_>g\275\341\273\211\245\203\277+\225\265>u\266\375>uhi>\024S`\275\206\237\315<b_h\276m\036\352\275\270^\345>\301 &\274#N\002?\002\357\267\2768\206g>\330\343\317>\310`\014>6\2450?\223\200\033\276\004\334\213?\323\021A?\277\036\266>[\010\013?\242W]\276\3653T>\\\341b\276\nH\306\275\207\342\021\277\254&s\276\244ku>\327e*?\216\2008\276\016w\355>\244S\354>\353e7\276%\266\r>)\224\227>\303\331q\2776[\241>\027X\263\276*\030\001?\'\276\243\276\001h\r\275\262+A>Q&\262=\'@\001\275\377\341\321=G#?\276\243\377x>H\345\223\276\200\323\330<_\227\205?C\210\207>81\314\274\021\304K<Vft?\304\001&\277\347<\223>\327)L?Q\021\241\275O\251\215\276AZz>@\250\373=:Q\017?\334\237m>\025\353\266>\007\213j=\020\340\024?\201\021\277\275u?\032\276\236K\330\277lA\374\276d\226M\275\216\206/\300\271\340\370\277\353\274\366?o7H\277\361_\001>a\334\262>?cX><z\004?\250u\272=\375\344\331\274v\337\320>\005e6>\204\031\334\275\013\207_>\3620\320\2750\255J\276\347\242O\276\351^\231;\2652Y?\332\025>?W\"\251>\376%\222\275\205\312\215=\361\225)\277\'\206N?\016\257\t\2762w\351>\237\347\032\277D\357\300=\365\010D;\305~\003?\377/a>\3517s>\214u\236<5>`?v\243\325>\313>/\276>\022\001>\271\225\365>L?a>\273\335\r\277\363\210\230\276\332Q\206?!th>t\016\306\276\205o\017>wd,?\373b\337>\210\210\240\276<\035\244=\232ns:\1775\364>\362?G\2776e\372\275=\313\267\276\237\000O>\030ES\277 \312\347\277\231\246W?y)\253\275\000R\272>|\202\301>Qg\343=\265u\317>\344\330\004\277\013\316\224\277\2760\243?A\207\204\275\275\3550>h\010\275\275\252\216\036\277\014\036\243\275\366\250\200\277\034u|?1\320\214?Dt\344>\344%\371\276\354\032\335\275Ei\346\274\003!\376>\355\007A\276s\312\240\274\372[R@~@n\276.e\311>\231t\024>\266\377k=\265\201\217>\363\370z\276 \250\214\275\224\216R>B\033\235\2765\274\345\275\201\253\214>\214\364\256>df\324>\277\021\n\275/\337\321\271\363-\206>\020\024\200\276\305\242\257\276\333\224;\275\353\257\251>3\236\373;\222|\002?\340#x\275\375\017\231\276\0347\227\276E\020\250>@\300\350\2749Q\246\2769h\037>\236R\237\276\200\360Z>N:\377\300<\245\003\277\214\204\007\277\002h\364=ko\272>\227\210\256=\210\360\217?<`\r\276\315\2608?\256\020[\276B&\355>\361A\213\276}\366\200\276n\3017>\323\345\000?K\367\214\277\361[\002?Zo\024?\237\245\277>C\204\315>\367\356\025>e\232\303>U,5>\t.\341\274\346.;>\331\351\263>\212\311\224>\232\337\372>XB\305\275\251C\203\276\212J\330\276=\362\226\275\277\243\013\300\267$\036>\223_\302>{\020\361\276\014\305\220>\202.\326>\276o\360>e\016\016\275LP\n?M\003\377<\212\271\264>m\270\335\275\304[\237>\254\310\021>\232\310\014\274}\006\037\275c\260\322>\0336\200\277<9\226=Y\r\023\274{\341^>\262\327\235>\3246\232?\347!\026\276\271L\224\274\204\3038?m\261\"<\376zp?Zd\345>\244\013(\276\034\321\200\275=\324v\2775\310\275>\013\021\036\277@\320\254\277\353\375\t?\257T9>\236\243\">\274\227\240>\260p&\275\251\342\303\276\002Z-?\225\230\357\276\304\251\303\275g\250\312=ai >\002\001\304>\205H\241?\373\206\000\2772\026\\=\215\300l\276:\2326>\020\222\371=v)\255>\035\006\272\2765>e\277J{\203?I\035{>\313\320\035>\004\366\037\276sg\373>\267\031*?59\330\275\333y\226\275\274\275R>{\n\";\343\357\025\276w\311 \275D\370\004>\310M^\276\365\016I?\371T\324\275F\025\211?\202\3552>\255^\274\276?@:\276u\301\362<\276&0?\260\333j\274\360\037\217\274\215\r$?K\3165\277uc\r\276%\363\364<\355y5\275\242\354\322\275m5u>\305\333\271\275\254\370\236??\355\337>\313\237\246\276\334\375\014\277\236Z\335=\212\235\216>\326\263~>%\016\007>6\272\376?Q\323H\277\0336~?z&\372\276\234\355\336=V9\317\275\345\033\337>X$K\275\363;=?\021\036U>\204,:\277\306<\324>E\373\025\276\371lS>\262\346J>\2347\373\277\2758\r?i\214\202\276OB\001?6Tu>?\313\343=~3\275\276uqh\277\223\337\020>\327V\207\277\257\305\222\276\025~\002=\317Qd=Ek\017?\177\034\363\276?\2067>\005\n\267\275#\2314>\240V\350\272\203x\354=\262y\202\276\n\320\310>\r;\266>\r\223\225\276|3J\277V\266\205?\355\324\243\276)\027)=\363\212\r>\256C\266\276\364L\225\276\341RD\276\333wT>\255\216\215\277\371\264J?\321\314\025\274\353\266\313>\316\322@\276\020\321E\277f\272Y>\215\344\030><\210\247\275\362\245\376\276\014\237e\276\345\273\000\276\306z\267<\353\263\205?\250\331Z>5g\346\276\355\026\332>C\035\273\276\301a\300=;\013\030?\364\202\250=\213\371\231\277,\270C<Q\230G>-\n\026?=I\000?\270Z\332>\375\035\205\276\213\222\245\276\322L\001?`\212?\275\302\302\240\275D\372\367>\224\315!\276GQ\024\276\270\365\222\275\211-D;\303\337~>\212\337F=^\266\222\277\261g\325=\206\255\271>b!\260<2KV?\347}\322>\030t\324\276\341\316r\277*\227\350\276\212`\200?\311\020n\277b\324U?o\246\022?\3070\220>\002f\200>45\313=0\030\207=\376\251\016\277\244\353\037>\313n\022>\201\361$?\031m\377>v0\205\277bd\260\275\376\247\003\277\032\2612\276\\\014\365=H\355\202>/ \272>\261\276\235\275\315\177\024?A\236\302=/\222U\273\017\303}\277\266#\034\27539o>\252\021\016\277\343\361+?\010\362}\276vf\301>#\360\000\277\364\332\024\277\274\344=\275\ru\370?(\253\263\275O\004.>]R\241\276\276\356\034\2774n\225>\002\177r\275P\352G>.\217\251\276gZ\344<\334\252K\277L*\270\276\264\373(\300\246\340#=\353\256e>h\325j>\213b\251<\341\2106\277AGy>k\271\377\276e\262\273<{&\312\275\236\241\273\276_U\261\276\215\252D<Ha\211>\217C\306>S\035h\273\205?G\277\317\206\000\274NL\276\277y\202\217\277\337,Z\276\332\371p\274\031(\325>V\004\034\276N\032\310=!^\307>o\221i>+$V\276/b\242>\257[\n\277\372\3721?N\026\343\276\376\001\323\275\n\213\267>\335\264B?H\341\347=\n\3209>\362\203\200\277\3406\301>\325X\200\276\323\341Y>\027\260\361=\204\377@?\301\307\037\277\235\371&\275\254\245\340\275\0204\027\276\300g\200\276f\372\030?Ev;\276u\334n?U\221\033??\345U=QV#?\232VM\276\2245\t\275DG\032\276\036/\322>\335u\266?\302\311Z\276Kq\236\275t\026\314=\021\026V\276\213\305\374\275[\202\327\276\333;\313=\316_\361\276\301\016O\275\021\214B>,0\026\2769\030\222>\263\333\210>3R>\276\355\360[\275F\366\202>\242 \034\275\235Z\372\276\206\025\215\276p\2158\277O\271(=\237\324\273>B\312\254>\022\252\237?2bx\276\337\006\013>z\216\031\277J\311\364=\030*\017=\261\365\037>\251\200\255\277\337\306%\277Y%\274\276@\272n>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "8\210\026>\230\233J=\007\000\237\276\265u\263<\003J/?\311\254\300\273\275\251\030\276H\360\204>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "h2\243\276\377\320\023\276\262\201\026>\013\276\002\275\354\346y?\351\222\310\276\264\007:\276\374\266O\275+t\232\274\205\265\031\276ZK&>\0161\214\276\246^\007\276UQ\201=\271+\305\276][\235\276{|9\275<\010\263\276#\204\347>\rS$=\017\332\t\277w9-\276\241y;=oY\265\273\rB\034\276\037\221S\276Cb\037?\0212\215\276&\254\260<\335\273\353=d\377|\276\263\302\207\276\006\305\227\276\373Wu\273\253|\314<Mg\352\276N;\264>\n\316\367\276\227\235\353\274\265*\313\276\363\022\366\275\221s}\276~\275\241\275y3=\276\306*\233\276vC\200\2762\351\001>\321\034\226\276q\034\027=\351\361(\276Iq\036>\323\310\232\2767\317\315\276\250i_=\202\243\213\275\3227\341>/\320z\276VI\022>\320\026\335\276o\241A>\254\227\010\276\327\256\353\276W\r\002\274\024\202\240>j\270\036\276\340&\310>\327\206\374\2755`A>uy\004\276@\247w\275j\303\313\276\331(A\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.11909177154302597
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
