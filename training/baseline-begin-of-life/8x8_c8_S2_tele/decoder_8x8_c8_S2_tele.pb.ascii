node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\200\305\264>?q\301\275]\231\355>\312\345\272><\254\306\275\357g1>\250P\226\2765\213S>\\/\274>S,\021=<H\336\275\367\312\320>\372H\036\277\356\2562?\377\013\014=\300<r\276\317,\220>e\216\214\274\315\354,?\232.\006\276\350Ba\276R\"+\277h\227\343=\006\354:>\274\2764?8\017\007?Mf ?\016z\001\277\231\373\023>H\375\272\275\373^p\275\214\201\220\276 \362\000>\275\220$\275\340Mn?\304\361\231>\210\336/;/\366\013<\007\300\023\276\031\344\324>5.E\276\215<4\276R\333\303=\321\245\372>\353\000I\275\325O\240>-`\247\276\000<8\276\211\212\330\275\364\260\t<\222H<=\267Q\347=Y\330C?\022\036\030?\271Q \277Ru\200\276P*A\275\2578U=C\030*\277o\321R<A\324v\276\n\337Z\276\257\005\233>\013E\200?\000\362w<\004\233\246\275D\315\024?#\332S?\251n\245=\310P\246>\347\214V>z\371\323=|\361d>\337\253z?h\360l\275\227X\203>w\343\246?\276\210\020\277*\257A=\271\244\244<P\376u\276Sx\340\276\037\007\332>)\252\212?\261\306\335\277E\231\267\275~w\'>\010\322\367>5\246\212?6\313\232\277\360\221\036\276\202:G>\234\216\027\276$\006\244\276\206\274\253\275\244\345-\276\362\243\240>\247Y\322\276\245\347z>\037\364\276\276\221d3>\377\332M=\n\001\355>\313\300\332\2750\257\212>#\265\004?E1\177\275\334yO\277\342\313\023\275~2\036?N\000u=\004\035!>@\232\216\277\230\265\r\277\266\233\342?\003P*\277N\202\250>\261\201\010@\216\253\272\274aB>>\300\023M\276\324\374K>\332\034<>x\246\367=\250\235\247<\270=\266=\250\317\207<\340\0045>\275\336\035?\001\321\353\276\361\202D?\272;\211\275\362\020\215\275\360\261\274\276\237$\243=.\334\223\276)z\330>\331+\005\277\357\301>\276\206\307\340\276\250\337\"?\223\272D?\320\305l>\372\262s=\036\277\363\275\r.\306=\303\315\323>B>\303>\356u\025>\306h\237>\255V\316=AU\314\276\236b\223\271\250\017F>\323G%\277\3214\276>\356~-\275\302=\004?\273\023\222?hL\022?\2431D\276\301D=\277\255\355c?o\247i\276\236\t\201\275\207f\330<\343\227\235\275\377c\272>\270e\026\275\331\214!=OY\t\276\217H\\=\360\237\262\275\2324\200>\251)\330>o\325\230>\367\3144\276\202!f<\247\357j\276\305\213\344>\265\371\225<\007\335\312>\345\247\025?d?\313>h\025Q\276\311\226\245\276\245Q\234?f\2373\276&\272<\276\230a\370\276\273/\273\277Q\257J\277\t\213W\275\016h\351=\023E?\276\177\225.?\021\270\352>+\221\376>F\034\202>\340t0\276\367NM>\036\021\350=\231\344\376\276\365d\236\275\244\374\010?^V\251?\353Fe?\2327\367\276*\232\250>V\202\235>\036\002I=\260 \007?>\036\244\300\327A\253\276\374\322\032>\370A\303\276C\242\035\277\023\351\321?\032\003\261=u\032\273\276\'\026\016=\022y\210?\035\354\033\275WO\235\275\235\352\274\276a\027\227\276Xwm?%\230n>\020l%\277\237?\207>?\202\234\276pq\013\276u#\036?&\243\273>\220\'\202\276\304Vf?P\265/\276&c\203?\0237l=\213\016\321\275\214\233\212\274\221\2537@\272#Y@\300\366 \277\032c\037?\361-\n@=\267\317\273\224;\311\276\324\217v\275\232\3352>\026\004>\276{\022\306\275r\035\022\276M\213\273\275\022\334<\276<\333$=R\315\256==[\242>PK\252>\r\314\322\276\322\3401\276|\037\237?\236(%?\261\240k=\364z\250>\003\306\200>\275\340\\=\306\021\367\276\224o\214\277\267o\t>\314\344v\276\217\272\321>\335\305\n=\360\336\034\276\235h\333=\t\n\241>\330\n_>5\260\020\276eP`\276\221\264\272>\211\213s?\341\201\331>\020\252\306\276\301\024+\276\262;\033\275\0208\016?\375)\223>\354\035\203>\316\202\332>\314\342\n?~\257\017\277\374\273\252>Y\345J?@n\222>\302\032S>\260\301\245\276j\007\023\276m\344\332<\340\025\274\275\321\320\234=H\360\326<\017\025_\277L\006\263>\211\306G?\3010|>\225j\200\275fG\240\275\tJ\274=\246\202\207>0\020\233>\000K)=\357\212\264>\"\361.\276|\250\017>Rb\361>\250\0225\275\007-\"= 8\370\275V\346\363\276\037\243X??&\273=\2405/\276nq\n?\033\204_>\325\001\017=<\367\221\275\034\036\'\2765\020\200\276\265\000N>\027\357M?X\005\007?r=\211>\026\240 \277Q\272c\276%\341?>\005\207\313\274\374\225+\2776\305\'?t\334\277\275\341P\306=\353\246\265\277Y\362\n?k\001\177\275\260\250\037<\031O\204?0V\343>\022!\202\274!\302:\276\3613\t\276\367`\267>\336\262\256<$8\232\275rJ(?\003\003v>\225\035\010\277\236\360.>\004\330v>~A\340\276\267\032\205=\232\000\354=e\211h=\232\323\256\276\017s\265\276\312\203\001?\237\243\016=\177C\242\273\262\274\233\275\312r?\276\213zj\276\3036b>\001E\361\277)2/>.\177\220\276\275\327\232@Gd\032\276\221\326\371\276b\2709>\320\363\016\276;n\354\275\246s)\2760:\177=\002=\005>NfI\27600\036<\352\273\250>\220\340;>\216\310\t\276\r\203o>\271-\241=\370\005\235=#\252\252\276\257S\321>\343\357\007\274\204*\240>I\350\360\275\261\271\252\275\031C\007?*\013\262\276\024}\177>\207:\016\276\223\t\242>\376\347\t\276\213\266h>\206\246}\276\251\273\370\274\241>\036>fvn\275\364\360[>\272e\271?\215zy>\301\272\023>\232W\345;\205\203\200\276|\336\016\277\251^\247<\207i\001?|,T;\257\336\375>n5\353>y\021\200\2750\206\302\275\2602P\276\256J\224>\343\303\177=\335Xd<\265\020\030\274\2631V=\023\310\241>\367\303W\275\006h\n\277\003d:?\342\277\257\276\244\2318=\377\005\345\274Z\000\244<M\356\241\276G\013\t\276Yyi\276B*L?&J\222>\253\252\020\276\341.\252?E\3205@4\254\361\274B\202o\275\355w \277\207\324\016?w\030\355<\243\222/\276\263\373\341\275$\227\023>x\343\253\276\014\005\276\275\210\307\025>\000s\245>\267\033\230>\n\t$=\030\316\303\276\230\002\022>Aq\030\277\241\255\025\276l/\006\300l\242\307<\342\264\273\276s\207\313?\034V\231>\262t%\276/\036y>\323P\240\300\306\371\212<\206,U?\343\242u?\ng\215\277\213\233/?\374\245\n\276u+\242\275X\266-\276\001\242\035@a\231n\276\355\024\n\276\235\216\025?\206$\330?\305B\252\276`3v?ya\365>3|\301>\277\343\267>S\255\214\275*\235\217?\271\325\323>\037R\024?_d\003?6\345\260=\307\246M>\005:-\275v(\333\273D\2372?\260;>\277\224qy>\365\260D=*$\262?\350\337R@j(\252\275\2354\263?\300\322E=$\304\270=\350\nn=\310I\353\274\350\203\354\274\030\000N=D\337\365\275x\354g\275\343\207\006\277\375\0023\276\263\224w>K\254\344\274\364\000\205<\305h\"<^nB\274\310f\331=jF\\?\375D\376\276\202bH\276\"\262.?Cp\367\274I\230x=}\0073\277:1!\275\320\235\006\274\324\007E\276\225\2711\276 $\017?\353\246)=|#\006?\376\0337<\254\332\020>\312T\306\277\352\203{>\264\355\225\277<\025Q\276\373\271\275>\007\301~?\303\357\264\276a\341\255\276d\026\342=v;:?\226\220\271=\035\222\225=\036\357!\276\'\366\225=\004m%>\346j\265=Mg;>\377\224]=\306\305\355<\350`\341>\354\256\005\276\022\377\275\276\363\'\211\277\217\324\334>\016\277`>\323\344\217<d\256N;,\276\'?\326\327\303>\307.\010>\227\356\265>\205\300\263>\020@)>7\330\234>\267\336\205?\223\222\242=\377nH\275\233\353\324\276\254\202\337\277\314\272=?\210\312?\274\343\236\263=\367Y:>a\246b>\260e\367\274\317\317\372>\347\264\213\276k\315\033?\247\003\312>0\347\n?E+\256>\001\315\356=\254\202[\276j\335\210\277\277\346\032\277\352\222\037\275Ye\351=\253\'H?\315\230t?\375\217\327\276\342\324\014\300H\020\300\276p \364\276.\354\302\276\263\241\226?x4\r\276\366\031\007\276\177\036\254\274 \r\266\275\035\217&>\026\324\317=\314\363\334\2741\242\305>\215!\244?\336\266\312\275\t\r-?d\206\260>Lu\203>\310\324\024\275\253\310%\276\032m)>F4\026?6\212\231>\207\3679=\260.\\\275\322eY>\230\335Q\2760\203<\276\222A\301>\372cX\277\226\232\340\277\003\2436?d\016\353>~U}\300\301vb\276.\222\005?p\266Z=\230\225\265=\264\013\003\276\233-A\276\200!\345=hC\241\274l\2139\276\020O,\276\007\332\236?.\201\">\246\222\202>b\257\017?q\016\320=\351\375f?\214\314\235?\007\0059?\230\2232?\267\213v?Y\007C\276\356s\251\276\223@\027\276\232\315p?r\300\261=\005o\273?<\3007\276\354\002\333\275B\217]?\203y\201>>\005<\275F\303\215\276\211\r\341\275LO\243>eO\300>x\205\340>;/Z\275\273\314\247\276,BJ=M\013\033\276\236\276\016>\351\245\266>\026\202\377>\024u ?}\020~>\266\rT:\004\220\225?\226`8>\224\203\215?\353&\221>\364\260\216\275Y\330\036\276\343;\017>\315\214j>Cx\372=x\222\t?\321\241\203?\322\303.?\205\r\273\275\017\356\346<\273{\353\275%\303[\276\367F\336>%\215\004?b\363\353\275\010A\201<\276\r\346\275\372L\272\275\372~L\276\034\313\257\275\366\343H= ~4\276\265\035\232\2742 \006?\303q\230\276\2142d\275\250\257Q>\235\204w>M\025f>-V\220>\023\325I\276YvE\277\217\326\362=:\246\373\276\203\001l>\330\370\277\275+!|\277\256j\200\275\316T*?\356\234\r\300\325A\323=\262B\336<O\241T\276\226\340c?\021\274A\300\362\322\375=}\"X=h\016\236>;\212\321>\233Ej>e\035\364\275\212\235\233\274\326O*\276\004Y\346>\220\257\234<]\340%>Q$\317\275u\224\312\275\223\330\342\275\262\026>\276\254\336b\277]\"\255\276\nav=\035_;\276\013\331\215\276\273\362^\276\366\006\031\276\324\256\023\275\212e\313<\2518\250>D\370\037\276\317\227\266\275-\312;?\t\336R\276B\220\211\300\3129\252\277\241SU?\024\201\030\300dL\267;$\355\376\276\330\232\233\274 8\026>\312V\006>,R\373\275\370\234\227\274^\t\007>`\241\360;e\367\006\276R\035E?\334\336\220\276[Z\303>/\237z>\033\030\221\276\rR\220<\035=\333>\374<!\276\363\244\235>\344\221\313?l\233l\276\263\207\301>\376\327,>\203\025\205\275\324Kb>e\375\246?\020^2\275\324*\013=!#T\273\253\212\310>{\315\207>\035v\353>\265\021\313=`\007\023?<\311\303?\206c7?\340\205(\277c\001c>h\224\374<f\334\226?~\3278?\244\265-?\205\227#\275\310\375r?\030\202v\276bs@>\341\035\252\276\300\024+\276G\200\022?M\026\003\276\205\005\035=F\333\010<=dV\276\264\245\032\277\010\0044\276\014\006{\276\013\216f?\276\265\224\275\220\025\r?\373X\264\275w\r\351<\252\332@\277\324[\017?\367\363\254\276Z*\333>\'\217\325=\366\025^\2768\026o?\213]z\277\010\363Q\274\263\252\243\275\372@\017\276\231\005\201\277\276G\031>\244\355\216>\311\202!\276\224\236\227>\260\205@?k4q=T\323\266>\320\303\212\275\322S\201>\3215\304>\257\200\203?*===\331(:>\325\024\343\276M\354\265?AO\274>\330\366\200?m\324\203?\t\221\251>B\344)?K\334r\277\373\305\351?z\3432?%\264\235\277:\332\260\276\371(l?\221\260\372>\346\277\242\275\203\260\032?*\202\231\275\035\257\315>\211\200@\275b_j\276\253\310 \276\244\031|>\367\232\317>}\316\305>\235\307\204>\347I2>=U\256\276\026\220\324=\367\253u>\302&~<y%>\277 \326\250?SA\262=\264B\335=O\202\243\275\314\356\016>Wl\006>\017%\343?\000]\004@@l.?\332\317\371<f>:@\025\325\244\275\033\007Q\275 \326\251<x\000\231<\3400\334<&?\030\276\0026>\276\0208\245\274ZI<>\\\222$>\033^\257>Y% ?\221s\316>k\230\273\275Ww\377<9\3158>\253\nz\277\030n\014?c\231\324\275\217\272\317=O\3665\276PX\266=\206\303\211\275\373\007\343\274\316C\n?\375|\237\277\013\273\373><\367E\276\177\347\274>\026\242o<\255\343\301=MT\350>8\342y>:+\212>\033n\263?\237\364*?V\221\026>\307\255i?\236l\305\276,\025\320>W\270)?s*\275>\226(\232>y_\222?\016\215F?\267q\265>\255\360\365>U[\262\275p\353M\276j\213\370>\3051\036\276z\210\274=\255g\356\275(t\316>\006\017\341;\354\353\355=6\016\321>\326\311\031>d\251]>hs\351\275\332\032\213\276\300\275>\274\314E\224>\177c\032<\324\372\342\272M\317\020>F6\004\276\177\246\311=\370C\222\2774hR=i\335u\276w\326p>\177\267Z\276\227w\377=\034\332\336>\376\036\031\276\222\025\023?{\201\270>q=\333>\361\353\305\276U~\310\276\\T\014:8\250\t?\346\3145\274\312\346\307>\336xs\275\344c\343\275\010\374\266?\317y\314\275-\326\237\276\246\335R\277\1776\232<\017\266\247>m\'\030>\\1&\277\262\241\302\274p \237\276\340\352p\276\260l->\245\262\254>yr\265\275\010V2\275A\330N\276K\303\377\275 :\240\275\306&\341<\265\211\233\276\377W\002?f\334Y?\021.=\275\211\205$\276\357/\323>\035\201>\276\"\241f\276\372\204\003>\026\351\347>\311\327\322\275\3707$?\302+<\276yA\355>J\222\203=\265\233R\276!\272*\276G\234p\276\355\232\306\277\r\371\222=\001\202\221\276Sf\327\3004\314y=$\037\354>L\244\245=\000\264\311\273q\3508\276\302\344O>F\345\020\276l\203T\275\0354\352\275_{\365\275\377\341\366>)\204\324>\204\232@?\260Mj\276\031\004\224\276K\354\327\275\2203\243\277O\243\242\273(\274n\277w\320\342?\241\t\220<\230MX\277\212\362\334\276\317\343x=\347O\203\275\020\201\300\277omr\2776H~=i\260\232\276\227\312\207<\345\203\242\275\250Q\266\276\332r\265\276\316\273~=\274\355j\277\303\357\264\276\364\221\261\274\034\250$\277\355\211z>-\247$=\217\001h\276)!\221\275\234\303\203=\026N\252?\234d\346>\372<\304>\325\340=\275\243\365\031\277X\277A\276\242\373\233>\373\226\225\275\255\360\031\276\301\232\177\275/\247\264>\3205\017<\351\214\344\276[M\233>\206&\377\2769\366\257\274\031\233\220=\031\024\206\274\231.\340\276B-\276=R\357\016>)Z\023\276\360\337\177\276\346\3619\276\267\335\021\277\250+\332\277j\001X\274\252\361\332=\344\033\214>3\306\262>\330Q@=\031\276M?\257PU\275\200\361\302>\316[J?#\335O>\343\216\227>\216?\265\276\226\335\240>\017\231\t?\302\354S>\335\332X?\257/\333<\277\021\n?d\246\032\300J;\010\277\237\t\021?\235\306\252>r\265s\276%\035\024>a\360\326>\033\345>@YA\023\275O\341,\277\346\201]?\006#8\276\037\356:\277\234\374\321=Ot\006?\006\305#\276\372{M\277Q\000\311;\212\020\026>\243?,?#\310\005@Pz\207?\006\356\257?\347\002\002?\020\010\232>\007\026\347\276\307r\226\275\273\024\203?\234\256\220>\222\207w?<\270\272?U8\206\2757\025\026?e\265\'>Fk]\276\013+`\276\253s\306=\037\235#>^\305\370?\222\000\351>\223\204\225\300@b\217\275\221\"\200? \315`\275\300h\210;\314\375)\275(\312\345=z}\303\275`\230\321=\260\311\303=`\240@=\277\371\206>\355p\275<\312],\275o=C>hq\211\276\345\217\\?\275T\027?\214*\304>k\311\205>\2422\205\276\307w\035>FP\010>\330\tT=rR\262<\270e\007?Z\007J?S7\023?\276\177\202\2767;\222?\3751\331=\311&z\276\023sr<\230ER>/\340\277\276^\342\022\277K\376\361\275\250\1771?mJ\320>YH\265\276\'\331\317;\230\017\306>\325Y\t?\377\"\274=\313M\305>v1\037\276\202\366p\276z\314)?(\205\021>F\242\341>\263\366O\276\306\003B;\255F\342=\333C\301\274\\\337\261>?\260b\275\034\004\320\275\340\354G?\324\265\030>\215\354g\276\347Dq\276\325\306\327=\267k\010\277pI\212=Y\332\224>\016\022\300\276x\007\036>\002\235\001\27645s\277ei2\300t\021x\276\037\311!\276n\r\217>S\262s>Ip\317\276\34598> \037P\276\365\365$?\033\366\370\275\251r\317\273[\322Y\276x\270\027=\317\312\267>\010\367\256\276\203\365\201;\004|A?\273R\207>\000\000\254\275\246\214\005\277y\333\263\276\373P\023?\227\300m\277\273b\036?.\300\300=mn\241>X\215\213?\321\r\300\276\356\317\004?DcD?OjV>\254\227\307\275\'\226\027\275(kU>S\355\261=\022!&\277\001\321\301:\300\010\203\273\"\002j>\353\345\232?\031\311\362=H\343\000?\365Pz?\273!\362>1\237N>J\026\314=\316fB?\320\242\032?\250U\252>\321\275\001?\311\306\227= {(\277\035\276\364\275\3558\343=-\320]\277\004\325\227\277q\3408\300\270N/?\017o\262\277\246\375\002\300D\321S\276\332\032\203?\270\265\301=x\243_=\234\271\275=#\341\326\275D\313z\275\0162P\276\330\321\206=\264\227\236=\216x,=\247\030+\276J\227\t=\023\313\350\275\236\375\225\275\246z,>&\177R?i\346\251>j\315 ?#%2\277r\262A\276\"\326\023\277\224\362a>\321\"\030?\304y1\277\2425^?->\253\276@\367\255<\327\001)\276\373b\325>gGX9\246e0\276r\265F=\333\003\276\276\343=\313?\222X3>u\315\232?\262z\000?O{\003?x\255\263\276\357F\350>\354n\315;^\214\245>\363D[?&\223\201;\367`\001\277\351\240&>$\260\305=\355\244S?\2710\235\275w\227\356\275;p\014\276\233\320e\276d\277A>MmA\276\336\357\364\275z4\025>\336\354\030?\225\242\334\276\323\332\010\276C%m\275\204Z<?\201\013\224\275c\220\026?\261\276\270\276\272\325\300>@\270/\275h\235\350>\006p\230?\003\026\373=\003)L\276^/\204\276\342\007\223?\207\344\014\276.\371\253>\366\325]=\210|\267>\037\376\321>]\273`\276H\350Y\274\t(\016>\352@3?\250kI\2779\030\323>\034\005\017?\212a.>\022{\003?\344^\023\277H\374\374>v\0244?E\350\256\277\007h\r\277\305\010\306\276\264\221\376>\332\346\227\276\252\324\037?\264U]?\356\254L\276\372\000C\276\036c\026>\372NH\275]P\000\277\232\301#\2762\372!?8O\201\275\334d\020\276\006\341\253=\\\210\014\277j\231\372>1\007\212\276\024\205\373>\027\327}\276\"\315->\315\'j\276\265E\332<z\010\004\276\345\216\226>\245\265F\277\234A\226\275\306\223}\277\222C]\275\325Z\205\2747\333%\277\0221\216\277ue\357\2760)-?|\235\377\276\215\223[\300%\220\016<\336\343\031\277@d\034=\260\245L>dB*>\240\302\024\274t\241\323=8\202\005>\'\213H\276\034\330\'>\tK\377>-\345\257\276\346c>?\314\235\264>Q\341\260\275\366v\270\275\027\363\314\274M\326\036\2770\312e>\341\000\027>\'\352^\275\270\245n=}\352\334=\257\221c?\345\201q?\363\001\343>\247i\330>\202X\361<\315\3157?\027\323\253\276.\327@\273o\326\226\276M\266\230>\006\236\330>\350\260\207\275-\265\025\276~\234p\277\277\263\026\277\242\367!\277\335\263N=\222\334J=\363>\242=\236\242\256\276\025\250\253\276F\347\034\276\007\020\241>N\200\035= \2069\275\336C\330\275\311\003\263\274\245&<\275\226T\035\276t(\321\275\272\233\236\276\244h\363\275\302x\270>\330\200\254>\004\266\013\277\312\360\023>\010i9\276b\003\036\276\303&|\276g\240c\276\270@\004?^i;\276\3017|<\312\023)\276\215\027u\277\275\334\013>\313h\225\275\345\324a\276C\016\027>\323\376_?5\256\227>\260\334\312=29\253\275V\0342\276\32552?\2574e=\254U\323>\250\253\334\276KD\374=P\254P\276\313B/\276z\371\240<\222\351\253>\315N\000?\003\223\263\277\311\227\203>1\267<\275\221\031\r=O%@>\341\213\237=Z\260\014?A\266<<\034@\233>\343\341\267>m\003\256?\274\235\267\276N\255y\275\330\017<\276\356\227:\276\301\307\326\275\257\366\370\276\004\242\305=\225(\036\276\327$\227=\205\321\375>)\350z?\033\357}?\317\362\201\276\010\316\255\275\364\251\310\276\213\224\355\275f\001y>]zA>\370\241@?\034]\264;Iq[\2757\274\330=!\336.\276Y\031\024=\325\031\236>~\262<\276\346\220\203>\310\016d?\376\276\n\277K\260\002\301\032\237\222\275_\361\231\276 \247\035=\332\355I>\300`k;X\236\217<\360\202\311=U\254\033\276\355\2107\276\352\010\352\275H\232\374=\354%\243\276:\241\226\275\334V:?X\330~\274r\022\320>\304\365\363>\305\304\375>\216v\211>M\210\356=\246\332\310\275\3306\322>%\343\020>H\251\215>8]\243=\302\323\372>\204\216\244\276V\033A\275&\214\232>\232\235\316>\004u\225\276a\010\n?{\312\034\276f>o\276\003`\350\276o4/?P\366O?}\010#?\010Jv=g\331\217\277\331|z\277\313\203\002\276z\264\030\276\337\030#\277p\212\337>\233\243M\276\314S{?\177E\025?\305\367\034\276D\256\323=\006\003\007\276\307\213n\275\255z?\276\266\265\t?\330]\023\276\325\357)>T\326\010?\263\3628?\003\025\336\276V{\212\275\251\265\017\276\234\231\351=[N\037?\264\342\275\274\256<\036\275\351\275\330\276\37265>\352\302\274?)\224\366\275V6\364\274\251\305\013\276\024\324z\276R\375W=\375w\220>\346Q+=\342\316\242=\324\210\361>\251\374\211=\234\314\317>5\237S\276L\262\304\274p\2720>\233\225\376>s\276I\275\027>\222=\264\3277=\347\003_\275\307\002\206?\250 \376\276\375\200p>\342\301\017?\263B\360\2769\307C\273\323\253\216<\3511\321\277\"z&\276\"\315]\276\035\374C\277d\222I>\264\'\272=\345\034\262\2752\352P>n{\217\275\266\021\217?\032\253\371\275\345P\245=\313\327\025\276N\360h?\020\362\024?\242\375\321>\331\341\346=\202eV?^\347-=GJ\255=\3743\013?\017\224\201?\310\"\326<\315\032K?\266T\327\275\210T\374>\007\242\330\275\313\214Z\276\026\306\201\277\361\342\020\277W|\363>\022\007~\275\227\366\022>Pbs\277\177\201\307\274B\273\366?\254)@\275\274\365\024\276\312w\036\276\r<\022\276+>\262\275\000\235\355;\350\334=\276\306\213\034>\223\337\347=\334\345\374=\217\357\213\273\264\257:\276\n\254z=u\245R\275\253uH>\274\376\002\276|\014$>\314,K\276\'\277\250<\2629\010=\300^I\276\177\242\364\275+f\233=N\367\341\275\027\0313\276\331\3123<\213\326A\276\317\034\'<@\371\016\2765&+\276\030\350\023\276\310@\312\274\215\0343\275Znb=u\361\020\2765C\360=V\227\010\276FCd=\230\207\t><v\032>z\206\351=\235\323\014\276\250\346\216=\"\332;>\320\314\373=\003\013\247\2757\027\327\275x\265\242\275\237\3418>ZM\361=4EV\276\0215\215=\306\355\017\276\t\265f>^\263x\275\271_0\276\037.Z>\207M\030=R\0368>fn(=\364&R=\263\221\026=\005\275L\275\026\220\220=)Z\r>H\301\307\275x8\334\274\016p\275\275\377\261l\275)PE=\265L\r>$\362\330\275qS\'\275c\014\244\274X\273\200\275C\3028>J\022\326\275\256\250\247\275\022?\n>\255\300\010=`S9>\003k\254=y_0\275\262E\030\274\032_7\276<\2306>\332z\016\276\333\252\366=C\377\263=\030?\033\276\021\212W>\316\326\251\275\255x3=C\3171\2760v\246=\335\030&\276\030\303]>\311\2277;2M\343\275\310\213\271\275`\224\321\275\001\020\225;D\260\021=t\341C\276\r@\030=\303p >\177_\320\275X>\007\276s]\372\2753\205\277=\231\001\022\276\223\306\177=\275\224w\275\313(\207=\035\343&=&L\030>\256U\220=\307q\277=_J|\274\312\331\013\276[\310\315\275<\202\361\275=;C\275\354&2>\214H\267\275\356\242k\275\240{\207\274\277\253\001=~yD\276\340r$>8\314\305=(IE\275tH\010\276\034\344\334=\024\277\271\275\315[\001\276\252\014\221?8\020\321>x\277d>3\036\233\275\346R(\276\321e*?\201h\246=\272Q\240>\023qL>\031\215\313>\224`4\274\362\222\351\276\377\244\"\276\231;\276>\325V.?\343F:>\236sM>\000\222\224=\273\025\324>\316{\303\276\212\221\\>\340)\036<\214\3030\276\251\2160?e\3751\300\346\326\034\277\256 \223\277\377\366\222\277\363\323\303\275:\004\312\276\343\327\226\277(\360b\276\303\346\214>\3575\226>\261_\"?:#\364\274\356\266\367>\230\013(\276@\267\010?\321J\251>\007\007E\276\'\304V\276s\317\021\276\232w\001\275^\234\203=\206\035\334=\244\2725?\373\366\250>\220\002{>j+\n\276\035\025\376\275E?/\276\360\304\017\277R\360\341=l\320\300>D\357\230=\2145\026\275Q\036\005\277\241\n\004@\327?p\276\315F\006><\227\337>,\314\206<\3145\026?#\335]>\315Dm\275\276*@?\301D\320>y\332\n>\211f\016\277\271\376\314>\037&o\276\"Yt\276\\\337\235>\326\314\002\276d\315\264\275\305\212\355>\247\213P?a\314\332>3\271\337>\245S\020?\023\212[\276\374\013\323\276\212:D\276\307\207\'\274e\276\'?\025\332[?;\235P>\344\222\235\276U\005=?w\244\262=\327\265\014\277@\000A<\372\352m\276z\3516\276\177\265\n\276\203\033\233\275Cq5\277\344(&?\202u\320\276\014\350\022>\353\220w>\337\370p>\020\371\327=\354\263\017?F\304\260\275?\237\273\276n\201\265>=\376\336\275\346b\254>\321S\017\276\364e\223\275C\220\217\276\027\2251?2\332U@D\2531\277\271\262\025\277w\003\267@\301d\352<\213~\007?ad?\276\225\t;\276\200\212\301:@\346\235;\030\240\027\275H\r9\275\320c\224\274Xa\303<T\356\307<GK\363>F\265;\276BJ\021?\"#\201\276m\314\216=\332Y\'=\331c\032?DM\014?\272\022\236\276R\034\340=\374x]>\211s\214>~\231U?\341\351\032>\276sn\275\032u\273=\355\344\362\275\365D\240\275\352\326n\275\304\322@>\2353\215=G\374\255>\337\026\277>\243pM>\205\017L=\3640\014\277\\o\227>\016\246;>\331`\332=\020\306N>l\375\301\276#\323\023?{\365\326>/\005\t\276@\271\306>g\334\036?\313\252\021?+\007\227>\336\013\336>\002\305\252\275$\\\352\275 \"\016\275L\301\246\276|#\347<{\2117??\360v\276#8=?\212\253\001>2=\220=\210\246E\275\223~\363>m\200P\276\272\361g>\354$\030\277\330;|\276\323\200\225=k\035\037\277\233\205\224\276v\300\204\275\024\336\332=\230\201\024?\237\314\013?l\223\032>\026\320\246>A\032B\276\360*\035\276\000\324\202>aV\341>\215\220\034\277}S=\2778\341[\276\000\235e?\227\t\017?\205\300\261\276\266\313 \277\334q\374=\367g\301\276\3778\336=T)\273\276+\346\273\277\2637 =;\272\\\275\260&\213\276r\334\r@\364\014\026>\261(\373\276\032d`\277\te\300>MK\350>\270\266\327;\020\305\343\276\322\270/\274A[\337\277R1\275\275\214\010\204\275\232S\030?]\244\026?H\222\276>\303!\321>?\314\"\277\250\'\212\276\177{\372\276\371\373:\276,\342\307\274c!]\276\260\345\353=S\323/?gg\255\275\003\351\000@_\272\024\275\265\2148\276\322\314\324>\017F\321?\32766@:\235\203>\005h\025\277\233k\260@\236\346m=8\241\237\276\334\243\232= \337\257=\224\023\363\275\000\004\221\273\260\327B\276\320G \275\222)\217\275\036\"1>"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "3<\256\277\333\304\004?\310\356\003?\265r3\276\351\352\232\275\275\014}>\002\231{\277\263u\211\277\024\307-?u~P?d;d\275>\352-?*y\212?\215T\312>\216\372\276>\006\027\021\300\210\325\353\276\026\335\225\274)\226\014>\302\253\267>\\\302\023\275/`\024?*:\016?_\325\302>*M\360\277y\350&?\374Y\275\277a@B?\033U_\277\342g\370>\202\244[\277\315\323\200>\177\301\217\277\226\273\213?\304\274O\277\010\200q\274\226a\014?&\030{>\022r\177\276eg\336\275(\265\267;\331\026\360\274z\003*\275\253\224\206>\\\215\373\274\3111t\277dMb>05\311>[\250\277\275\006-\221\274\236.>\275?}\307>q\247\n\275]AC>\236\303\350\274\341\232Q?\017[\031\274\222\021=\277\037\216B\277\013\324\215\274\327:0\275\2243\354>HG\033?\274n\035?\346\310\326>\346bf\2759\226\212\277>|i\277FM\267\276\330\242\366>\010\275\217?D\332\215?\373\017{\276\246\2147=\332wD>%}\206>=\344\200?\275\013\023\300d\2666>DL\276>\210\213\232?\2552\033\276\034\236.>\215\024\312\276\006Z\206>\254b~?\n&v=\272\340,?\354b$\277$\310\200?\204\262\006\275\343\317\021?\300\273\304\273mo#\277(E\315\274\303\034\341\274\363\215v\276\217m\031\277\352\245\346\277/tE\300?\350\365?iL\317>\247\272\031?t\240_\275&\237\005?#\216\177\275\377\352L\277\346\341\227\276\352\322\003\275n\232{\276\333\221\030\2743\031!\275\323d6?M\242\220?\322\305\356\277\246Z\003\300\016\354\216=}\")@\237l*\275\215\253R>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\253\237\307\276bj\321\276\005\350\373\275\216\353\356>\311l}?\314\026\260>F\227r\276\253\235\216\276\222Ps\277\220\014O\277\263\220\231\274T\224\211?\007\236\252?rn\266>\364\250\204>\007K\311\277\313e\236\277\237\373\034?d\222\n\277\370&\267?\232\222\216\276\010\372e=\223ey?<\032\326>\322G\253=;\260\271>\346\226\331=\256\027.>Y;%\275\331|\022>\241_\336=\305\366;\276?/\222\276\244\tR=BW\300\276[<R\276{%*\271\306\302\254\276\363\037r>\024f\025\277u\324-?X\000\t\2741^\305>\235\254\232\276\346\356\231>\376\366\r\276<Nq=\226\017L?\264\264S?Fi\006?pY ?#B\006?\0346\247\276\277\225\345\275#\227\t?\006\334\023?a\321x?&C\224?\006[\226?37\024\277\330\232\341\277\220D,\276.\320\337\277\nN\217>\262\030\353=+p\267>\030\302O\277y\314\031\274o\010\244\277\221H\376\274\374\212\240=Ry\257\275\272\255/>\022\254\372=\215\262)>V\276\225\275\024}\227\276\317\3217\277k\251+>=E\312=\217\312\363\276\262\374\241\276\270\201\233\277\033\271\317\277\301\177B\277o\'\212?\326\242\024\276[|_?7\021\037?\017\013A\276M\205m;\277\004\204>\213i\365\275&\222*?\377m\362;#\254\204\274-\370\010>B*\024\276\224\306\026\277\361%\206<\261\233N\276CX\207<r\264=\275l\350:?R\025\354\275]\352\360\276\330N\346\275\323Q7\277R8\240\276\014/\231>\307\334\340\275\343\3210?i\250\014>\\\343:\276\250\237l>(\222\250\276.\223\025=+\335\010=\304n\331=\267\014\005>\364\222\026\277\367\025\232>\351\017f?\216\017\t?\231\205\n\277z\014\266?\256\333\253>\2738\r\277\023P\366>~\254\262=L\314\373=wo@=\246%g=&\346u\276\252\243\243\276e\316\013\277\313\256\305\276}\026\273\276\307\n2?L\t\262\277\000\204\204\274\273s\264>l\200\210\277j\'\036?\025\2425\276\001\252C\277cM\016\277_\375a\275\356\256i\276\224\363\344>\324\220r\276V\332\r?\036\340\237>o\034\025\275\345\003\323\275\213\331\205\276\331\275d\275k\313x\276\323\000r>m\232\207\2732\247\253=u\352\003>\273\226\024<\255\212\251>\377i\266\275,eh>,h\347>\302\304\017\276\335\353\327=\351\253\341>\221IC\276\305\370\253>I\036F>F\367\205\276\252\257F?\267]\027\277WZ\316>C\206\354\276\306\246Q\277\342S\245>\203a\024\276\341J\223\277\324\202*?\305\377\333>\353@\327\2776\001\347\277\204\241\245?\013\201\252\2770 y\275\301b\213\277I\315\232\277\245\250\214?\0324\374<\214z\255\276A\2450\275\367\270\351\276\316&B>T\237f>]\245\000?|\266\035>1\244\301\277>Y\017\277\275\n\336\276\227\367\001?\0331i>\\x\250>\003bN\276\337\023\362>\372\262U?\201\214\322?\374\274\374?;\221\307?\240\272\"?\325\260H?\326\353M?\243\341\305?/\255\217>u\242\001?\350\347\003?\330\332i\274s\222\330\276;0\271>\331\231\217>\030\353\221>B\322\337>\353:\026?u\362\303>\263\223\024?\320\365\035\277,\352\370\276\251C\341>\307\333F>\200z\027>\210\'\t?\337\3301\276L\021\203>}\003\242\276\274V<\277\245\267\204>\032\233\220?\327k\253=\221\367\265\274y\307/\276db\260\275\005\323\324\274Q\2770=$\177z<\357h\014=\002\361A\277@\365W\277s\367\271?-A4?\036/n?7tf>\202\212\364>\373\352)?kP\260>\211K\r>hm\277\276\327\303\004>b\330/\276\362\214\353\273\\\220\342=9\036!?\261\250\250>1\016m\276\355\223\345>c3\222=\013\244?\276z8q\276\217\221\034?bh~\276d\230h?K\261\005?\246\243g?m\333\202>\374\377\234\277\213\213\027\277\350\227L\276Ah\200\275\326\304\276\276\357\260\217\276A\363\240\276\351\025\351<\r\377\271>I\0002?\001\243\r<!\215\377\274Fr\376>7$F>i/)>z\323^\276)`\376>\355\353\010\277\0269\242;\223\303p<t\306X?R\275\340\274>\007c\277\317Y\320>\020\006\371>\345u\321=\223\367\201<\243\243\323\276\273h\326\275\237\324\263\273\342\213*\276\267\356r\276]\344\030\276\364\376\n\276\272\250\322\274\314,9<\215\002L\277*\212n=\231\006<\276\035(\r?RV\007?\345+\365>\213\345\303\275\356w\230\276\374\014e\276\230\301\207>\365a\272>\375\223)>\r\034\023\275\246r\235\275\233\267\023\275\364\207\016\277L\206\004?\365\234O?\373\305\200?K\241\302\275\326\354\377\276\026\360\236?\322Os\277$4\267\276\257w\236\277\354\t\362\275\365 \037\277\r\3014=\222\374)\277k\300\225\277[rD=\213\322\246\276D\341\301>V3\037\2771\255\000\277\241-\305>\005\034\002?\343\272q\2778r\346>\370\2616\276}\217g=\352AX\277dwr\276N\016\316<\203\216\362<1wH\2761\035+?AM\250>\2443\352\276$\202q\275|\'/?\205\206U\276\314\336\017\277\310\205\222<\217\236\322>\256\207\356\276\274h?\276\000oC\276\307~m\275d\236Z\276\270\347\303<_\001b\276\037=E=\020\210\317<\344\016\251\277\363\232E\276\377\014\210>ZHA\276\013\222\t\277\210\201\237\275\322\214g\277w_\'?\373<\204\276\277\353\000?\001\271\201\276\035&\325\2768\335\313\276,\231\214\276\032\016\243>\376\033C?\300\207\016\277\360\261n>\021\367$\277\035%\350\276D\0264\277\241H*\276@\236\272<x}\336>J\315\000\276\316\200\200<V\346\256>}X\311;\017\010Z\277\315\213\254\276\031\370\357>\224\352a?\303\031\373\276\255(~=F\221\005\2779\200\207=\224T\003>\020+^>\276\341k\276\304X1\276<\353\243>f\201\265>\016\257\206\274\024\230\234\276\333[\362=\'\326\273\275$\376\201\276\335\037\016?\257e\022\277\227<\332\275\304\262\210\276\032\026@>\346\344\212\277\2376H\276#\"\222=@\263\272=\177\352\203>\266\264\001\276mdo\277\032~\344\276\377X_\276#S\354\276\025\003\222\276\034\024\237=|\367V\277Cz7>\177r\225>;\2055\277\014\347\230\277\247\254\014?\374\230\237?\343s\211\276\214\306\020?\234\2736\276\355\252\304>F\372)?)\010u\277\266B\030\275 l\341\276)(N>\205\262\000\277m\225\240\276\202\357\300>\301EW>.\265\363=\352%\264>\274t\356\275B\010\023\276\323\374g\276\020\260\224>\333\007\307?~vc>>$\037\300x#\347\275\023ql\277\016\246\200?\016\225\021?\242vx>\274\311\235\276\363\010\305>\317\025T\277\364\353\030\276\007\367\377=\036k\312\276\220\002Z>E]\230=-\210\215\275n\0200?\371\013\244\276\211\010\t\276I\276\305=\256!h\275\232F\'?\270\226!\2779q\\?\326\304\325>\270\032\224=d\247\214>%\377k\277~\306\034\277\007\331\350\2756\372<>.I\316\275Y\236I\276\373\203\252>\317\260U\276\242\230\262\276&,\"\276\250\351\013=\205\014\227>N\000\014\277\0247\024\277\323\314\005\277\344\352(\275\034F_\276O|\304>\252!\023?\212\206\265=<%_\276O\241\036>\306x\022\277S\267U>]R\377\275\321g\277\274\007\263\032\277\215h\347\277\000\n=>\027\'\013\277\372\242\217\277\225`\025\276\246}\321\277Y\213f?\241\371\325\276\351:;\300#N >Y6\360\277\326wI?\362\201i\275\371\235N\277~u\'\2751\233B=\346\201G>\203\010C>l+y>J\001\240\276\323%G>|\037e\276\007v\354=\367\240\302>\263\203\024\300\232\024\313\276Yi$>\336\225\002?\352\003\206\275\001\316B>\235.\n>\333\"\031?\230\311\270\277\213\230\264\276\r1\211>b\275\235>\005\310\213\276\003i{>\255b\267\275\342U\251>\335\260\027\277\233\207\265\275\025R\310>\354$\322\275\354\301\260=\247\241\330>Q%\237>\371\026\235\276\251r\334\276\322\340\205\276\222s\215\275/\260\253\277\211\340\265\276\256\023X\300\223k\030?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\231\241\212>\372)\303\276,\357\257>\021\306w\273\322\340\223>tE\220>ZA\037\277i\005\200="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "UqT\275\035\024\006?1K\340>oIn\277G\013i\276\356h\335>\345\220\273>/\3404\277^\316@\277\336\340\236>\337\345\027\277n\232/\277f\2368\277\004\367\314\274\346\360\035\276f\270\000\277\001\350\335\275i\267\306>\373\370\313\276\377\263<\277\235\3274\277\270\362%\277\215Jo\277\023\321\262=\316\210t\276k\0311\277\334\221\020\277\000\201\241\275\333\t\177\276\276\270!=5\271\227\276\007Ef\276\306\316\024\277\252\022\214?(\224\330\273\'\233\004\277\315\323>\2779\3421\276\300ag\300\r\020q>\336j\340\276\033\232\233?|\345\352>\021\227\003\276?\216\357\276RsS\277\222D.\300i\333.?%,\277\276\370\203;?\023\034@?\277\2465\275\0378\317\276\250\016+\277\374<l\277=\222J\277\225\227\264>\024\260\216?\357it?\360\247\210>h\010G\277\306<\013\277\214\273\370\277\223P\263\276\325\322\331\276#]\266>\315\2075\276Oyw\276\215kB\276\377\033\344=\262\0061\277\2528\003?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.5411487221717834
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
